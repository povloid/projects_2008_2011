//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Workstation {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("phmkDataSet")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class phmkDataSet : System.Data.DataSet {
        
        private BRANDSDataTable tableBRANDS;
        
        private COMPANY_CODEDataTable tableCOMPANY_CODE;
        
        private LENGTH_CATEGORYDataTable tableLENGTH_CATEGORY;
        
        private PACK_TYPEDataTable tablePACK_TYPE;
        
        private BRAND_FAMILYDataTable tableBRAND_FAMILY;
        
        private SPECIAL_FLAVOR_CODEDataTable tableSPECIAL_FLAVOR_CODE;
        
        private THICKNESS_CATEGORYDataTable tableTHICKNESS_CATEGORY;
        
        private SIGNATURE_TYPEDataTable tableSIGNATURE_TYPE;
        
        private PASSPORT_TYPEDataTable tablePASSPORT_TYPE;
        
        private LOYALTYDataTable tableLOYALTY;
        
        private LANGUAGEDataTable tableLANGUAGE;
        
        private OBLASTDataTable tableOBLAST;
        
        private REGIONDataTable tableREGION;
        
        private SETTLEMENT_TYPEDataTable tableSETTLEMENT_TYPE;
        
        private STREETDataTable tableSTREET;
        
        private STREET_TYPEDataTable tableSTREET_TYPE;
        
        private POPULATED_POINTSDataTable tablePOPULATED_POINTS;
        
        private QUESTION_TYPESDataTable tableQUESTION_TYPES;
        
        private ANSWERSDataTable tableANSWERS;
        
        private QUESTIONSDataTable tableQUESTIONS;
        
        private PRIZESDataTable tablePRIZES;
        
        private MEDIA_CLUSTERDataTable tableMEDIA_CLUSTER;
        
        private MEDIADataTable tableMEDIA;
        
        private ADDRESS_BLOCKINGDataTable tableADDRESS_BLOCKING;
        
        private EMAIL_BLOCKINGDataTable tableEMAIL_BLOCKING;
        
        private PHONE_BLOCKINGDataTable tablePHONE_BLOCKING;
        
        private MOBILE_PHONE_BLOCKINGDataTable tableMOBILE_PHONE_BLOCKING;
        
        private USER_LISTDataTable tableUSER_LIST;
        
        private COMPAIGN_MEDIADataTable tableCOMPAIGN_MEDIA;
        
        private USER_COMPAIGNDataTable tableUSER_COMPAIGN;
        
        private COMPAIGNDataTable tableCOMPAIGN;
        
        private COMPAIGN_PRIZESDataTable tableCOMPAIGN_PRIZES;
        
        private QUESTION_FOR_COMPAIGNDataTable tableQUESTION_FOR_COMPAIGN;
        
        private COMPAIGN_POPULATED_POINTSDataTable tableCOMPAIGN_POPULATED_POINTS;
        
        private GLOBAL_BLOCKINGDataTable tableGLOBAL_BLOCKING;
        
        private OBLAST_DWDataTable tableOBLAST_DW;
        
        private SETTLEMENT_TYPE_DWDataTable tableSETTLEMENT_TYPE_DW;
        
        private CONSUMERDataTable tableCONSUMER;
        
        private RESPONCE_CHANELS_DWDataTable tableRESPONCE_CHANELS_DW;
        
        private MEDIA_CLUSTER_DWDataTable tableMEDIA_CLUSTER_DW;
        
        private MEDIA_DWDataTable tableMEDIA_DW;
        
        private BRAND_FAMILY_DWDataTable tableBRAND_FAMILY_DW;
        
        private BRANDS_DWDataTable tableBRANDS_DW;
        
        private BRAND_FAMILY_DW1DataTable tableBRAND_FAMILY_DW1;
        
        private BRANDS_DW1DataTable tableBRANDS_DW1;
        
        private PRIZES_DWDataTable tablePRIZES_DW;
        
        private PRIZES_DW1DataTable tablePRIZES_DW1;
        
        private CONSUMER_QUESTION_FOR_COMPAIGNDataTable tableCONSUMER_QUESTION_FOR_COMPAIGN;
        
        private ANSWERS_DWDataTable tableANSWERS_DW;
        
        private RESPONCE_CHANELSDataTable tableRESPONCE_CHANELS;
        
        private MICRODISTRICTDataTable tableMICRODISTRICT;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public phmkDataSet() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected phmkDataSet(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["BRANDS"] != null)) {
                    base.Tables.Add(new BRANDSDataTable(ds.Tables["BRANDS"]));
                }
                if ((ds.Tables["COMPANY_CODE"] != null)) {
                    base.Tables.Add(new COMPANY_CODEDataTable(ds.Tables["COMPANY_CODE"]));
                }
                if ((ds.Tables["LENGTH_CATEGORY"] != null)) {
                    base.Tables.Add(new LENGTH_CATEGORYDataTable(ds.Tables["LENGTH_CATEGORY"]));
                }
                if ((ds.Tables["PACK_TYPE"] != null)) {
                    base.Tables.Add(new PACK_TYPEDataTable(ds.Tables["PACK_TYPE"]));
                }
                if ((ds.Tables["BRAND_FAMILY"] != null)) {
                    base.Tables.Add(new BRAND_FAMILYDataTable(ds.Tables["BRAND_FAMILY"]));
                }
                if ((ds.Tables["SPECIAL_FLAVOR_CODE"] != null)) {
                    base.Tables.Add(new SPECIAL_FLAVOR_CODEDataTable(ds.Tables["SPECIAL_FLAVOR_CODE"]));
                }
                if ((ds.Tables["THICKNESS_CATEGORY"] != null)) {
                    base.Tables.Add(new THICKNESS_CATEGORYDataTable(ds.Tables["THICKNESS_CATEGORY"]));
                }
                if ((ds.Tables["SIGNATURE_TYPE"] != null)) {
                    base.Tables.Add(new SIGNATURE_TYPEDataTable(ds.Tables["SIGNATURE_TYPE"]));
                }
                if ((ds.Tables["PASSPORT_TYPE"] != null)) {
                    base.Tables.Add(new PASSPORT_TYPEDataTable(ds.Tables["PASSPORT_TYPE"]));
                }
                if ((ds.Tables["LOYALTY"] != null)) {
                    base.Tables.Add(new LOYALTYDataTable(ds.Tables["LOYALTY"]));
                }
                if ((ds.Tables["LANGUAGE"] != null)) {
                    base.Tables.Add(new LANGUAGEDataTable(ds.Tables["LANGUAGE"]));
                }
                if ((ds.Tables["OBLAST"] != null)) {
                    base.Tables.Add(new OBLASTDataTable(ds.Tables["OBLAST"]));
                }
                if ((ds.Tables["REGION"] != null)) {
                    base.Tables.Add(new REGIONDataTable(ds.Tables["REGION"]));
                }
                if ((ds.Tables["SETTLEMENT_TYPE"] != null)) {
                    base.Tables.Add(new SETTLEMENT_TYPEDataTable(ds.Tables["SETTLEMENT_TYPE"]));
                }
                if ((ds.Tables["STREET"] != null)) {
                    base.Tables.Add(new STREETDataTable(ds.Tables["STREET"]));
                }
                if ((ds.Tables["STREET_TYPE"] != null)) {
                    base.Tables.Add(new STREET_TYPEDataTable(ds.Tables["STREET_TYPE"]));
                }
                if ((ds.Tables["POPULATED_POINTS"] != null)) {
                    base.Tables.Add(new POPULATED_POINTSDataTable(ds.Tables["POPULATED_POINTS"]));
                }
                if ((ds.Tables["QUESTION_TYPES"] != null)) {
                    base.Tables.Add(new QUESTION_TYPESDataTable(ds.Tables["QUESTION_TYPES"]));
                }
                if ((ds.Tables["ANSWERS"] != null)) {
                    base.Tables.Add(new ANSWERSDataTable(ds.Tables["ANSWERS"]));
                }
                if ((ds.Tables["QUESTIONS"] != null)) {
                    base.Tables.Add(new QUESTIONSDataTable(ds.Tables["QUESTIONS"]));
                }
                if ((ds.Tables["PRIZES"] != null)) {
                    base.Tables.Add(new PRIZESDataTable(ds.Tables["PRIZES"]));
                }
                if ((ds.Tables["MEDIA_CLUSTER"] != null)) {
                    base.Tables.Add(new MEDIA_CLUSTERDataTable(ds.Tables["MEDIA_CLUSTER"]));
                }
                if ((ds.Tables["MEDIA"] != null)) {
                    base.Tables.Add(new MEDIADataTable(ds.Tables["MEDIA"]));
                }
                if ((ds.Tables["ADDRESS_BLOCKING"] != null)) {
                    base.Tables.Add(new ADDRESS_BLOCKINGDataTable(ds.Tables["ADDRESS_BLOCKING"]));
                }
                if ((ds.Tables["EMAIL_BLOCKING"] != null)) {
                    base.Tables.Add(new EMAIL_BLOCKINGDataTable(ds.Tables["EMAIL_BLOCKING"]));
                }
                if ((ds.Tables["PHONE_BLOCKING"] != null)) {
                    base.Tables.Add(new PHONE_BLOCKINGDataTable(ds.Tables["PHONE_BLOCKING"]));
                }
                if ((ds.Tables["MOBILE_PHONE_BLOCKING"] != null)) {
                    base.Tables.Add(new MOBILE_PHONE_BLOCKINGDataTable(ds.Tables["MOBILE_PHONE_BLOCKING"]));
                }
                if ((ds.Tables["USER_LIST"] != null)) {
                    base.Tables.Add(new USER_LISTDataTable(ds.Tables["USER_LIST"]));
                }
                if ((ds.Tables["COMPAIGN_MEDIA"] != null)) {
                    base.Tables.Add(new COMPAIGN_MEDIADataTable(ds.Tables["COMPAIGN_MEDIA"]));
                }
                if ((ds.Tables["USER_COMPAIGN"] != null)) {
                    base.Tables.Add(new USER_COMPAIGNDataTable(ds.Tables["USER_COMPAIGN"]));
                }
                if ((ds.Tables["COMPAIGN"] != null)) {
                    base.Tables.Add(new COMPAIGNDataTable(ds.Tables["COMPAIGN"]));
                }
                if ((ds.Tables["COMPAIGN_PRIZES"] != null)) {
                    base.Tables.Add(new COMPAIGN_PRIZESDataTable(ds.Tables["COMPAIGN_PRIZES"]));
                }
                if ((ds.Tables["QUESTION_FOR_COMPAIGN"] != null)) {
                    base.Tables.Add(new QUESTION_FOR_COMPAIGNDataTable(ds.Tables["QUESTION_FOR_COMPAIGN"]));
                }
                if ((ds.Tables["COMPAIGN_POPULATED_POINTS"] != null)) {
                    base.Tables.Add(new COMPAIGN_POPULATED_POINTSDataTable(ds.Tables["COMPAIGN_POPULATED_POINTS"]));
                }
                if ((ds.Tables["GLOBAL_BLOCKING"] != null)) {
                    base.Tables.Add(new GLOBAL_BLOCKINGDataTable(ds.Tables["GLOBAL_BLOCKING"]));
                }
                if ((ds.Tables["OBLAST_DW"] != null)) {
                    base.Tables.Add(new OBLAST_DWDataTable(ds.Tables["OBLAST_DW"]));
                }
                if ((ds.Tables["SETTLEMENT_TYPE_DW"] != null)) {
                    base.Tables.Add(new SETTLEMENT_TYPE_DWDataTable(ds.Tables["SETTLEMENT_TYPE_DW"]));
                }
                if ((ds.Tables["CONSUMER"] != null)) {
                    base.Tables.Add(new CONSUMERDataTable(ds.Tables["CONSUMER"]));
                }
                if ((ds.Tables["RESPONCE_CHANELS_DW"] != null)) {
                    base.Tables.Add(new RESPONCE_CHANELS_DWDataTable(ds.Tables["RESPONCE_CHANELS_DW"]));
                }
                if ((ds.Tables["MEDIA_CLUSTER_DW"] != null)) {
                    base.Tables.Add(new MEDIA_CLUSTER_DWDataTable(ds.Tables["MEDIA_CLUSTER_DW"]));
                }
                if ((ds.Tables["MEDIA_DW"] != null)) {
                    base.Tables.Add(new MEDIA_DWDataTable(ds.Tables["MEDIA_DW"]));
                }
                if ((ds.Tables["BRAND_FAMILY_DW"] != null)) {
                    base.Tables.Add(new BRAND_FAMILY_DWDataTable(ds.Tables["BRAND_FAMILY_DW"]));
                }
                if ((ds.Tables["BRANDS_DW"] != null)) {
                    base.Tables.Add(new BRANDS_DWDataTable(ds.Tables["BRANDS_DW"]));
                }
                if ((ds.Tables["BRAND_FAMILY_DW1"] != null)) {
                    base.Tables.Add(new BRAND_FAMILY_DW1DataTable(ds.Tables["BRAND_FAMILY_DW1"]));
                }
                if ((ds.Tables["BRANDS_DW1"] != null)) {
                    base.Tables.Add(new BRANDS_DW1DataTable(ds.Tables["BRANDS_DW1"]));
                }
                if ((ds.Tables["PRIZES_DW"] != null)) {
                    base.Tables.Add(new PRIZES_DWDataTable(ds.Tables["PRIZES_DW"]));
                }
                if ((ds.Tables["PRIZES_DW1"] != null)) {
                    base.Tables.Add(new PRIZES_DW1DataTable(ds.Tables["PRIZES_DW1"]));
                }
                if ((ds.Tables["CONSUMER_QUESTION_FOR_COMPAIGN"] != null)) {
                    base.Tables.Add(new CONSUMER_QUESTION_FOR_COMPAIGNDataTable(ds.Tables["CONSUMER_QUESTION_FOR_COMPAIGN"]));
                }
                if ((ds.Tables["ANSWERS_DW"] != null)) {
                    base.Tables.Add(new ANSWERS_DWDataTable(ds.Tables["ANSWERS_DW"]));
                }
                if ((ds.Tables["RESPONCE_CHANELS"] != null)) {
                    base.Tables.Add(new RESPONCE_CHANELSDataTable(ds.Tables["RESPONCE_CHANELS"]));
                }
                if ((ds.Tables["MICRODISTRICT"] != null)) {
                    base.Tables.Add(new MICRODISTRICTDataTable(ds.Tables["MICRODISTRICT"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public BRANDSDataTable BRANDS {
            get {
                return this.tableBRANDS;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public COMPANY_CODEDataTable COMPANY_CODE {
            get {
                return this.tableCOMPANY_CODE;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LENGTH_CATEGORYDataTable LENGTH_CATEGORY {
            get {
                return this.tableLENGTH_CATEGORY;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PACK_TYPEDataTable PACK_TYPE {
            get {
                return this.tablePACK_TYPE;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public BRAND_FAMILYDataTable BRAND_FAMILY {
            get {
                return this.tableBRAND_FAMILY;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SPECIAL_FLAVOR_CODEDataTable SPECIAL_FLAVOR_CODE {
            get {
                return this.tableSPECIAL_FLAVOR_CODE;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public THICKNESS_CATEGORYDataTable THICKNESS_CATEGORY {
            get {
                return this.tableTHICKNESS_CATEGORY;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SIGNATURE_TYPEDataTable SIGNATURE_TYPE {
            get {
                return this.tableSIGNATURE_TYPE;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PASSPORT_TYPEDataTable PASSPORT_TYPE {
            get {
                return this.tablePASSPORT_TYPE;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LOYALTYDataTable LOYALTY {
            get {
                return this.tableLOYALTY;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LANGUAGEDataTable LANGUAGE {
            get {
                return this.tableLANGUAGE;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OBLASTDataTable OBLAST {
            get {
                return this.tableOBLAST;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public REGIONDataTable REGION {
            get {
                return this.tableREGION;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SETTLEMENT_TYPEDataTable SETTLEMENT_TYPE {
            get {
                return this.tableSETTLEMENT_TYPE;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public STREETDataTable STREET {
            get {
                return this.tableSTREET;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public STREET_TYPEDataTable STREET_TYPE {
            get {
                return this.tableSTREET_TYPE;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public POPULATED_POINTSDataTable POPULATED_POINTS {
            get {
                return this.tablePOPULATED_POINTS;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public QUESTION_TYPESDataTable QUESTION_TYPES {
            get {
                return this.tableQUESTION_TYPES;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ANSWERSDataTable ANSWERS {
            get {
                return this.tableANSWERS;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public QUESTIONSDataTable QUESTIONS {
            get {
                return this.tableQUESTIONS;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PRIZESDataTable PRIZES {
            get {
                return this.tablePRIZES;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MEDIA_CLUSTERDataTable MEDIA_CLUSTER {
            get {
                return this.tableMEDIA_CLUSTER;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MEDIADataTable MEDIA {
            get {
                return this.tableMEDIA;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ADDRESS_BLOCKINGDataTable ADDRESS_BLOCKING {
            get {
                return this.tableADDRESS_BLOCKING;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EMAIL_BLOCKINGDataTable EMAIL_BLOCKING {
            get {
                return this.tableEMAIL_BLOCKING;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PHONE_BLOCKINGDataTable PHONE_BLOCKING {
            get {
                return this.tablePHONE_BLOCKING;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MOBILE_PHONE_BLOCKINGDataTable MOBILE_PHONE_BLOCKING {
            get {
                return this.tableMOBILE_PHONE_BLOCKING;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public USER_LISTDataTable USER_LIST {
            get {
                return this.tableUSER_LIST;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public COMPAIGN_MEDIADataTable COMPAIGN_MEDIA {
            get {
                return this.tableCOMPAIGN_MEDIA;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public USER_COMPAIGNDataTable USER_COMPAIGN {
            get {
                return this.tableUSER_COMPAIGN;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public COMPAIGNDataTable COMPAIGN {
            get {
                return this.tableCOMPAIGN;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public COMPAIGN_PRIZESDataTable COMPAIGN_PRIZES {
            get {
                return this.tableCOMPAIGN_PRIZES;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public QUESTION_FOR_COMPAIGNDataTable QUESTION_FOR_COMPAIGN {
            get {
                return this.tableQUESTION_FOR_COMPAIGN;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public COMPAIGN_POPULATED_POINTSDataTable COMPAIGN_POPULATED_POINTS {
            get {
                return this.tableCOMPAIGN_POPULATED_POINTS;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GLOBAL_BLOCKINGDataTable GLOBAL_BLOCKING {
            get {
                return this.tableGLOBAL_BLOCKING;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OBLAST_DWDataTable OBLAST_DW {
            get {
                return this.tableOBLAST_DW;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SETTLEMENT_TYPE_DWDataTable SETTLEMENT_TYPE_DW {
            get {
                return this.tableSETTLEMENT_TYPE_DW;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CONSUMERDataTable CONSUMER {
            get {
                return this.tableCONSUMER;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RESPONCE_CHANELS_DWDataTable RESPONCE_CHANELS_DW {
            get {
                return this.tableRESPONCE_CHANELS_DW;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MEDIA_CLUSTER_DWDataTable MEDIA_CLUSTER_DW {
            get {
                return this.tableMEDIA_CLUSTER_DW;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MEDIA_DWDataTable MEDIA_DW {
            get {
                return this.tableMEDIA_DW;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public BRAND_FAMILY_DWDataTable BRAND_FAMILY_DW {
            get {
                return this.tableBRAND_FAMILY_DW;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public BRANDS_DWDataTable BRANDS_DW {
            get {
                return this.tableBRANDS_DW;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public BRAND_FAMILY_DW1DataTable BRAND_FAMILY_DW1 {
            get {
                return this.tableBRAND_FAMILY_DW1;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public BRANDS_DW1DataTable BRANDS_DW1 {
            get {
                return this.tableBRANDS_DW1;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PRIZES_DWDataTable PRIZES_DW {
            get {
                return this.tablePRIZES_DW;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PRIZES_DW1DataTable PRIZES_DW1 {
            get {
                return this.tablePRIZES_DW1;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CONSUMER_QUESTION_FOR_COMPAIGNDataTable CONSUMER_QUESTION_FOR_COMPAIGN {
            get {
                return this.tableCONSUMER_QUESTION_FOR_COMPAIGN;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ANSWERS_DWDataTable ANSWERS_DW {
            get {
                return this.tableANSWERS_DW;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RESPONCE_CHANELSDataTable RESPONCE_CHANELS {
            get {
                return this.tableRESPONCE_CHANELS;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MICRODISTRICTDataTable MICRODISTRICT {
            get {
                return this.tableMICRODISTRICT;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            phmkDataSet cln = ((phmkDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["BRANDS"] != null)) {
                    base.Tables.Add(new BRANDSDataTable(ds.Tables["BRANDS"]));
                }
                if ((ds.Tables["COMPANY_CODE"] != null)) {
                    base.Tables.Add(new COMPANY_CODEDataTable(ds.Tables["COMPANY_CODE"]));
                }
                if ((ds.Tables["LENGTH_CATEGORY"] != null)) {
                    base.Tables.Add(new LENGTH_CATEGORYDataTable(ds.Tables["LENGTH_CATEGORY"]));
                }
                if ((ds.Tables["PACK_TYPE"] != null)) {
                    base.Tables.Add(new PACK_TYPEDataTable(ds.Tables["PACK_TYPE"]));
                }
                if ((ds.Tables["BRAND_FAMILY"] != null)) {
                    base.Tables.Add(new BRAND_FAMILYDataTable(ds.Tables["BRAND_FAMILY"]));
                }
                if ((ds.Tables["SPECIAL_FLAVOR_CODE"] != null)) {
                    base.Tables.Add(new SPECIAL_FLAVOR_CODEDataTable(ds.Tables["SPECIAL_FLAVOR_CODE"]));
                }
                if ((ds.Tables["THICKNESS_CATEGORY"] != null)) {
                    base.Tables.Add(new THICKNESS_CATEGORYDataTable(ds.Tables["THICKNESS_CATEGORY"]));
                }
                if ((ds.Tables["SIGNATURE_TYPE"] != null)) {
                    base.Tables.Add(new SIGNATURE_TYPEDataTable(ds.Tables["SIGNATURE_TYPE"]));
                }
                if ((ds.Tables["PASSPORT_TYPE"] != null)) {
                    base.Tables.Add(new PASSPORT_TYPEDataTable(ds.Tables["PASSPORT_TYPE"]));
                }
                if ((ds.Tables["LOYALTY"] != null)) {
                    base.Tables.Add(new LOYALTYDataTable(ds.Tables["LOYALTY"]));
                }
                if ((ds.Tables["LANGUAGE"] != null)) {
                    base.Tables.Add(new LANGUAGEDataTable(ds.Tables["LANGUAGE"]));
                }
                if ((ds.Tables["OBLAST"] != null)) {
                    base.Tables.Add(new OBLASTDataTable(ds.Tables["OBLAST"]));
                }
                if ((ds.Tables["REGION"] != null)) {
                    base.Tables.Add(new REGIONDataTable(ds.Tables["REGION"]));
                }
                if ((ds.Tables["SETTLEMENT_TYPE"] != null)) {
                    base.Tables.Add(new SETTLEMENT_TYPEDataTable(ds.Tables["SETTLEMENT_TYPE"]));
                }
                if ((ds.Tables["STREET"] != null)) {
                    base.Tables.Add(new STREETDataTable(ds.Tables["STREET"]));
                }
                if ((ds.Tables["STREET_TYPE"] != null)) {
                    base.Tables.Add(new STREET_TYPEDataTable(ds.Tables["STREET_TYPE"]));
                }
                if ((ds.Tables["POPULATED_POINTS"] != null)) {
                    base.Tables.Add(new POPULATED_POINTSDataTable(ds.Tables["POPULATED_POINTS"]));
                }
                if ((ds.Tables["QUESTION_TYPES"] != null)) {
                    base.Tables.Add(new QUESTION_TYPESDataTable(ds.Tables["QUESTION_TYPES"]));
                }
                if ((ds.Tables["ANSWERS"] != null)) {
                    base.Tables.Add(new ANSWERSDataTable(ds.Tables["ANSWERS"]));
                }
                if ((ds.Tables["QUESTIONS"] != null)) {
                    base.Tables.Add(new QUESTIONSDataTable(ds.Tables["QUESTIONS"]));
                }
                if ((ds.Tables["PRIZES"] != null)) {
                    base.Tables.Add(new PRIZESDataTable(ds.Tables["PRIZES"]));
                }
                if ((ds.Tables["MEDIA_CLUSTER"] != null)) {
                    base.Tables.Add(new MEDIA_CLUSTERDataTable(ds.Tables["MEDIA_CLUSTER"]));
                }
                if ((ds.Tables["MEDIA"] != null)) {
                    base.Tables.Add(new MEDIADataTable(ds.Tables["MEDIA"]));
                }
                if ((ds.Tables["ADDRESS_BLOCKING"] != null)) {
                    base.Tables.Add(new ADDRESS_BLOCKINGDataTable(ds.Tables["ADDRESS_BLOCKING"]));
                }
                if ((ds.Tables["EMAIL_BLOCKING"] != null)) {
                    base.Tables.Add(new EMAIL_BLOCKINGDataTable(ds.Tables["EMAIL_BLOCKING"]));
                }
                if ((ds.Tables["PHONE_BLOCKING"] != null)) {
                    base.Tables.Add(new PHONE_BLOCKINGDataTable(ds.Tables["PHONE_BLOCKING"]));
                }
                if ((ds.Tables["MOBILE_PHONE_BLOCKING"] != null)) {
                    base.Tables.Add(new MOBILE_PHONE_BLOCKINGDataTable(ds.Tables["MOBILE_PHONE_BLOCKING"]));
                }
                if ((ds.Tables["USER_LIST"] != null)) {
                    base.Tables.Add(new USER_LISTDataTable(ds.Tables["USER_LIST"]));
                }
                if ((ds.Tables["COMPAIGN_MEDIA"] != null)) {
                    base.Tables.Add(new COMPAIGN_MEDIADataTable(ds.Tables["COMPAIGN_MEDIA"]));
                }
                if ((ds.Tables["USER_COMPAIGN"] != null)) {
                    base.Tables.Add(new USER_COMPAIGNDataTable(ds.Tables["USER_COMPAIGN"]));
                }
                if ((ds.Tables["COMPAIGN"] != null)) {
                    base.Tables.Add(new COMPAIGNDataTable(ds.Tables["COMPAIGN"]));
                }
                if ((ds.Tables["COMPAIGN_PRIZES"] != null)) {
                    base.Tables.Add(new COMPAIGN_PRIZESDataTable(ds.Tables["COMPAIGN_PRIZES"]));
                }
                if ((ds.Tables["QUESTION_FOR_COMPAIGN"] != null)) {
                    base.Tables.Add(new QUESTION_FOR_COMPAIGNDataTable(ds.Tables["QUESTION_FOR_COMPAIGN"]));
                }
                if ((ds.Tables["COMPAIGN_POPULATED_POINTS"] != null)) {
                    base.Tables.Add(new COMPAIGN_POPULATED_POINTSDataTable(ds.Tables["COMPAIGN_POPULATED_POINTS"]));
                }
                if ((ds.Tables["GLOBAL_BLOCKING"] != null)) {
                    base.Tables.Add(new GLOBAL_BLOCKINGDataTable(ds.Tables["GLOBAL_BLOCKING"]));
                }
                if ((ds.Tables["OBLAST_DW"] != null)) {
                    base.Tables.Add(new OBLAST_DWDataTable(ds.Tables["OBLAST_DW"]));
                }
                if ((ds.Tables["SETTLEMENT_TYPE_DW"] != null)) {
                    base.Tables.Add(new SETTLEMENT_TYPE_DWDataTable(ds.Tables["SETTLEMENT_TYPE_DW"]));
                }
                if ((ds.Tables["CONSUMER"] != null)) {
                    base.Tables.Add(new CONSUMERDataTable(ds.Tables["CONSUMER"]));
                }
                if ((ds.Tables["RESPONCE_CHANELS_DW"] != null)) {
                    base.Tables.Add(new RESPONCE_CHANELS_DWDataTable(ds.Tables["RESPONCE_CHANELS_DW"]));
                }
                if ((ds.Tables["MEDIA_CLUSTER_DW"] != null)) {
                    base.Tables.Add(new MEDIA_CLUSTER_DWDataTable(ds.Tables["MEDIA_CLUSTER_DW"]));
                }
                if ((ds.Tables["MEDIA_DW"] != null)) {
                    base.Tables.Add(new MEDIA_DWDataTable(ds.Tables["MEDIA_DW"]));
                }
                if ((ds.Tables["BRAND_FAMILY_DW"] != null)) {
                    base.Tables.Add(new BRAND_FAMILY_DWDataTable(ds.Tables["BRAND_FAMILY_DW"]));
                }
                if ((ds.Tables["BRANDS_DW"] != null)) {
                    base.Tables.Add(new BRANDS_DWDataTable(ds.Tables["BRANDS_DW"]));
                }
                if ((ds.Tables["BRAND_FAMILY_DW1"] != null)) {
                    base.Tables.Add(new BRAND_FAMILY_DW1DataTable(ds.Tables["BRAND_FAMILY_DW1"]));
                }
                if ((ds.Tables["BRANDS_DW1"] != null)) {
                    base.Tables.Add(new BRANDS_DW1DataTable(ds.Tables["BRANDS_DW1"]));
                }
                if ((ds.Tables["PRIZES_DW"] != null)) {
                    base.Tables.Add(new PRIZES_DWDataTable(ds.Tables["PRIZES_DW"]));
                }
                if ((ds.Tables["PRIZES_DW1"] != null)) {
                    base.Tables.Add(new PRIZES_DW1DataTable(ds.Tables["PRIZES_DW1"]));
                }
                if ((ds.Tables["CONSUMER_QUESTION_FOR_COMPAIGN"] != null)) {
                    base.Tables.Add(new CONSUMER_QUESTION_FOR_COMPAIGNDataTable(ds.Tables["CONSUMER_QUESTION_FOR_COMPAIGN"]));
                }
                if ((ds.Tables["ANSWERS_DW"] != null)) {
                    base.Tables.Add(new ANSWERS_DWDataTable(ds.Tables["ANSWERS_DW"]));
                }
                if ((ds.Tables["RESPONCE_CHANELS"] != null)) {
                    base.Tables.Add(new RESPONCE_CHANELSDataTable(ds.Tables["RESPONCE_CHANELS"]));
                }
                if ((ds.Tables["MICRODISTRICT"] != null)) {
                    base.Tables.Add(new MICRODISTRICTDataTable(ds.Tables["MICRODISTRICT"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableBRANDS = ((BRANDSDataTable)(base.Tables["BRANDS"]));
            if ((initTable == true)) {
                if ((this.tableBRANDS != null)) {
                    this.tableBRANDS.InitVars();
                }
            }
            this.tableCOMPANY_CODE = ((COMPANY_CODEDataTable)(base.Tables["COMPANY_CODE"]));
            if ((initTable == true)) {
                if ((this.tableCOMPANY_CODE != null)) {
                    this.tableCOMPANY_CODE.InitVars();
                }
            }
            this.tableLENGTH_CATEGORY = ((LENGTH_CATEGORYDataTable)(base.Tables["LENGTH_CATEGORY"]));
            if ((initTable == true)) {
                if ((this.tableLENGTH_CATEGORY != null)) {
                    this.tableLENGTH_CATEGORY.InitVars();
                }
            }
            this.tablePACK_TYPE = ((PACK_TYPEDataTable)(base.Tables["PACK_TYPE"]));
            if ((initTable == true)) {
                if ((this.tablePACK_TYPE != null)) {
                    this.tablePACK_TYPE.InitVars();
                }
            }
            this.tableBRAND_FAMILY = ((BRAND_FAMILYDataTable)(base.Tables["BRAND_FAMILY"]));
            if ((initTable == true)) {
                if ((this.tableBRAND_FAMILY != null)) {
                    this.tableBRAND_FAMILY.InitVars();
                }
            }
            this.tableSPECIAL_FLAVOR_CODE = ((SPECIAL_FLAVOR_CODEDataTable)(base.Tables["SPECIAL_FLAVOR_CODE"]));
            if ((initTable == true)) {
                if ((this.tableSPECIAL_FLAVOR_CODE != null)) {
                    this.tableSPECIAL_FLAVOR_CODE.InitVars();
                }
            }
            this.tableTHICKNESS_CATEGORY = ((THICKNESS_CATEGORYDataTable)(base.Tables["THICKNESS_CATEGORY"]));
            if ((initTable == true)) {
                if ((this.tableTHICKNESS_CATEGORY != null)) {
                    this.tableTHICKNESS_CATEGORY.InitVars();
                }
            }
            this.tableSIGNATURE_TYPE = ((SIGNATURE_TYPEDataTable)(base.Tables["SIGNATURE_TYPE"]));
            if ((initTable == true)) {
                if ((this.tableSIGNATURE_TYPE != null)) {
                    this.tableSIGNATURE_TYPE.InitVars();
                }
            }
            this.tablePASSPORT_TYPE = ((PASSPORT_TYPEDataTable)(base.Tables["PASSPORT_TYPE"]));
            if ((initTable == true)) {
                if ((this.tablePASSPORT_TYPE != null)) {
                    this.tablePASSPORT_TYPE.InitVars();
                }
            }
            this.tableLOYALTY = ((LOYALTYDataTable)(base.Tables["LOYALTY"]));
            if ((initTable == true)) {
                if ((this.tableLOYALTY != null)) {
                    this.tableLOYALTY.InitVars();
                }
            }
            this.tableLANGUAGE = ((LANGUAGEDataTable)(base.Tables["LANGUAGE"]));
            if ((initTable == true)) {
                if ((this.tableLANGUAGE != null)) {
                    this.tableLANGUAGE.InitVars();
                }
            }
            this.tableOBLAST = ((OBLASTDataTable)(base.Tables["OBLAST"]));
            if ((initTable == true)) {
                if ((this.tableOBLAST != null)) {
                    this.tableOBLAST.InitVars();
                }
            }
            this.tableREGION = ((REGIONDataTable)(base.Tables["REGION"]));
            if ((initTable == true)) {
                if ((this.tableREGION != null)) {
                    this.tableREGION.InitVars();
                }
            }
            this.tableSETTLEMENT_TYPE = ((SETTLEMENT_TYPEDataTable)(base.Tables["SETTLEMENT_TYPE"]));
            if ((initTable == true)) {
                if ((this.tableSETTLEMENT_TYPE != null)) {
                    this.tableSETTLEMENT_TYPE.InitVars();
                }
            }
            this.tableSTREET = ((STREETDataTable)(base.Tables["STREET"]));
            if ((initTable == true)) {
                if ((this.tableSTREET != null)) {
                    this.tableSTREET.InitVars();
                }
            }
            this.tableSTREET_TYPE = ((STREET_TYPEDataTable)(base.Tables["STREET_TYPE"]));
            if ((initTable == true)) {
                if ((this.tableSTREET_TYPE != null)) {
                    this.tableSTREET_TYPE.InitVars();
                }
            }
            this.tablePOPULATED_POINTS = ((POPULATED_POINTSDataTable)(base.Tables["POPULATED_POINTS"]));
            if ((initTable == true)) {
                if ((this.tablePOPULATED_POINTS != null)) {
                    this.tablePOPULATED_POINTS.InitVars();
                }
            }
            this.tableQUESTION_TYPES = ((QUESTION_TYPESDataTable)(base.Tables["QUESTION_TYPES"]));
            if ((initTable == true)) {
                if ((this.tableQUESTION_TYPES != null)) {
                    this.tableQUESTION_TYPES.InitVars();
                }
            }
            this.tableANSWERS = ((ANSWERSDataTable)(base.Tables["ANSWERS"]));
            if ((initTable == true)) {
                if ((this.tableANSWERS != null)) {
                    this.tableANSWERS.InitVars();
                }
            }
            this.tableQUESTIONS = ((QUESTIONSDataTable)(base.Tables["QUESTIONS"]));
            if ((initTable == true)) {
                if ((this.tableQUESTIONS != null)) {
                    this.tableQUESTIONS.InitVars();
                }
            }
            this.tablePRIZES = ((PRIZESDataTable)(base.Tables["PRIZES"]));
            if ((initTable == true)) {
                if ((this.tablePRIZES != null)) {
                    this.tablePRIZES.InitVars();
                }
            }
            this.tableMEDIA_CLUSTER = ((MEDIA_CLUSTERDataTable)(base.Tables["MEDIA_CLUSTER"]));
            if ((initTable == true)) {
                if ((this.tableMEDIA_CLUSTER != null)) {
                    this.tableMEDIA_CLUSTER.InitVars();
                }
            }
            this.tableMEDIA = ((MEDIADataTable)(base.Tables["MEDIA"]));
            if ((initTable == true)) {
                if ((this.tableMEDIA != null)) {
                    this.tableMEDIA.InitVars();
                }
            }
            this.tableADDRESS_BLOCKING = ((ADDRESS_BLOCKINGDataTable)(base.Tables["ADDRESS_BLOCKING"]));
            if ((initTable == true)) {
                if ((this.tableADDRESS_BLOCKING != null)) {
                    this.tableADDRESS_BLOCKING.InitVars();
                }
            }
            this.tableEMAIL_BLOCKING = ((EMAIL_BLOCKINGDataTable)(base.Tables["EMAIL_BLOCKING"]));
            if ((initTable == true)) {
                if ((this.tableEMAIL_BLOCKING != null)) {
                    this.tableEMAIL_BLOCKING.InitVars();
                }
            }
            this.tablePHONE_BLOCKING = ((PHONE_BLOCKINGDataTable)(base.Tables["PHONE_BLOCKING"]));
            if ((initTable == true)) {
                if ((this.tablePHONE_BLOCKING != null)) {
                    this.tablePHONE_BLOCKING.InitVars();
                }
            }
            this.tableMOBILE_PHONE_BLOCKING = ((MOBILE_PHONE_BLOCKINGDataTable)(base.Tables["MOBILE_PHONE_BLOCKING"]));
            if ((initTable == true)) {
                if ((this.tableMOBILE_PHONE_BLOCKING != null)) {
                    this.tableMOBILE_PHONE_BLOCKING.InitVars();
                }
            }
            this.tableUSER_LIST = ((USER_LISTDataTable)(base.Tables["USER_LIST"]));
            if ((initTable == true)) {
                if ((this.tableUSER_LIST != null)) {
                    this.tableUSER_LIST.InitVars();
                }
            }
            this.tableCOMPAIGN_MEDIA = ((COMPAIGN_MEDIADataTable)(base.Tables["COMPAIGN_MEDIA"]));
            if ((initTable == true)) {
                if ((this.tableCOMPAIGN_MEDIA != null)) {
                    this.tableCOMPAIGN_MEDIA.InitVars();
                }
            }
            this.tableUSER_COMPAIGN = ((USER_COMPAIGNDataTable)(base.Tables["USER_COMPAIGN"]));
            if ((initTable == true)) {
                if ((this.tableUSER_COMPAIGN != null)) {
                    this.tableUSER_COMPAIGN.InitVars();
                }
            }
            this.tableCOMPAIGN = ((COMPAIGNDataTable)(base.Tables["COMPAIGN"]));
            if ((initTable == true)) {
                if ((this.tableCOMPAIGN != null)) {
                    this.tableCOMPAIGN.InitVars();
                }
            }
            this.tableCOMPAIGN_PRIZES = ((COMPAIGN_PRIZESDataTable)(base.Tables["COMPAIGN_PRIZES"]));
            if ((initTable == true)) {
                if ((this.tableCOMPAIGN_PRIZES != null)) {
                    this.tableCOMPAIGN_PRIZES.InitVars();
                }
            }
            this.tableQUESTION_FOR_COMPAIGN = ((QUESTION_FOR_COMPAIGNDataTable)(base.Tables["QUESTION_FOR_COMPAIGN"]));
            if ((initTable == true)) {
                if ((this.tableQUESTION_FOR_COMPAIGN != null)) {
                    this.tableQUESTION_FOR_COMPAIGN.InitVars();
                }
            }
            this.tableCOMPAIGN_POPULATED_POINTS = ((COMPAIGN_POPULATED_POINTSDataTable)(base.Tables["COMPAIGN_POPULATED_POINTS"]));
            if ((initTable == true)) {
                if ((this.tableCOMPAIGN_POPULATED_POINTS != null)) {
                    this.tableCOMPAIGN_POPULATED_POINTS.InitVars();
                }
            }
            this.tableGLOBAL_BLOCKING = ((GLOBAL_BLOCKINGDataTable)(base.Tables["GLOBAL_BLOCKING"]));
            if ((initTable == true)) {
                if ((this.tableGLOBAL_BLOCKING != null)) {
                    this.tableGLOBAL_BLOCKING.InitVars();
                }
            }
            this.tableOBLAST_DW = ((OBLAST_DWDataTable)(base.Tables["OBLAST_DW"]));
            if ((initTable == true)) {
                if ((this.tableOBLAST_DW != null)) {
                    this.tableOBLAST_DW.InitVars();
                }
            }
            this.tableSETTLEMENT_TYPE_DW = ((SETTLEMENT_TYPE_DWDataTable)(base.Tables["SETTLEMENT_TYPE_DW"]));
            if ((initTable == true)) {
                if ((this.tableSETTLEMENT_TYPE_DW != null)) {
                    this.tableSETTLEMENT_TYPE_DW.InitVars();
                }
            }
            this.tableCONSUMER = ((CONSUMERDataTable)(base.Tables["CONSUMER"]));
            if ((initTable == true)) {
                if ((this.tableCONSUMER != null)) {
                    this.tableCONSUMER.InitVars();
                }
            }
            this.tableRESPONCE_CHANELS_DW = ((RESPONCE_CHANELS_DWDataTable)(base.Tables["RESPONCE_CHANELS_DW"]));
            if ((initTable == true)) {
                if ((this.tableRESPONCE_CHANELS_DW != null)) {
                    this.tableRESPONCE_CHANELS_DW.InitVars();
                }
            }
            this.tableMEDIA_CLUSTER_DW = ((MEDIA_CLUSTER_DWDataTable)(base.Tables["MEDIA_CLUSTER_DW"]));
            if ((initTable == true)) {
                if ((this.tableMEDIA_CLUSTER_DW != null)) {
                    this.tableMEDIA_CLUSTER_DW.InitVars();
                }
            }
            this.tableMEDIA_DW = ((MEDIA_DWDataTable)(base.Tables["MEDIA_DW"]));
            if ((initTable == true)) {
                if ((this.tableMEDIA_DW != null)) {
                    this.tableMEDIA_DW.InitVars();
                }
            }
            this.tableBRAND_FAMILY_DW = ((BRAND_FAMILY_DWDataTable)(base.Tables["BRAND_FAMILY_DW"]));
            if ((initTable == true)) {
                if ((this.tableBRAND_FAMILY_DW != null)) {
                    this.tableBRAND_FAMILY_DW.InitVars();
                }
            }
            this.tableBRANDS_DW = ((BRANDS_DWDataTable)(base.Tables["BRANDS_DW"]));
            if ((initTable == true)) {
                if ((this.tableBRANDS_DW != null)) {
                    this.tableBRANDS_DW.InitVars();
                }
            }
            this.tableBRAND_FAMILY_DW1 = ((BRAND_FAMILY_DW1DataTable)(base.Tables["BRAND_FAMILY_DW1"]));
            if ((initTable == true)) {
                if ((this.tableBRAND_FAMILY_DW1 != null)) {
                    this.tableBRAND_FAMILY_DW1.InitVars();
                }
            }
            this.tableBRANDS_DW1 = ((BRANDS_DW1DataTable)(base.Tables["BRANDS_DW1"]));
            if ((initTable == true)) {
                if ((this.tableBRANDS_DW1 != null)) {
                    this.tableBRANDS_DW1.InitVars();
                }
            }
            this.tablePRIZES_DW = ((PRIZES_DWDataTable)(base.Tables["PRIZES_DW"]));
            if ((initTable == true)) {
                if ((this.tablePRIZES_DW != null)) {
                    this.tablePRIZES_DW.InitVars();
                }
            }
            this.tablePRIZES_DW1 = ((PRIZES_DW1DataTable)(base.Tables["PRIZES_DW1"]));
            if ((initTable == true)) {
                if ((this.tablePRIZES_DW1 != null)) {
                    this.tablePRIZES_DW1.InitVars();
                }
            }
            this.tableCONSUMER_QUESTION_FOR_COMPAIGN = ((CONSUMER_QUESTION_FOR_COMPAIGNDataTable)(base.Tables["CONSUMER_QUESTION_FOR_COMPAIGN"]));
            if ((initTable == true)) {
                if ((this.tableCONSUMER_QUESTION_FOR_COMPAIGN != null)) {
                    this.tableCONSUMER_QUESTION_FOR_COMPAIGN.InitVars();
                }
            }
            this.tableANSWERS_DW = ((ANSWERS_DWDataTable)(base.Tables["ANSWERS_DW"]));
            if ((initTable == true)) {
                if ((this.tableANSWERS_DW != null)) {
                    this.tableANSWERS_DW.InitVars();
                }
            }
            this.tableRESPONCE_CHANELS = ((RESPONCE_CHANELSDataTable)(base.Tables["RESPONCE_CHANELS"]));
            if ((initTable == true)) {
                if ((this.tableRESPONCE_CHANELS != null)) {
                    this.tableRESPONCE_CHANELS.InitVars();
                }
            }
            this.tableMICRODISTRICT = ((MICRODISTRICTDataTable)(base.Tables["MICRODISTRICT"]));
            if ((initTable == true)) {
                if ((this.tableMICRODISTRICT != null)) {
                    this.tableMICRODISTRICT.InitVars();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "phmkDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/phmkDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableBRANDS = new BRANDSDataTable();
            base.Tables.Add(this.tableBRANDS);
            this.tableCOMPANY_CODE = new COMPANY_CODEDataTable();
            base.Tables.Add(this.tableCOMPANY_CODE);
            this.tableLENGTH_CATEGORY = new LENGTH_CATEGORYDataTable();
            base.Tables.Add(this.tableLENGTH_CATEGORY);
            this.tablePACK_TYPE = new PACK_TYPEDataTable();
            base.Tables.Add(this.tablePACK_TYPE);
            this.tableBRAND_FAMILY = new BRAND_FAMILYDataTable();
            base.Tables.Add(this.tableBRAND_FAMILY);
            this.tableSPECIAL_FLAVOR_CODE = new SPECIAL_FLAVOR_CODEDataTable();
            base.Tables.Add(this.tableSPECIAL_FLAVOR_CODE);
            this.tableTHICKNESS_CATEGORY = new THICKNESS_CATEGORYDataTable();
            base.Tables.Add(this.tableTHICKNESS_CATEGORY);
            this.tableSIGNATURE_TYPE = new SIGNATURE_TYPEDataTable();
            base.Tables.Add(this.tableSIGNATURE_TYPE);
            this.tablePASSPORT_TYPE = new PASSPORT_TYPEDataTable();
            base.Tables.Add(this.tablePASSPORT_TYPE);
            this.tableLOYALTY = new LOYALTYDataTable();
            base.Tables.Add(this.tableLOYALTY);
            this.tableLANGUAGE = new LANGUAGEDataTable();
            base.Tables.Add(this.tableLANGUAGE);
            this.tableOBLAST = new OBLASTDataTable();
            base.Tables.Add(this.tableOBLAST);
            this.tableREGION = new REGIONDataTable();
            base.Tables.Add(this.tableREGION);
            this.tableSETTLEMENT_TYPE = new SETTLEMENT_TYPEDataTable();
            base.Tables.Add(this.tableSETTLEMENT_TYPE);
            this.tableSTREET = new STREETDataTable();
            base.Tables.Add(this.tableSTREET);
            this.tableSTREET_TYPE = new STREET_TYPEDataTable();
            base.Tables.Add(this.tableSTREET_TYPE);
            this.tablePOPULATED_POINTS = new POPULATED_POINTSDataTable();
            base.Tables.Add(this.tablePOPULATED_POINTS);
            this.tableQUESTION_TYPES = new QUESTION_TYPESDataTable();
            base.Tables.Add(this.tableQUESTION_TYPES);
            this.tableANSWERS = new ANSWERSDataTable();
            base.Tables.Add(this.tableANSWERS);
            this.tableQUESTIONS = new QUESTIONSDataTable();
            base.Tables.Add(this.tableQUESTIONS);
            this.tablePRIZES = new PRIZESDataTable();
            base.Tables.Add(this.tablePRIZES);
            this.tableMEDIA_CLUSTER = new MEDIA_CLUSTERDataTable();
            base.Tables.Add(this.tableMEDIA_CLUSTER);
            this.tableMEDIA = new MEDIADataTable();
            base.Tables.Add(this.tableMEDIA);
            this.tableADDRESS_BLOCKING = new ADDRESS_BLOCKINGDataTable();
            base.Tables.Add(this.tableADDRESS_BLOCKING);
            this.tableEMAIL_BLOCKING = new EMAIL_BLOCKINGDataTable();
            base.Tables.Add(this.tableEMAIL_BLOCKING);
            this.tablePHONE_BLOCKING = new PHONE_BLOCKINGDataTable();
            base.Tables.Add(this.tablePHONE_BLOCKING);
            this.tableMOBILE_PHONE_BLOCKING = new MOBILE_PHONE_BLOCKINGDataTable();
            base.Tables.Add(this.tableMOBILE_PHONE_BLOCKING);
            this.tableUSER_LIST = new USER_LISTDataTable();
            base.Tables.Add(this.tableUSER_LIST);
            this.tableCOMPAIGN_MEDIA = new COMPAIGN_MEDIADataTable();
            base.Tables.Add(this.tableCOMPAIGN_MEDIA);
            this.tableUSER_COMPAIGN = new USER_COMPAIGNDataTable();
            base.Tables.Add(this.tableUSER_COMPAIGN);
            this.tableCOMPAIGN = new COMPAIGNDataTable();
            base.Tables.Add(this.tableCOMPAIGN);
            this.tableCOMPAIGN_PRIZES = new COMPAIGN_PRIZESDataTable();
            base.Tables.Add(this.tableCOMPAIGN_PRIZES);
            this.tableQUESTION_FOR_COMPAIGN = new QUESTION_FOR_COMPAIGNDataTable();
            base.Tables.Add(this.tableQUESTION_FOR_COMPAIGN);
            this.tableCOMPAIGN_POPULATED_POINTS = new COMPAIGN_POPULATED_POINTSDataTable();
            base.Tables.Add(this.tableCOMPAIGN_POPULATED_POINTS);
            this.tableGLOBAL_BLOCKING = new GLOBAL_BLOCKINGDataTable();
            base.Tables.Add(this.tableGLOBAL_BLOCKING);
            this.tableOBLAST_DW = new OBLAST_DWDataTable();
            base.Tables.Add(this.tableOBLAST_DW);
            this.tableSETTLEMENT_TYPE_DW = new SETTLEMENT_TYPE_DWDataTable();
            base.Tables.Add(this.tableSETTLEMENT_TYPE_DW);
            this.tableCONSUMER = new CONSUMERDataTable();
            base.Tables.Add(this.tableCONSUMER);
            this.tableRESPONCE_CHANELS_DW = new RESPONCE_CHANELS_DWDataTable();
            base.Tables.Add(this.tableRESPONCE_CHANELS_DW);
            this.tableMEDIA_CLUSTER_DW = new MEDIA_CLUSTER_DWDataTable();
            base.Tables.Add(this.tableMEDIA_CLUSTER_DW);
            this.tableMEDIA_DW = new MEDIA_DWDataTable();
            base.Tables.Add(this.tableMEDIA_DW);
            this.tableBRAND_FAMILY_DW = new BRAND_FAMILY_DWDataTable();
            base.Tables.Add(this.tableBRAND_FAMILY_DW);
            this.tableBRANDS_DW = new BRANDS_DWDataTable();
            base.Tables.Add(this.tableBRANDS_DW);
            this.tableBRAND_FAMILY_DW1 = new BRAND_FAMILY_DW1DataTable();
            base.Tables.Add(this.tableBRAND_FAMILY_DW1);
            this.tableBRANDS_DW1 = new BRANDS_DW1DataTable();
            base.Tables.Add(this.tableBRANDS_DW1);
            this.tablePRIZES_DW = new PRIZES_DWDataTable();
            base.Tables.Add(this.tablePRIZES_DW);
            this.tablePRIZES_DW1 = new PRIZES_DW1DataTable();
            base.Tables.Add(this.tablePRIZES_DW1);
            this.tableCONSUMER_QUESTION_FOR_COMPAIGN = new CONSUMER_QUESTION_FOR_COMPAIGNDataTable();
            base.Tables.Add(this.tableCONSUMER_QUESTION_FOR_COMPAIGN);
            this.tableANSWERS_DW = new ANSWERS_DWDataTable();
            base.Tables.Add(this.tableANSWERS_DW);
            this.tableRESPONCE_CHANELS = new RESPONCE_CHANELSDataTable();
            base.Tables.Add(this.tableRESPONCE_CHANELS);
            this.tableMICRODISTRICT = new MICRODISTRICTDataTable();
            base.Tables.Add(this.tableMICRODISTRICT);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeBRANDS() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCOMPANY_CODE() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLENGTH_CATEGORY() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePACK_TYPE() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeBRAND_FAMILY() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSPECIAL_FLAVOR_CODE() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTHICKNESS_CATEGORY() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSIGNATURE_TYPE() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePASSPORT_TYPE() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLOYALTY() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLANGUAGE() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeOBLAST() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeREGION() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSETTLEMENT_TYPE() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSTREET() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSTREET_TYPE() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePOPULATED_POINTS() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeQUESTION_TYPES() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeANSWERS() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeQUESTIONS() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePRIZES() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMEDIA_CLUSTER() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMEDIA() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeADDRESS_BLOCKING() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeEMAIL_BLOCKING() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePHONE_BLOCKING() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMOBILE_PHONE_BLOCKING() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeUSER_LIST() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCOMPAIGN_MEDIA() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeUSER_COMPAIGN() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCOMPAIGN() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCOMPAIGN_PRIZES() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeQUESTION_FOR_COMPAIGN() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCOMPAIGN_POPULATED_POINTS() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGLOBAL_BLOCKING() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeOBLAST_DW() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSETTLEMENT_TYPE_DW() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCONSUMER() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRESPONCE_CHANELS_DW() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMEDIA_CLUSTER_DW() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMEDIA_DW() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeBRAND_FAMILY_DW() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeBRANDS_DW() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeBRAND_FAMILY_DW1() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeBRANDS_DW1() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePRIZES_DW() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePRIZES_DW1() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCONSUMER_QUESTION_FOR_COMPAIGN() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeANSWERS_DW() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRESPONCE_CHANELS() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMICRODISTRICT() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            phmkDataSet ds = new phmkDataSet();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void BRANDSRowChangeEventHandler(object sender, BRANDSRowChangeEvent e);
        
        public delegate void COMPANY_CODERowChangeEventHandler(object sender, COMPANY_CODERowChangeEvent e);
        
        public delegate void LENGTH_CATEGORYRowChangeEventHandler(object sender, LENGTH_CATEGORYRowChangeEvent e);
        
        public delegate void PACK_TYPERowChangeEventHandler(object sender, PACK_TYPERowChangeEvent e);
        
        public delegate void BRAND_FAMILYRowChangeEventHandler(object sender, BRAND_FAMILYRowChangeEvent e);
        
        public delegate void SPECIAL_FLAVOR_CODERowChangeEventHandler(object sender, SPECIAL_FLAVOR_CODERowChangeEvent e);
        
        public delegate void THICKNESS_CATEGORYRowChangeEventHandler(object sender, THICKNESS_CATEGORYRowChangeEvent e);
        
        public delegate void SIGNATURE_TYPERowChangeEventHandler(object sender, SIGNATURE_TYPERowChangeEvent e);
        
        public delegate void PASSPORT_TYPERowChangeEventHandler(object sender, PASSPORT_TYPERowChangeEvent e);
        
        public delegate void LOYALTYRowChangeEventHandler(object sender, LOYALTYRowChangeEvent e);
        
        public delegate void LANGUAGERowChangeEventHandler(object sender, LANGUAGERowChangeEvent e);
        
        public delegate void OBLASTRowChangeEventHandler(object sender, OBLASTRowChangeEvent e);
        
        public delegate void REGIONRowChangeEventHandler(object sender, REGIONRowChangeEvent e);
        
        public delegate void SETTLEMENT_TYPERowChangeEventHandler(object sender, SETTLEMENT_TYPERowChangeEvent e);
        
        public delegate void STREETRowChangeEventHandler(object sender, STREETRowChangeEvent e);
        
        public delegate void STREET_TYPERowChangeEventHandler(object sender, STREET_TYPERowChangeEvent e);
        
        public delegate void POPULATED_POINTSRowChangeEventHandler(object sender, POPULATED_POINTSRowChangeEvent e);
        
        public delegate void QUESTION_TYPESRowChangeEventHandler(object sender, QUESTION_TYPESRowChangeEvent e);
        
        public delegate void ANSWERSRowChangeEventHandler(object sender, ANSWERSRowChangeEvent e);
        
        public delegate void QUESTIONSRowChangeEventHandler(object sender, QUESTIONSRowChangeEvent e);
        
        public delegate void PRIZESRowChangeEventHandler(object sender, PRIZESRowChangeEvent e);
        
        public delegate void MEDIA_CLUSTERRowChangeEventHandler(object sender, MEDIA_CLUSTERRowChangeEvent e);
        
        public delegate void MEDIARowChangeEventHandler(object sender, MEDIARowChangeEvent e);
        
        public delegate void ADDRESS_BLOCKINGRowChangeEventHandler(object sender, ADDRESS_BLOCKINGRowChangeEvent e);
        
        public delegate void EMAIL_BLOCKINGRowChangeEventHandler(object sender, EMAIL_BLOCKINGRowChangeEvent e);
        
        public delegate void PHONE_BLOCKINGRowChangeEventHandler(object sender, PHONE_BLOCKINGRowChangeEvent e);
        
        public delegate void MOBILE_PHONE_BLOCKINGRowChangeEventHandler(object sender, MOBILE_PHONE_BLOCKINGRowChangeEvent e);
        
        public delegate void USER_LISTRowChangeEventHandler(object sender, USER_LISTRowChangeEvent e);
        
        public delegate void COMPAIGN_MEDIARowChangeEventHandler(object sender, COMPAIGN_MEDIARowChangeEvent e);
        
        public delegate void USER_COMPAIGNRowChangeEventHandler(object sender, USER_COMPAIGNRowChangeEvent e);
        
        public delegate void COMPAIGNRowChangeEventHandler(object sender, COMPAIGNRowChangeEvent e);
        
        public delegate void COMPAIGN_PRIZESRowChangeEventHandler(object sender, COMPAIGN_PRIZESRowChangeEvent e);
        
        public delegate void QUESTION_FOR_COMPAIGNRowChangeEventHandler(object sender, QUESTION_FOR_COMPAIGNRowChangeEvent e);
        
        public delegate void COMPAIGN_POPULATED_POINTSRowChangeEventHandler(object sender, COMPAIGN_POPULATED_POINTSRowChangeEvent e);
        
        public delegate void GLOBAL_BLOCKINGRowChangeEventHandler(object sender, GLOBAL_BLOCKINGRowChangeEvent e);
        
        public delegate void OBLAST_DWRowChangeEventHandler(object sender, OBLAST_DWRowChangeEvent e);
        
        public delegate void SETTLEMENT_TYPE_DWRowChangeEventHandler(object sender, SETTLEMENT_TYPE_DWRowChangeEvent e);
        
        public delegate void CONSUMERRowChangeEventHandler(object sender, CONSUMERRowChangeEvent e);
        
        public delegate void RESPONCE_CHANELS_DWRowChangeEventHandler(object sender, RESPONCE_CHANELS_DWRowChangeEvent e);
        
        public delegate void MEDIA_CLUSTER_DWRowChangeEventHandler(object sender, MEDIA_CLUSTER_DWRowChangeEvent e);
        
        public delegate void MEDIA_DWRowChangeEventHandler(object sender, MEDIA_DWRowChangeEvent e);
        
        public delegate void BRAND_FAMILY_DWRowChangeEventHandler(object sender, BRAND_FAMILY_DWRowChangeEvent e);
        
        public delegate void BRANDS_DWRowChangeEventHandler(object sender, BRANDS_DWRowChangeEvent e);
        
        public delegate void BRAND_FAMILY_DW1RowChangeEventHandler(object sender, BRAND_FAMILY_DW1RowChangeEvent e);
        
        public delegate void BRANDS_DW1RowChangeEventHandler(object sender, BRANDS_DW1RowChangeEvent e);
        
        public delegate void PRIZES_DWRowChangeEventHandler(object sender, PRIZES_DWRowChangeEvent e);
        
        public delegate void PRIZES_DW1RowChangeEventHandler(object sender, PRIZES_DW1RowChangeEvent e);
        
        public delegate void CONSUMER_QUESTION_FOR_COMPAIGNRowChangeEventHandler(object sender, CONSUMER_QUESTION_FOR_COMPAIGNRowChangeEvent e);
        
        public delegate void ANSWERS_DWRowChangeEventHandler(object sender, ANSWERS_DWRowChangeEvent e);
        
        public delegate void RESPONCE_CHANELSRowChangeEventHandler(object sender, RESPONCE_CHANELSRowChangeEvent e);
        
        public delegate void MICRODISTRICTRowChangeEventHandler(object sender, MICRODISTRICTRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class BRANDSDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnBRANDFAMILY;
            
            private System.Data.DataColumn columnTHICKCAT;
            
            private System.Data.DataColumn columnLENGTHCAT;
            
            private System.Data.DataColumn columnBRANDDIF;
            
            private System.Data.DataColumn columnMENTHIND;
            
            private System.Data.DataColumn columnPACKTYPE;
            
            private System.Data.DataColumn columnFILTIND;
            
            private System.Data.DataColumn columnITEMSPACK;
            
            private System.Data.DataColumn columnMARKBC;
            
            private System.Data.DataColumn columnMBLONGDESCR;
            
            private System.Data.DataColumn columnBLENDTC;
            
            private System.Data.DataColumn columnSPECFLAVC;
            
            private System.Data.DataColumn columnCOMPANYCODE;
            
            private System.Data.DataColumn columnBRAND_FAMILY_DESCR;
            
            private System.Data.DataColumn columnCOMPANY_CODE_DESCRIPTION;
            
            private System.Data.DataColumn columnLENGTH_CATEGORY_DESCR;
            
            private System.Data.DataColumn columnPACK_TYPE_DESCR;
            
            private System.Data.DataColumn columnSPECIAL_FLAVOR_CODE_DESCR;
            
            private System.Data.DataColumn columnTHICKNESS_CATEGORY_DESCR;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BRANDSDataTable() {
                this.TableName = "BRANDS";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BRANDSDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected BRANDSDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BRANDFAMILYColumn {
                get {
                    return this.columnBRANDFAMILY;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn THICKCATColumn {
                get {
                    return this.columnTHICKCAT;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LENGTHCATColumn {
                get {
                    return this.columnLENGTHCAT;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BRANDDIFColumn {
                get {
                    return this.columnBRANDDIF;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MENTHINDColumn {
                get {
                    return this.columnMENTHIND;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PACKTYPEColumn {
                get {
                    return this.columnPACKTYPE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FILTINDColumn {
                get {
                    return this.columnFILTIND;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ITEMSPACKColumn {
                get {
                    return this.columnITEMSPACK;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MARKBCColumn {
                get {
                    return this.columnMARKBC;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MBLONGDESCRColumn {
                get {
                    return this.columnMBLONGDESCR;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BLENDTCColumn {
                get {
                    return this.columnBLENDTC;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SPECFLAVCColumn {
                get {
                    return this.columnSPECFLAVC;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn COMPANYCODEColumn {
                get {
                    return this.columnCOMPANYCODE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BRAND_FAMILY_DESCRColumn {
                get {
                    return this.columnBRAND_FAMILY_DESCR;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn COMPANY_CODE_DESCRIPTIONColumn {
                get {
                    return this.columnCOMPANY_CODE_DESCRIPTION;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LENGTH_CATEGORY_DESCRColumn {
                get {
                    return this.columnLENGTH_CATEGORY_DESCR;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PACK_TYPE_DESCRColumn {
                get {
                    return this.columnPACK_TYPE_DESCR;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SPECIAL_FLAVOR_CODE_DESCRColumn {
                get {
                    return this.columnSPECIAL_FLAVOR_CODE_DESCR;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn THICKNESS_CATEGORY_DESCRColumn {
                get {
                    return this.columnTHICKNESS_CATEGORY_DESCR;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BRANDSRow this[int index] {
                get {
                    return ((BRANDSRow)(this.Rows[index]));
                }
            }
            
            public event BRANDSRowChangeEventHandler BRANDSRowChanging;
            
            public event BRANDSRowChangeEventHandler BRANDSRowChanged;
            
            public event BRANDSRowChangeEventHandler BRANDSRowDeleting;
            
            public event BRANDSRowChangeEventHandler BRANDSRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddBRANDSRow(BRANDSRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BRANDSRow AddBRANDSRow(
                        string BRANDFAMILY, 
                        string THICKCAT, 
                        string LENGTHCAT, 
                        string BRANDDIF, 
                        bool MENTHIND, 
                        string PACKTYPE, 
                        bool FILTIND, 
                        int ITEMSPACK, 
                        string MARKBC, 
                        string MBLONGDESCR, 
                        string BLENDTC, 
                        string SPECFLAVC, 
                        string COMPANYCODE, 
                        string BRAND_FAMILY_DESCR, 
                        string COMPANY_CODE_DESCRIPTION, 
                        string LENGTH_CATEGORY_DESCR, 
                        string PACK_TYPE_DESCR, 
                        string SPECIAL_FLAVOR_CODE_DESCR, 
                        string THICKNESS_CATEGORY_DESCR) {
                BRANDSRow rowBRANDSRow = ((BRANDSRow)(this.NewRow()));
                rowBRANDSRow.ItemArray = new object[] {
                        BRANDFAMILY,
                        THICKCAT,
                        LENGTHCAT,
                        BRANDDIF,
                        MENTHIND,
                        PACKTYPE,
                        FILTIND,
                        ITEMSPACK,
                        MARKBC,
                        MBLONGDESCR,
                        BLENDTC,
                        SPECFLAVC,
                        COMPANYCODE,
                        BRAND_FAMILY_DESCR,
                        COMPANY_CODE_DESCRIPTION,
                        LENGTH_CATEGORY_DESCR,
                        PACK_TYPE_DESCR,
                        SPECIAL_FLAVOR_CODE_DESCR,
                        THICKNESS_CATEGORY_DESCR};
                this.Rows.Add(rowBRANDSRow);
                return rowBRANDSRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BRANDSRow FindByMARKBC(string MARKBC) {
                return ((BRANDSRow)(this.Rows.Find(new object[] {
                            MARKBC})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                BRANDSDataTable cln = ((BRANDSDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new BRANDSDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnBRANDFAMILY = base.Columns["BRANDFAMILY"];
                this.columnTHICKCAT = base.Columns["THICKCAT"];
                this.columnLENGTHCAT = base.Columns["LENGTHCAT"];
                this.columnBRANDDIF = base.Columns["BRANDDIF"];
                this.columnMENTHIND = base.Columns["MENTHIND"];
                this.columnPACKTYPE = base.Columns["PACKTYPE"];
                this.columnFILTIND = base.Columns["FILTIND"];
                this.columnITEMSPACK = base.Columns["ITEMSPACK"];
                this.columnMARKBC = base.Columns["MARKBC"];
                this.columnMBLONGDESCR = base.Columns["MBLONGDESCR"];
                this.columnBLENDTC = base.Columns["BLENDTC"];
                this.columnSPECFLAVC = base.Columns["SPECFLAVC"];
                this.columnCOMPANYCODE = base.Columns["COMPANYCODE"];
                this.columnBRAND_FAMILY_DESCR = base.Columns["BRAND_FAMILY_DESCR"];
                this.columnCOMPANY_CODE_DESCRIPTION = base.Columns["COMPANY_CODE_DESCRIPTION"];
                this.columnLENGTH_CATEGORY_DESCR = base.Columns["LENGTH_CATEGORY_DESCR"];
                this.columnPACK_TYPE_DESCR = base.Columns["PACK_TYPE_DESCR"];
                this.columnSPECIAL_FLAVOR_CODE_DESCR = base.Columns["SPECIAL_FLAVOR_CODE_DESCR"];
                this.columnTHICKNESS_CATEGORY_DESCR = base.Columns["THICKNESS_CATEGORY_DESCR"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnBRANDFAMILY = new System.Data.DataColumn("BRANDFAMILY", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnBRANDFAMILY);
                this.columnTHICKCAT = new System.Data.DataColumn("THICKCAT", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTHICKCAT);
                this.columnLENGTHCAT = new System.Data.DataColumn("LENGTHCAT", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLENGTHCAT);
                this.columnBRANDDIF = new System.Data.DataColumn("BRANDDIF", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnBRANDDIF);
                this.columnMENTHIND = new System.Data.DataColumn("MENTHIND", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMENTHIND);
                this.columnPACKTYPE = new System.Data.DataColumn("PACKTYPE", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPACKTYPE);
                this.columnFILTIND = new System.Data.DataColumn("FILTIND", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFILTIND);
                this.columnITEMSPACK = new System.Data.DataColumn("ITEMSPACK", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnITEMSPACK);
                this.columnMARKBC = new System.Data.DataColumn("MARKBC", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMARKBC);
                this.columnMBLONGDESCR = new System.Data.DataColumn("MBLONGDESCR", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMBLONGDESCR);
                this.columnBLENDTC = new System.Data.DataColumn("BLENDTC", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnBLENDTC);
                this.columnSPECFLAVC = new System.Data.DataColumn("SPECFLAVC", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSPECFLAVC);
                this.columnCOMPANYCODE = new System.Data.DataColumn("COMPANYCODE", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANYCODE);
                this.columnBRAND_FAMILY_DESCR = new System.Data.DataColumn("BRAND_FAMILY_DESCR", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnBRAND_FAMILY_DESCR);
                this.columnCOMPANY_CODE_DESCRIPTION = new System.Data.DataColumn("COMPANY_CODE_DESCRIPTION", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_CODE_DESCRIPTION);
                this.columnLENGTH_CATEGORY_DESCR = new System.Data.DataColumn("LENGTH_CATEGORY_DESCR", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLENGTH_CATEGORY_DESCR);
                this.columnPACK_TYPE_DESCR = new System.Data.DataColumn("PACK_TYPE_DESCR", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPACK_TYPE_DESCR);
                this.columnSPECIAL_FLAVOR_CODE_DESCR = new System.Data.DataColumn("SPECIAL_FLAVOR_CODE_DESCR", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSPECIAL_FLAVOR_CODE_DESCR);
                this.columnTHICKNESS_CATEGORY_DESCR = new System.Data.DataColumn("THICKNESS_CATEGORY_DESCR", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTHICKNESS_CATEGORY_DESCR);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnMARKBC}, true));
                this.columnBRANDFAMILY.AllowDBNull = false;
                this.columnBRANDFAMILY.MaxLength = 20;
                this.columnTHICKCAT.AllowDBNull = false;
                this.columnTHICKCAT.MaxLength = 20;
                this.columnLENGTHCAT.AllowDBNull = false;
                this.columnLENGTHCAT.MaxLength = 20;
                this.columnBRANDDIF.MaxLength = 50;
                this.columnPACKTYPE.AllowDBNull = false;
                this.columnPACKTYPE.MaxLength = 10;
                this.columnMARKBC.AllowDBNull = false;
                this.columnMARKBC.Unique = true;
                this.columnMARKBC.MaxLength = 50;
                this.columnMBLONGDESCR.MaxLength = 100;
                this.columnBLENDTC.MaxLength = 50;
                this.columnSPECFLAVC.AllowDBNull = false;
                this.columnSPECFLAVC.MaxLength = 10;
                this.columnCOMPANYCODE.AllowDBNull = false;
                this.columnCOMPANYCODE.MaxLength = 20;
                this.columnBRAND_FAMILY_DESCR.MaxLength = 50;
                this.columnCOMPANY_CODE_DESCRIPTION.MaxLength = 50;
                this.columnLENGTH_CATEGORY_DESCR.MaxLength = 50;
                this.columnPACK_TYPE_DESCR.MaxLength = 50;
                this.columnSPECIAL_FLAVOR_CODE_DESCR.MaxLength = 50;
                this.columnTHICKNESS_CATEGORY_DESCR.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BRANDSRow NewBRANDSRow() {
                return ((BRANDSRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new BRANDSRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(BRANDSRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.BRANDSRowChanged != null)) {
                    this.BRANDSRowChanged(this, new BRANDSRowChangeEvent(((BRANDSRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.BRANDSRowChanging != null)) {
                    this.BRANDSRowChanging(this, new BRANDSRowChangeEvent(((BRANDSRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.BRANDSRowDeleted != null)) {
                    this.BRANDSRowDeleted(this, new BRANDSRowChangeEvent(((BRANDSRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.BRANDSRowDeleting != null)) {
                    this.BRANDSRowDeleting(this, new BRANDSRowChangeEvent(((BRANDSRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveBRANDSRow(BRANDSRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                phmkDataSet ds = new phmkDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "BRANDSDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class COMPANY_CODEDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnPMCODE;
            
            private System.Data.DataColumn columnDESCRIPTION;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public COMPANY_CODEDataTable() {
                this.TableName = "COMPANY_CODE";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal COMPANY_CODEDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected COMPANY_CODEDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PMCODEColumn {
                get {
                    return this.columnPMCODE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DESCRIPTIONColumn {
                get {
                    return this.columnDESCRIPTION;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public COMPANY_CODERow this[int index] {
                get {
                    return ((COMPANY_CODERow)(this.Rows[index]));
                }
            }
            
            public event COMPANY_CODERowChangeEventHandler COMPANY_CODERowChanging;
            
            public event COMPANY_CODERowChangeEventHandler COMPANY_CODERowChanged;
            
            public event COMPANY_CODERowChangeEventHandler COMPANY_CODERowDeleting;
            
            public event COMPANY_CODERowChangeEventHandler COMPANY_CODERowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCOMPANY_CODERow(COMPANY_CODERow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public COMPANY_CODERow AddCOMPANY_CODERow(string PMCODE, string DESCRIPTION) {
                COMPANY_CODERow rowCOMPANY_CODERow = ((COMPANY_CODERow)(this.NewRow()));
                rowCOMPANY_CODERow.ItemArray = new object[] {
                        PMCODE,
                        DESCRIPTION};
                this.Rows.Add(rowCOMPANY_CODERow);
                return rowCOMPANY_CODERow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public COMPANY_CODERow FindByPMCODE(string PMCODE) {
                return ((COMPANY_CODERow)(this.Rows.Find(new object[] {
                            PMCODE})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                COMPANY_CODEDataTable cln = ((COMPANY_CODEDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new COMPANY_CODEDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnPMCODE = base.Columns["PMCODE"];
                this.columnDESCRIPTION = base.Columns["DESCRIPTION"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnPMCODE = new System.Data.DataColumn("PMCODE", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPMCODE);
                this.columnDESCRIPTION = new System.Data.DataColumn("DESCRIPTION", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDESCRIPTION);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnPMCODE}, true));
                this.columnPMCODE.AllowDBNull = false;
                this.columnPMCODE.Unique = true;
                this.columnPMCODE.MaxLength = 20;
                this.columnDESCRIPTION.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public COMPANY_CODERow NewCOMPANY_CODERow() {
                return ((COMPANY_CODERow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new COMPANY_CODERow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(COMPANY_CODERow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.COMPANY_CODERowChanged != null)) {
                    this.COMPANY_CODERowChanged(this, new COMPANY_CODERowChangeEvent(((COMPANY_CODERow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.COMPANY_CODERowChanging != null)) {
                    this.COMPANY_CODERowChanging(this, new COMPANY_CODERowChangeEvent(((COMPANY_CODERow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.COMPANY_CODERowDeleted != null)) {
                    this.COMPANY_CODERowDeleted(this, new COMPANY_CODERowChangeEvent(((COMPANY_CODERow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.COMPANY_CODERowDeleting != null)) {
                    this.COMPANY_CODERowDeleting(this, new COMPANY_CODERowChangeEvent(((COMPANY_CODERow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCOMPANY_CODERow(COMPANY_CODERow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                phmkDataSet ds = new phmkDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "COMPANY_CODEDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LENGTH_CATEGORYDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnCATEGORY;
            
            private System.Data.DataColumn columnDESCR;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LENGTH_CATEGORYDataTable() {
                this.TableName = "LENGTH_CATEGORY";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LENGTH_CATEGORYDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LENGTH_CATEGORYDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CATEGORYColumn {
                get {
                    return this.columnCATEGORY;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DESCRColumn {
                get {
                    return this.columnDESCR;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LENGTH_CATEGORYRow this[int index] {
                get {
                    return ((LENGTH_CATEGORYRow)(this.Rows[index]));
                }
            }
            
            public event LENGTH_CATEGORYRowChangeEventHandler LENGTH_CATEGORYRowChanging;
            
            public event LENGTH_CATEGORYRowChangeEventHandler LENGTH_CATEGORYRowChanged;
            
            public event LENGTH_CATEGORYRowChangeEventHandler LENGTH_CATEGORYRowDeleting;
            
            public event LENGTH_CATEGORYRowChangeEventHandler LENGTH_CATEGORYRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLENGTH_CATEGORYRow(LENGTH_CATEGORYRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LENGTH_CATEGORYRow AddLENGTH_CATEGORYRow(string CATEGORY, string DESCR) {
                LENGTH_CATEGORYRow rowLENGTH_CATEGORYRow = ((LENGTH_CATEGORYRow)(this.NewRow()));
                rowLENGTH_CATEGORYRow.ItemArray = new object[] {
                        CATEGORY,
                        DESCR};
                this.Rows.Add(rowLENGTH_CATEGORYRow);
                return rowLENGTH_CATEGORYRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LENGTH_CATEGORYRow FindByCATEGORY(string CATEGORY) {
                return ((LENGTH_CATEGORYRow)(this.Rows.Find(new object[] {
                            CATEGORY})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                LENGTH_CATEGORYDataTable cln = ((LENGTH_CATEGORYDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new LENGTH_CATEGORYDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCATEGORY = base.Columns["CATEGORY"];
                this.columnDESCR = base.Columns["DESCR"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCATEGORY = new System.Data.DataColumn("CATEGORY", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCATEGORY);
                this.columnDESCR = new System.Data.DataColumn("DESCR", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDESCR);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnCATEGORY}, true));
                this.columnCATEGORY.AllowDBNull = false;
                this.columnCATEGORY.Unique = true;
                this.columnCATEGORY.MaxLength = 20;
                this.columnDESCR.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LENGTH_CATEGORYRow NewLENGTH_CATEGORYRow() {
                return ((LENGTH_CATEGORYRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new LENGTH_CATEGORYRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(LENGTH_CATEGORYRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LENGTH_CATEGORYRowChanged != null)) {
                    this.LENGTH_CATEGORYRowChanged(this, new LENGTH_CATEGORYRowChangeEvent(((LENGTH_CATEGORYRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LENGTH_CATEGORYRowChanging != null)) {
                    this.LENGTH_CATEGORYRowChanging(this, new LENGTH_CATEGORYRowChangeEvent(((LENGTH_CATEGORYRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LENGTH_CATEGORYRowDeleted != null)) {
                    this.LENGTH_CATEGORYRowDeleted(this, new LENGTH_CATEGORYRowChangeEvent(((LENGTH_CATEGORYRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LENGTH_CATEGORYRowDeleting != null)) {
                    this.LENGTH_CATEGORYRowDeleting(this, new LENGTH_CATEGORYRowChangeEvent(((LENGTH_CATEGORYRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLENGTH_CATEGORYRow(LENGTH_CATEGORYRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                phmkDataSet ds = new phmkDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LENGTH_CATEGORYDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PACK_TYPEDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnTYPE;
            
            private System.Data.DataColumn columnDESCR;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PACK_TYPEDataTable() {
                this.TableName = "PACK_TYPE";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PACK_TYPEDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PACK_TYPEDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TYPEColumn {
                get {
                    return this.columnTYPE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DESCRColumn {
                get {
                    return this.columnDESCR;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PACK_TYPERow this[int index] {
                get {
                    return ((PACK_TYPERow)(this.Rows[index]));
                }
            }
            
            public event PACK_TYPERowChangeEventHandler PACK_TYPERowChanging;
            
            public event PACK_TYPERowChangeEventHandler PACK_TYPERowChanged;
            
            public event PACK_TYPERowChangeEventHandler PACK_TYPERowDeleting;
            
            public event PACK_TYPERowChangeEventHandler PACK_TYPERowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPACK_TYPERow(PACK_TYPERow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PACK_TYPERow AddPACK_TYPERow(string TYPE, string DESCR) {
                PACK_TYPERow rowPACK_TYPERow = ((PACK_TYPERow)(this.NewRow()));
                rowPACK_TYPERow.ItemArray = new object[] {
                        TYPE,
                        DESCR};
                this.Rows.Add(rowPACK_TYPERow);
                return rowPACK_TYPERow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PACK_TYPERow FindByTYPE(string TYPE) {
                return ((PACK_TYPERow)(this.Rows.Find(new object[] {
                            TYPE})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                PACK_TYPEDataTable cln = ((PACK_TYPEDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new PACK_TYPEDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTYPE = base.Columns["TYPE"];
                this.columnDESCR = base.Columns["DESCR"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTYPE = new System.Data.DataColumn("TYPE", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTYPE);
                this.columnDESCR = new System.Data.DataColumn("DESCR", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDESCR);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnTYPE}, true));
                this.columnTYPE.AllowDBNull = false;
                this.columnTYPE.Unique = true;
                this.columnTYPE.MaxLength = 10;
                this.columnDESCR.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PACK_TYPERow NewPACK_TYPERow() {
                return ((PACK_TYPERow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new PACK_TYPERow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(PACK_TYPERow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PACK_TYPERowChanged != null)) {
                    this.PACK_TYPERowChanged(this, new PACK_TYPERowChangeEvent(((PACK_TYPERow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PACK_TYPERowChanging != null)) {
                    this.PACK_TYPERowChanging(this, new PACK_TYPERowChangeEvent(((PACK_TYPERow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PACK_TYPERowDeleted != null)) {
                    this.PACK_TYPERowDeleted(this, new PACK_TYPERowChangeEvent(((PACK_TYPERow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PACK_TYPERowDeleting != null)) {
                    this.PACK_TYPERowDeleting(this, new PACK_TYPERowChangeEvent(((PACK_TYPERow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePACK_TYPERow(PACK_TYPERow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                phmkDataSet ds = new phmkDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PACK_TYPEDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class BRAND_FAMILYDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnPMCODE;
            
            private System.Data.DataColumn columnDESCR;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BRAND_FAMILYDataTable() {
                this.TableName = "BRAND_FAMILY";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BRAND_FAMILYDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected BRAND_FAMILYDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PMCODEColumn {
                get {
                    return this.columnPMCODE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DESCRColumn {
                get {
                    return this.columnDESCR;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BRAND_FAMILYRow this[int index] {
                get {
                    return ((BRAND_FAMILYRow)(this.Rows[index]));
                }
            }
            
            public event BRAND_FAMILYRowChangeEventHandler BRAND_FAMILYRowChanging;
            
            public event BRAND_FAMILYRowChangeEventHandler BRAND_FAMILYRowChanged;
            
            public event BRAND_FAMILYRowChangeEventHandler BRAND_FAMILYRowDeleting;
            
            public event BRAND_FAMILYRowChangeEventHandler BRAND_FAMILYRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddBRAND_FAMILYRow(BRAND_FAMILYRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BRAND_FAMILYRow AddBRAND_FAMILYRow(string PMCODE, string DESCR) {
                BRAND_FAMILYRow rowBRAND_FAMILYRow = ((BRAND_FAMILYRow)(this.NewRow()));
                rowBRAND_FAMILYRow.ItemArray = new object[] {
                        PMCODE,
                        DESCR};
                this.Rows.Add(rowBRAND_FAMILYRow);
                return rowBRAND_FAMILYRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BRAND_FAMILYRow FindByPMCODE(string PMCODE) {
                return ((BRAND_FAMILYRow)(this.Rows.Find(new object[] {
                            PMCODE})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                BRAND_FAMILYDataTable cln = ((BRAND_FAMILYDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new BRAND_FAMILYDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnPMCODE = base.Columns["PMCODE"];
                this.columnDESCR = base.Columns["DESCR"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnPMCODE = new System.Data.DataColumn("PMCODE", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPMCODE);
                this.columnDESCR = new System.Data.DataColumn("DESCR", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDESCR);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnPMCODE}, true));
                this.columnPMCODE.AllowDBNull = false;
                this.columnPMCODE.Unique = true;
                this.columnPMCODE.MaxLength = 20;
                this.columnDESCR.MaxLength = 50;
                this.CaseSensitive = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BRAND_FAMILYRow NewBRAND_FAMILYRow() {
                return ((BRAND_FAMILYRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new BRAND_FAMILYRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(BRAND_FAMILYRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.BRAND_FAMILYRowChanged != null)) {
                    this.BRAND_FAMILYRowChanged(this, new BRAND_FAMILYRowChangeEvent(((BRAND_FAMILYRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.BRAND_FAMILYRowChanging != null)) {
                    this.BRAND_FAMILYRowChanging(this, new BRAND_FAMILYRowChangeEvent(((BRAND_FAMILYRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.BRAND_FAMILYRowDeleted != null)) {
                    this.BRAND_FAMILYRowDeleted(this, new BRAND_FAMILYRowChangeEvent(((BRAND_FAMILYRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.BRAND_FAMILYRowDeleting != null)) {
                    this.BRAND_FAMILYRowDeleting(this, new BRAND_FAMILYRowChangeEvent(((BRAND_FAMILYRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveBRAND_FAMILYRow(BRAND_FAMILYRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                phmkDataSet ds = new phmkDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "BRAND_FAMILYDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SPECIAL_FLAVOR_CODEDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnCODE;
            
            private System.Data.DataColumn columnDESCR;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPECIAL_FLAVOR_CODEDataTable() {
                this.TableName = "SPECIAL_FLAVOR_CODE";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SPECIAL_FLAVOR_CODEDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SPECIAL_FLAVOR_CODEDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CODEColumn {
                get {
                    return this.columnCODE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DESCRColumn {
                get {
                    return this.columnDESCR;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPECIAL_FLAVOR_CODERow this[int index] {
                get {
                    return ((SPECIAL_FLAVOR_CODERow)(this.Rows[index]));
                }
            }
            
            public event SPECIAL_FLAVOR_CODERowChangeEventHandler SPECIAL_FLAVOR_CODERowChanging;
            
            public event SPECIAL_FLAVOR_CODERowChangeEventHandler SPECIAL_FLAVOR_CODERowChanged;
            
            public event SPECIAL_FLAVOR_CODERowChangeEventHandler SPECIAL_FLAVOR_CODERowDeleting;
            
            public event SPECIAL_FLAVOR_CODERowChangeEventHandler SPECIAL_FLAVOR_CODERowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSPECIAL_FLAVOR_CODERow(SPECIAL_FLAVOR_CODERow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPECIAL_FLAVOR_CODERow AddSPECIAL_FLAVOR_CODERow(string CODE, string DESCR) {
                SPECIAL_FLAVOR_CODERow rowSPECIAL_FLAVOR_CODERow = ((SPECIAL_FLAVOR_CODERow)(this.NewRow()));
                rowSPECIAL_FLAVOR_CODERow.ItemArray = new object[] {
                        CODE,
                        DESCR};
                this.Rows.Add(rowSPECIAL_FLAVOR_CODERow);
                return rowSPECIAL_FLAVOR_CODERow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPECIAL_FLAVOR_CODERow FindByCODE(string CODE) {
                return ((SPECIAL_FLAVOR_CODERow)(this.Rows.Find(new object[] {
                            CODE})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                SPECIAL_FLAVOR_CODEDataTable cln = ((SPECIAL_FLAVOR_CODEDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new SPECIAL_FLAVOR_CODEDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCODE = base.Columns["CODE"];
                this.columnDESCR = base.Columns["DESCR"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCODE = new System.Data.DataColumn("CODE", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCODE);
                this.columnDESCR = new System.Data.DataColumn("DESCR", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDESCR);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnCODE}, true));
                this.columnCODE.AllowDBNull = false;
                this.columnCODE.Unique = true;
                this.columnCODE.MaxLength = 10;
                this.columnDESCR.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPECIAL_FLAVOR_CODERow NewSPECIAL_FLAVOR_CODERow() {
                return ((SPECIAL_FLAVOR_CODERow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new SPECIAL_FLAVOR_CODERow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(SPECIAL_FLAVOR_CODERow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SPECIAL_FLAVOR_CODERowChanged != null)) {
                    this.SPECIAL_FLAVOR_CODERowChanged(this, new SPECIAL_FLAVOR_CODERowChangeEvent(((SPECIAL_FLAVOR_CODERow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SPECIAL_FLAVOR_CODERowChanging != null)) {
                    this.SPECIAL_FLAVOR_CODERowChanging(this, new SPECIAL_FLAVOR_CODERowChangeEvent(((SPECIAL_FLAVOR_CODERow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SPECIAL_FLAVOR_CODERowDeleted != null)) {
                    this.SPECIAL_FLAVOR_CODERowDeleted(this, new SPECIAL_FLAVOR_CODERowChangeEvent(((SPECIAL_FLAVOR_CODERow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SPECIAL_FLAVOR_CODERowDeleting != null)) {
                    this.SPECIAL_FLAVOR_CODERowDeleting(this, new SPECIAL_FLAVOR_CODERowChangeEvent(((SPECIAL_FLAVOR_CODERow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSPECIAL_FLAVOR_CODERow(SPECIAL_FLAVOR_CODERow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                phmkDataSet ds = new phmkDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SPECIAL_FLAVOR_CODEDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class THICKNESS_CATEGORYDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnCATEGORY;
            
            private System.Data.DataColumn columnDESCR;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public THICKNESS_CATEGORYDataTable() {
                this.TableName = "THICKNESS_CATEGORY";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal THICKNESS_CATEGORYDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected THICKNESS_CATEGORYDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CATEGORYColumn {
                get {
                    return this.columnCATEGORY;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DESCRColumn {
                get {
                    return this.columnDESCR;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public THICKNESS_CATEGORYRow this[int index] {
                get {
                    return ((THICKNESS_CATEGORYRow)(this.Rows[index]));
                }
            }
            
            public event THICKNESS_CATEGORYRowChangeEventHandler THICKNESS_CATEGORYRowChanging;
            
            public event THICKNESS_CATEGORYRowChangeEventHandler THICKNESS_CATEGORYRowChanged;
            
            public event THICKNESS_CATEGORYRowChangeEventHandler THICKNESS_CATEGORYRowDeleting;
            
            public event THICKNESS_CATEGORYRowChangeEventHandler THICKNESS_CATEGORYRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTHICKNESS_CATEGORYRow(THICKNESS_CATEGORYRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public THICKNESS_CATEGORYRow AddTHICKNESS_CATEGORYRow(string CATEGORY, string DESCR) {
                THICKNESS_CATEGORYRow rowTHICKNESS_CATEGORYRow = ((THICKNESS_CATEGORYRow)(this.NewRow()));
                rowTHICKNESS_CATEGORYRow.ItemArray = new object[] {
                        CATEGORY,
                        DESCR};
                this.Rows.Add(rowTHICKNESS_CATEGORYRow);
                return rowTHICKNESS_CATEGORYRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public THICKNESS_CATEGORYRow FindByCATEGORY(string CATEGORY) {
                return ((THICKNESS_CATEGORYRow)(this.Rows.Find(new object[] {
                            CATEGORY})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                THICKNESS_CATEGORYDataTable cln = ((THICKNESS_CATEGORYDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new THICKNESS_CATEGORYDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCATEGORY = base.Columns["CATEGORY"];
                this.columnDESCR = base.Columns["DESCR"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCATEGORY = new System.Data.DataColumn("CATEGORY", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCATEGORY);
                this.columnDESCR = new System.Data.DataColumn("DESCR", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDESCR);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnCATEGORY}, true));
                this.columnCATEGORY.AllowDBNull = false;
                this.columnCATEGORY.Unique = true;
                this.columnCATEGORY.MaxLength = 20;
                this.columnDESCR.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public THICKNESS_CATEGORYRow NewTHICKNESS_CATEGORYRow() {
                return ((THICKNESS_CATEGORYRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new THICKNESS_CATEGORYRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(THICKNESS_CATEGORYRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.THICKNESS_CATEGORYRowChanged != null)) {
                    this.THICKNESS_CATEGORYRowChanged(this, new THICKNESS_CATEGORYRowChangeEvent(((THICKNESS_CATEGORYRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.THICKNESS_CATEGORYRowChanging != null)) {
                    this.THICKNESS_CATEGORYRowChanging(this, new THICKNESS_CATEGORYRowChangeEvent(((THICKNESS_CATEGORYRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.THICKNESS_CATEGORYRowDeleted != null)) {
                    this.THICKNESS_CATEGORYRowDeleted(this, new THICKNESS_CATEGORYRowChangeEvent(((THICKNESS_CATEGORYRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.THICKNESS_CATEGORYRowDeleting != null)) {
                    this.THICKNESS_CATEGORYRowDeleting(this, new THICKNESS_CATEGORYRowChangeEvent(((THICKNESS_CATEGORYRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTHICKNESS_CATEGORYRow(THICKNESS_CATEGORYRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                phmkDataSet ds = new phmkDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "THICKNESS_CATEGORYDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SIGNATURE_TYPEDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnDESCR;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SIGNATURE_TYPEDataTable() {
                this.TableName = "SIGNATURE_TYPE";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SIGNATURE_TYPEDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SIGNATURE_TYPEDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DESCRColumn {
                get {
                    return this.columnDESCR;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SIGNATURE_TYPERow this[int index] {
                get {
                    return ((SIGNATURE_TYPERow)(this.Rows[index]));
                }
            }
            
            public event SIGNATURE_TYPERowChangeEventHandler SIGNATURE_TYPERowChanging;
            
            public event SIGNATURE_TYPERowChangeEventHandler SIGNATURE_TYPERowChanged;
            
            public event SIGNATURE_TYPERowChangeEventHandler SIGNATURE_TYPERowDeleting;
            
            public event SIGNATURE_TYPERowChangeEventHandler SIGNATURE_TYPERowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSIGNATURE_TYPERow(SIGNATURE_TYPERow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SIGNATURE_TYPERow AddSIGNATURE_TYPERow(int ID, string DESCR) {
                SIGNATURE_TYPERow rowSIGNATURE_TYPERow = ((SIGNATURE_TYPERow)(this.NewRow()));
                rowSIGNATURE_TYPERow.ItemArray = new object[] {
                        ID,
                        DESCR};
                this.Rows.Add(rowSIGNATURE_TYPERow);
                return rowSIGNATURE_TYPERow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SIGNATURE_TYPERow FindByID(int ID) {
                return ((SIGNATURE_TYPERow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                SIGNATURE_TYPEDataTable cln = ((SIGNATURE_TYPEDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new SIGNATURE_TYPEDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnDESCR = base.Columns["DESCR"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnDESCR = new System.Data.DataColumn("DESCR", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDESCR);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AllowDBNull = false;
                this.columnID.Unique = true;
                this.columnDESCR.AllowDBNull = false;
                this.columnDESCR.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SIGNATURE_TYPERow NewSIGNATURE_TYPERow() {
                return ((SIGNATURE_TYPERow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new SIGNATURE_TYPERow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(SIGNATURE_TYPERow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SIGNATURE_TYPERowChanged != null)) {
                    this.SIGNATURE_TYPERowChanged(this, new SIGNATURE_TYPERowChangeEvent(((SIGNATURE_TYPERow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SIGNATURE_TYPERowChanging != null)) {
                    this.SIGNATURE_TYPERowChanging(this, new SIGNATURE_TYPERowChangeEvent(((SIGNATURE_TYPERow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SIGNATURE_TYPERowDeleted != null)) {
                    this.SIGNATURE_TYPERowDeleted(this, new SIGNATURE_TYPERowChangeEvent(((SIGNATURE_TYPERow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SIGNATURE_TYPERowDeleting != null)) {
                    this.SIGNATURE_TYPERowDeleting(this, new SIGNATURE_TYPERowChangeEvent(((SIGNATURE_TYPERow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSIGNATURE_TYPERow(SIGNATURE_TYPERow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                phmkDataSet ds = new phmkDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SIGNATURE_TYPEDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PASSPORT_TYPEDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnNAME;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PASSPORT_TYPEDataTable() {
                this.TableName = "PASSPORT_TYPE";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PASSPORT_TYPEDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PASSPORT_TYPEDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NAMEColumn {
                get {
                    return this.columnNAME;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PASSPORT_TYPERow this[int index] {
                get {
                    return ((PASSPORT_TYPERow)(this.Rows[index]));
                }
            }
            
            public event PASSPORT_TYPERowChangeEventHandler PASSPORT_TYPERowChanging;
            
            public event PASSPORT_TYPERowChangeEventHandler PASSPORT_TYPERowChanged;
            
            public event PASSPORT_TYPERowChangeEventHandler PASSPORT_TYPERowDeleting;
            
            public event PASSPORT_TYPERowChangeEventHandler PASSPORT_TYPERowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPASSPORT_TYPERow(PASSPORT_TYPERow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PASSPORT_TYPERow AddPASSPORT_TYPERow(int ID, string NAME) {
                PASSPORT_TYPERow rowPASSPORT_TYPERow = ((PASSPORT_TYPERow)(this.NewRow()));
                rowPASSPORT_TYPERow.ItemArray = new object[] {
                        ID,
                        NAME};
                this.Rows.Add(rowPASSPORT_TYPERow);
                return rowPASSPORT_TYPERow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PASSPORT_TYPERow FindByID(int ID) {
                return ((PASSPORT_TYPERow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                PASSPORT_TYPEDataTable cln = ((PASSPORT_TYPEDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new PASSPORT_TYPEDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnNAME = base.Columns["NAME"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnNAME = new System.Data.DataColumn("NAME", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNAME);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AllowDBNull = false;
                this.columnID.Unique = true;
                this.columnNAME.AllowDBNull = false;
                this.columnNAME.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PASSPORT_TYPERow NewPASSPORT_TYPERow() {
                return ((PASSPORT_TYPERow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new PASSPORT_TYPERow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(PASSPORT_TYPERow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PASSPORT_TYPERowChanged != null)) {
                    this.PASSPORT_TYPERowChanged(this, new PASSPORT_TYPERowChangeEvent(((PASSPORT_TYPERow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PASSPORT_TYPERowChanging != null)) {
                    this.PASSPORT_TYPERowChanging(this, new PASSPORT_TYPERowChangeEvent(((PASSPORT_TYPERow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PASSPORT_TYPERowDeleted != null)) {
                    this.PASSPORT_TYPERowDeleted(this, new PASSPORT_TYPERowChangeEvent(((PASSPORT_TYPERow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PASSPORT_TYPERowDeleting != null)) {
                    this.PASSPORT_TYPERowDeleting(this, new PASSPORT_TYPERowChangeEvent(((PASSPORT_TYPERow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePASSPORT_TYPERow(PASSPORT_TYPERow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                phmkDataSet ds = new phmkDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PASSPORT_TYPEDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LOYALTYDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnDESCR;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LOYALTYDataTable() {
                this.TableName = "LOYALTY";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LOYALTYDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LOYALTYDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DESCRColumn {
                get {
                    return this.columnDESCR;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LOYALTYRow this[int index] {
                get {
                    return ((LOYALTYRow)(this.Rows[index]));
                }
            }
            
            public event LOYALTYRowChangeEventHandler LOYALTYRowChanging;
            
            public event LOYALTYRowChangeEventHandler LOYALTYRowChanged;
            
            public event LOYALTYRowChangeEventHandler LOYALTYRowDeleting;
            
            public event LOYALTYRowChangeEventHandler LOYALTYRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLOYALTYRow(LOYALTYRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LOYALTYRow AddLOYALTYRow(int ID, string DESCR) {
                LOYALTYRow rowLOYALTYRow = ((LOYALTYRow)(this.NewRow()));
                rowLOYALTYRow.ItemArray = new object[] {
                        ID,
                        DESCR};
                this.Rows.Add(rowLOYALTYRow);
                return rowLOYALTYRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LOYALTYRow FindByID(int ID) {
                return ((LOYALTYRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                LOYALTYDataTable cln = ((LOYALTYDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new LOYALTYDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnDESCR = base.Columns["DESCR"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnDESCR = new System.Data.DataColumn("DESCR", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDESCR);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AllowDBNull = false;
                this.columnID.Unique = true;
                this.columnDESCR.AllowDBNull = false;
                this.columnDESCR.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LOYALTYRow NewLOYALTYRow() {
                return ((LOYALTYRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new LOYALTYRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(LOYALTYRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LOYALTYRowChanged != null)) {
                    this.LOYALTYRowChanged(this, new LOYALTYRowChangeEvent(((LOYALTYRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LOYALTYRowChanging != null)) {
                    this.LOYALTYRowChanging(this, new LOYALTYRowChangeEvent(((LOYALTYRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LOYALTYRowDeleted != null)) {
                    this.LOYALTYRowDeleted(this, new LOYALTYRowChangeEvent(((LOYALTYRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LOYALTYRowDeleting != null)) {
                    this.LOYALTYRowDeleting(this, new LOYALTYRowChangeEvent(((LOYALTYRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLOYALTYRow(LOYALTYRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                phmkDataSet ds = new phmkDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LOYALTYDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LANGUAGEDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnLANGUAGECODE;
            
            private System.Data.DataColumn columnNAME;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LANGUAGEDataTable() {
                this.TableName = "LANGUAGE";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LANGUAGEDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LANGUAGEDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LANGUAGECODEColumn {
                get {
                    return this.columnLANGUAGECODE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NAMEColumn {
                get {
                    return this.columnNAME;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LANGUAGERow this[int index] {
                get {
                    return ((LANGUAGERow)(this.Rows[index]));
                }
            }
            
            public event LANGUAGERowChangeEventHandler LANGUAGERowChanging;
            
            public event LANGUAGERowChangeEventHandler LANGUAGERowChanged;
            
            public event LANGUAGERowChangeEventHandler LANGUAGERowDeleting;
            
            public event LANGUAGERowChangeEventHandler LANGUAGERowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLANGUAGERow(LANGUAGERow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LANGUAGERow AddLANGUAGERow(int ID, string LANGUAGECODE, string NAME) {
                LANGUAGERow rowLANGUAGERow = ((LANGUAGERow)(this.NewRow()));
                rowLANGUAGERow.ItemArray = new object[] {
                        ID,
                        LANGUAGECODE,
                        NAME};
                this.Rows.Add(rowLANGUAGERow);
                return rowLANGUAGERow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LANGUAGERow FindByID(int ID) {
                return ((LANGUAGERow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                LANGUAGEDataTable cln = ((LANGUAGEDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new LANGUAGEDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnLANGUAGECODE = base.Columns["LANGUAGECODE"];
                this.columnNAME = base.Columns["NAME"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnLANGUAGECODE = new System.Data.DataColumn("LANGUAGECODE", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLANGUAGECODE);
                this.columnNAME = new System.Data.DataColumn("NAME", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNAME);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AllowDBNull = false;
                this.columnID.Unique = true;
                this.columnLANGUAGECODE.AllowDBNull = false;
                this.columnLANGUAGECODE.MaxLength = 3;
                this.columnNAME.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LANGUAGERow NewLANGUAGERow() {
                return ((LANGUAGERow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new LANGUAGERow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(LANGUAGERow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LANGUAGERowChanged != null)) {
                    this.LANGUAGERowChanged(this, new LANGUAGERowChangeEvent(((LANGUAGERow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LANGUAGERowChanging != null)) {
                    this.LANGUAGERowChanging(this, new LANGUAGERowChangeEvent(((LANGUAGERow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LANGUAGERowDeleted != null)) {
                    this.LANGUAGERowDeleted(this, new LANGUAGERowChangeEvent(((LANGUAGERow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LANGUAGERowDeleting != null)) {
                    this.LANGUAGERowDeleting(this, new LANGUAGERowChangeEvent(((LANGUAGERow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLANGUAGERow(LANGUAGERow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                phmkDataSet ds = new phmkDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LANGUAGEDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class OBLASTDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnOBLASTID;
            
            private System.Data.DataColumn columnNAME;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OBLASTDataTable() {
                this.TableName = "OBLAST";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OBLASTDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected OBLASTDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn OBLASTIDColumn {
                get {
                    return this.columnOBLASTID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NAMEColumn {
                get {
                    return this.columnNAME;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OBLASTRow this[int index] {
                get {
                    return ((OBLASTRow)(this.Rows[index]));
                }
            }
            
            public event OBLASTRowChangeEventHandler OBLASTRowChanging;
            
            public event OBLASTRowChangeEventHandler OBLASTRowChanged;
            
            public event OBLASTRowChangeEventHandler OBLASTRowDeleting;
            
            public event OBLASTRowChangeEventHandler OBLASTRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddOBLASTRow(OBLASTRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OBLASTRow AddOBLASTRow(int OBLASTID, string NAME) {
                OBLASTRow rowOBLASTRow = ((OBLASTRow)(this.NewRow()));
                rowOBLASTRow.ItemArray = new object[] {
                        OBLASTID,
                        NAME};
                this.Rows.Add(rowOBLASTRow);
                return rowOBLASTRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                OBLASTDataTable cln = ((OBLASTDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new OBLASTDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnOBLASTID = base.Columns["OBLASTID"];
                this.columnNAME = base.Columns["NAME"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnOBLASTID = new System.Data.DataColumn("OBLASTID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnOBLASTID);
                this.columnNAME = new System.Data.DataColumn("NAME", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNAME);
                this.columnNAME.AllowDBNull = false;
                this.columnNAME.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OBLASTRow NewOBLASTRow() {
                return ((OBLASTRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new OBLASTRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(OBLASTRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.OBLASTRowChanged != null)) {
                    this.OBLASTRowChanged(this, new OBLASTRowChangeEvent(((OBLASTRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.OBLASTRowChanging != null)) {
                    this.OBLASTRowChanging(this, new OBLASTRowChangeEvent(((OBLASTRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.OBLASTRowDeleted != null)) {
                    this.OBLASTRowDeleted(this, new OBLASTRowChangeEvent(((OBLASTRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.OBLASTRowDeleting != null)) {
                    this.OBLASTRowDeleting(this, new OBLASTRowChangeEvent(((OBLASTRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveOBLASTRow(OBLASTRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                phmkDataSet ds = new phmkDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "OBLASTDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class REGIONDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnREGIONID;
            
            private System.Data.DataColumn columnOBLASTID;
            
            private System.Data.DataColumn columnNAME;
            
            private System.Data.DataColumn columnOBLNAME;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public REGIONDataTable() {
                this.TableName = "REGION";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal REGIONDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected REGIONDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn REGIONIDColumn {
                get {
                    return this.columnREGIONID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn OBLASTIDColumn {
                get {
                    return this.columnOBLASTID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NAMEColumn {
                get {
                    return this.columnNAME;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn OBLNAMEColumn {
                get {
                    return this.columnOBLNAME;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public REGIONRow this[int index] {
                get {
                    return ((REGIONRow)(this.Rows[index]));
                }
            }
            
            public event REGIONRowChangeEventHandler REGIONRowChanging;
            
            public event REGIONRowChangeEventHandler REGIONRowChanged;
            
            public event REGIONRowChangeEventHandler REGIONRowDeleting;
            
            public event REGIONRowChangeEventHandler REGIONRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddREGIONRow(REGIONRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public REGIONRow AddREGIONRow(int REGIONID, int OBLASTID, string NAME, string OBLNAME) {
                REGIONRow rowREGIONRow = ((REGIONRow)(this.NewRow()));
                rowREGIONRow.ItemArray = new object[] {
                        REGIONID,
                        OBLASTID,
                        NAME,
                        OBLNAME};
                this.Rows.Add(rowREGIONRow);
                return rowREGIONRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public REGIONRow FindByREGIONID(int REGIONID) {
                return ((REGIONRow)(this.Rows.Find(new object[] {
                            REGIONID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                REGIONDataTable cln = ((REGIONDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new REGIONDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnREGIONID = base.Columns["REGIONID"];
                this.columnOBLASTID = base.Columns["OBLASTID"];
                this.columnNAME = base.Columns["NAME"];
                this.columnOBLNAME = base.Columns["OBLNAME"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnREGIONID = new System.Data.DataColumn("REGIONID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnREGIONID);
                this.columnOBLASTID = new System.Data.DataColumn("OBLASTID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnOBLASTID);
                this.columnNAME = new System.Data.DataColumn("NAME", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNAME);
                this.columnOBLNAME = new System.Data.DataColumn("OBLNAME", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnOBLNAME);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnREGIONID}, true));
                this.columnREGIONID.AllowDBNull = false;
                this.columnREGIONID.Unique = true;
                this.columnNAME.AllowDBNull = false;
                this.columnNAME.MaxLength = 50;
                this.columnOBLNAME.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public REGIONRow NewREGIONRow() {
                return ((REGIONRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new REGIONRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(REGIONRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.REGIONRowChanged != null)) {
                    this.REGIONRowChanged(this, new REGIONRowChangeEvent(((REGIONRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.REGIONRowChanging != null)) {
                    this.REGIONRowChanging(this, new REGIONRowChangeEvent(((REGIONRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.REGIONRowDeleted != null)) {
                    this.REGIONRowDeleted(this, new REGIONRowChangeEvent(((REGIONRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.REGIONRowDeleting != null)) {
                    this.REGIONRowDeleting(this, new REGIONRowChangeEvent(((REGIONRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveREGIONRow(REGIONRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                phmkDataSet ds = new phmkDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "REGIONDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SETTLEMENT_TYPEDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnSETTLEMENTTYPEID;
            
            private System.Data.DataColumn columnDESCR;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SETTLEMENT_TYPEDataTable() {
                this.TableName = "SETTLEMENT_TYPE";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SETTLEMENT_TYPEDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SETTLEMENT_TYPEDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SETTLEMENTTYPEIDColumn {
                get {
                    return this.columnSETTLEMENTTYPEID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DESCRColumn {
                get {
                    return this.columnDESCR;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SETTLEMENT_TYPERow this[int index] {
                get {
                    return ((SETTLEMENT_TYPERow)(this.Rows[index]));
                }
            }
            
            public event SETTLEMENT_TYPERowChangeEventHandler SETTLEMENT_TYPERowChanging;
            
            public event SETTLEMENT_TYPERowChangeEventHandler SETTLEMENT_TYPERowChanged;
            
            public event SETTLEMENT_TYPERowChangeEventHandler SETTLEMENT_TYPERowDeleting;
            
            public event SETTLEMENT_TYPERowChangeEventHandler SETTLEMENT_TYPERowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSETTLEMENT_TYPERow(SETTLEMENT_TYPERow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SETTLEMENT_TYPERow AddSETTLEMENT_TYPERow(int SETTLEMENTTYPEID, string DESCR) {
                SETTLEMENT_TYPERow rowSETTLEMENT_TYPERow = ((SETTLEMENT_TYPERow)(this.NewRow()));
                rowSETTLEMENT_TYPERow.ItemArray = new object[] {
                        SETTLEMENTTYPEID,
                        DESCR};
                this.Rows.Add(rowSETTLEMENT_TYPERow);
                return rowSETTLEMENT_TYPERow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SETTLEMENT_TYPERow FindBySETTLEMENTTYPEID(int SETTLEMENTTYPEID) {
                return ((SETTLEMENT_TYPERow)(this.Rows.Find(new object[] {
                            SETTLEMENTTYPEID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                SETTLEMENT_TYPEDataTable cln = ((SETTLEMENT_TYPEDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new SETTLEMENT_TYPEDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSETTLEMENTTYPEID = base.Columns["SETTLEMENTTYPEID"];
                this.columnDESCR = base.Columns["DESCR"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSETTLEMENTTYPEID = new System.Data.DataColumn("SETTLEMENTTYPEID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSETTLEMENTTYPEID);
                this.columnDESCR = new System.Data.DataColumn("DESCR", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDESCR);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnSETTLEMENTTYPEID}, true));
                this.columnSETTLEMENTTYPEID.AllowDBNull = false;
                this.columnSETTLEMENTTYPEID.Unique = true;
                this.columnDESCR.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SETTLEMENT_TYPERow NewSETTLEMENT_TYPERow() {
                return ((SETTLEMENT_TYPERow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new SETTLEMENT_TYPERow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(SETTLEMENT_TYPERow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SETTLEMENT_TYPERowChanged != null)) {
                    this.SETTLEMENT_TYPERowChanged(this, new SETTLEMENT_TYPERowChangeEvent(((SETTLEMENT_TYPERow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SETTLEMENT_TYPERowChanging != null)) {
                    this.SETTLEMENT_TYPERowChanging(this, new SETTLEMENT_TYPERowChangeEvent(((SETTLEMENT_TYPERow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SETTLEMENT_TYPERowDeleted != null)) {
                    this.SETTLEMENT_TYPERowDeleted(this, new SETTLEMENT_TYPERowChangeEvent(((SETTLEMENT_TYPERow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SETTLEMENT_TYPERowDeleting != null)) {
                    this.SETTLEMENT_TYPERowDeleting(this, new SETTLEMENT_TYPERowChangeEvent(((SETTLEMENT_TYPERow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSETTLEMENT_TYPERow(SETTLEMENT_TYPERow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                phmkDataSet ds = new phmkDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SETTLEMENT_TYPEDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class STREETDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnSTREET_TYPEID;
            
            private System.Data.DataColumn columnNAME;
            
            private System.Data.DataColumn columnSTREETTYPENAME;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STREETDataTable() {
                this.TableName = "STREET";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal STREETDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected STREETDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn STREET_TYPEIDColumn {
                get {
                    return this.columnSTREET_TYPEID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NAMEColumn {
                get {
                    return this.columnNAME;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn STREETTYPENAMEColumn {
                get {
                    return this.columnSTREETTYPENAME;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STREETRow this[int index] {
                get {
                    return ((STREETRow)(this.Rows[index]));
                }
            }
            
            public event STREETRowChangeEventHandler STREETRowChanging;
            
            public event STREETRowChangeEventHandler STREETRowChanged;
            
            public event STREETRowChangeEventHandler STREETRowDeleting;
            
            public event STREETRowChangeEventHandler STREETRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSTREETRow(STREETRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STREETRow AddSTREETRow(int STREET_TYPEID, string NAME, string STREETTYPENAME) {
                STREETRow rowSTREETRow = ((STREETRow)(this.NewRow()));
                rowSTREETRow.ItemArray = new object[] {
                        null,
                        STREET_TYPEID,
                        NAME,
                        STREETTYPENAME};
                this.Rows.Add(rowSTREETRow);
                return rowSTREETRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STREETRow FindByID(int ID) {
                return ((STREETRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                STREETDataTable cln = ((STREETDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new STREETDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnSTREET_TYPEID = base.Columns["STREET_TYPEID"];
                this.columnNAME = base.Columns["NAME"];
                this.columnSTREETTYPENAME = base.Columns["STREETTYPENAME"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnSTREET_TYPEID = new System.Data.DataColumn("STREET_TYPEID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTREET_TYPEID);
                this.columnNAME = new System.Data.DataColumn("NAME", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNAME);
                this.columnSTREETTYPENAME = new System.Data.DataColumn("STREETTYPENAME", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTREETTYPENAME);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AllowDBNull = false;
                this.columnID.Unique = true;
                this.columnSTREET_TYPEID.AllowDBNull = false;
                this.columnNAME.AllowDBNull = false;
                this.columnNAME.MaxLength = 50;
                this.columnSTREETTYPENAME.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STREETRow NewSTREETRow() {
                return ((STREETRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new STREETRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(STREETRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.STREETRowChanged != null)) {
                    this.STREETRowChanged(this, new STREETRowChangeEvent(((STREETRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.STREETRowChanging != null)) {
                    this.STREETRowChanging(this, new STREETRowChangeEvent(((STREETRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.STREETRowDeleted != null)) {
                    this.STREETRowDeleted(this, new STREETRowChangeEvent(((STREETRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.STREETRowDeleting != null)) {
                    this.STREETRowDeleting(this, new STREETRowChangeEvent(((STREETRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSTREETRow(STREETRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                phmkDataSet ds = new phmkDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "STREETDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class STREET_TYPEDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnSTREETTYPEID;
            
            private System.Data.DataColumn columnSTREETTYPENAME;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STREET_TYPEDataTable() {
                this.TableName = "STREET_TYPE";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal STREET_TYPEDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected STREET_TYPEDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn STREETTYPEIDColumn {
                get {
                    return this.columnSTREETTYPEID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn STREETTYPENAMEColumn {
                get {
                    return this.columnSTREETTYPENAME;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STREET_TYPERow this[int index] {
                get {
                    return ((STREET_TYPERow)(this.Rows[index]));
                }
            }
            
            public event STREET_TYPERowChangeEventHandler STREET_TYPERowChanging;
            
            public event STREET_TYPERowChangeEventHandler STREET_TYPERowChanged;
            
            public event STREET_TYPERowChangeEventHandler STREET_TYPERowDeleting;
            
            public event STREET_TYPERowChangeEventHandler STREET_TYPERowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSTREET_TYPERow(STREET_TYPERow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STREET_TYPERow AddSTREET_TYPERow(int STREETTYPEID, string STREETTYPENAME) {
                STREET_TYPERow rowSTREET_TYPERow = ((STREET_TYPERow)(this.NewRow()));
                rowSTREET_TYPERow.ItemArray = new object[] {
                        STREETTYPEID,
                        STREETTYPENAME};
                this.Rows.Add(rowSTREET_TYPERow);
                return rowSTREET_TYPERow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STREET_TYPERow FindBySTREETTYPEID(int STREETTYPEID) {
                return ((STREET_TYPERow)(this.Rows.Find(new object[] {
                            STREETTYPEID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                STREET_TYPEDataTable cln = ((STREET_TYPEDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new STREET_TYPEDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSTREETTYPEID = base.Columns["STREETTYPEID"];
                this.columnSTREETTYPENAME = base.Columns["STREETTYPENAME"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSTREETTYPEID = new System.Data.DataColumn("STREETTYPEID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTREETTYPEID);
                this.columnSTREETTYPENAME = new System.Data.DataColumn("STREETTYPENAME", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTREETTYPENAME);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnSTREETTYPEID}, true));
                this.columnSTREETTYPEID.AllowDBNull = false;
                this.columnSTREETTYPEID.Unique = true;
                this.columnSTREETTYPENAME.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STREET_TYPERow NewSTREET_TYPERow() {
                return ((STREET_TYPERow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new STREET_TYPERow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(STREET_TYPERow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.STREET_TYPERowChanged != null)) {
                    this.STREET_TYPERowChanged(this, new STREET_TYPERowChangeEvent(((STREET_TYPERow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.STREET_TYPERowChanging != null)) {
                    this.STREET_TYPERowChanging(this, new STREET_TYPERowChangeEvent(((STREET_TYPERow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.STREET_TYPERowDeleted != null)) {
                    this.STREET_TYPERowDeleted(this, new STREET_TYPERowChangeEvent(((STREET_TYPERow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.STREET_TYPERowDeleting != null)) {
                    this.STREET_TYPERowDeleting(this, new STREET_TYPERowChangeEvent(((STREET_TYPERow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSTREET_TYPERow(STREET_TYPERow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                phmkDataSet ds = new phmkDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "STREET_TYPEDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class POPULATED_POINTSDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnREGIONID;
            
            private System.Data.DataColumn columnSETTLEMENTTYPEID;
            
            private System.Data.DataColumn columnNAME;
            
            private System.Data.DataColumn columnDESCR;
            
            private System.Data.DataColumn columnREGIONNAME;
            
            private System.Data.DataColumn columnSETTLEMENTTYPENAME;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public POPULATED_POINTSDataTable() {
                this.TableName = "POPULATED_POINTS";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal POPULATED_POINTSDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected POPULATED_POINTSDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn REGIONIDColumn {
                get {
                    return this.columnREGIONID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SETTLEMENTTYPEIDColumn {
                get {
                    return this.columnSETTLEMENTTYPEID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NAMEColumn {
                get {
                    return this.columnNAME;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DESCRColumn {
                get {
                    return this.columnDESCR;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn REGIONNAMEColumn {
                get {
                    return this.columnREGIONNAME;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SETTLEMENTTYPENAMEColumn {
                get {
                    return this.columnSETTLEMENTTYPENAME;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public POPULATED_POINTSRow this[int index] {
                get {
                    return ((POPULATED_POINTSRow)(this.Rows[index]));
                }
            }
            
            public event POPULATED_POINTSRowChangeEventHandler POPULATED_POINTSRowChanging;
            
            public event POPULATED_POINTSRowChangeEventHandler POPULATED_POINTSRowChanged;
            
            public event POPULATED_POINTSRowChangeEventHandler POPULATED_POINTSRowDeleting;
            
            public event POPULATED_POINTSRowChangeEventHandler POPULATED_POINTSRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPOPULATED_POINTSRow(POPULATED_POINTSRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public POPULATED_POINTSRow AddPOPULATED_POINTSRow(int ID, int REGIONID, int SETTLEMENTTYPEID, string NAME, string DESCR, string REGIONNAME, string SETTLEMENTTYPENAME) {
                POPULATED_POINTSRow rowPOPULATED_POINTSRow = ((POPULATED_POINTSRow)(this.NewRow()));
                rowPOPULATED_POINTSRow.ItemArray = new object[] {
                        ID,
                        REGIONID,
                        SETTLEMENTTYPEID,
                        NAME,
                        DESCR,
                        REGIONNAME,
                        SETTLEMENTTYPENAME};
                this.Rows.Add(rowPOPULATED_POINTSRow);
                return rowPOPULATED_POINTSRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                POPULATED_POINTSDataTable cln = ((POPULATED_POINTSDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new POPULATED_POINTSDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnREGIONID = base.Columns["REGIONID"];
                this.columnSETTLEMENTTYPEID = base.Columns["SETTLEMENTTYPEID"];
                this.columnNAME = base.Columns["NAME"];
                this.columnDESCR = base.Columns["DESCR"];
                this.columnREGIONNAME = base.Columns["REGIONNAME"];
                this.columnSETTLEMENTTYPENAME = base.Columns["SETTLEMENTTYPENAME"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnREGIONID = new System.Data.DataColumn("REGIONID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnREGIONID);
                this.columnSETTLEMENTTYPEID = new System.Data.DataColumn("SETTLEMENTTYPEID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSETTLEMENTTYPEID);
                this.columnNAME = new System.Data.DataColumn("NAME", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNAME);
                this.columnDESCR = new System.Data.DataColumn("DESCR", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDESCR);
                this.columnREGIONNAME = new System.Data.DataColumn("REGIONNAME", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnREGIONNAME);
                this.columnSETTLEMENTTYPENAME = new System.Data.DataColumn("SETTLEMENTTYPENAME", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSETTLEMENTTYPENAME);
                this.columnNAME.MaxLength = 30;
                this.columnREGIONNAME.MaxLength = 50;
                this.columnSETTLEMENTTYPENAME.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public POPULATED_POINTSRow NewPOPULATED_POINTSRow() {
                return ((POPULATED_POINTSRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new POPULATED_POINTSRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(POPULATED_POINTSRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.POPULATED_POINTSRowChanged != null)) {
                    this.POPULATED_POINTSRowChanged(this, new POPULATED_POINTSRowChangeEvent(((POPULATED_POINTSRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.POPULATED_POINTSRowChanging != null)) {
                    this.POPULATED_POINTSRowChanging(this, new POPULATED_POINTSRowChangeEvent(((POPULATED_POINTSRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.POPULATED_POINTSRowDeleted != null)) {
                    this.POPULATED_POINTSRowDeleted(this, new POPULATED_POINTSRowChangeEvent(((POPULATED_POINTSRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.POPULATED_POINTSRowDeleting != null)) {
                    this.POPULATED_POINTSRowDeleting(this, new POPULATED_POINTSRowChangeEvent(((POPULATED_POINTSRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePOPULATED_POINTSRow(POPULATED_POINTSRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                phmkDataSet ds = new phmkDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "POPULATED_POINTSDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class QUESTION_TYPESDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnNAME;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QUESTION_TYPESDataTable() {
                this.TableName = "QUESTION_TYPES";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal QUESTION_TYPESDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected QUESTION_TYPESDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NAMEColumn {
                get {
                    return this.columnNAME;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QUESTION_TYPESRow this[int index] {
                get {
                    return ((QUESTION_TYPESRow)(this.Rows[index]));
                }
            }
            
            public event QUESTION_TYPESRowChangeEventHandler QUESTION_TYPESRowChanging;
            
            public event QUESTION_TYPESRowChangeEventHandler QUESTION_TYPESRowChanged;
            
            public event QUESTION_TYPESRowChangeEventHandler QUESTION_TYPESRowDeleting;
            
            public event QUESTION_TYPESRowChangeEventHandler QUESTION_TYPESRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddQUESTION_TYPESRow(QUESTION_TYPESRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QUESTION_TYPESRow AddQUESTION_TYPESRow(int ID, string NAME) {
                QUESTION_TYPESRow rowQUESTION_TYPESRow = ((QUESTION_TYPESRow)(this.NewRow()));
                rowQUESTION_TYPESRow.ItemArray = new object[] {
                        ID,
                        NAME};
                this.Rows.Add(rowQUESTION_TYPESRow);
                return rowQUESTION_TYPESRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QUESTION_TYPESRow FindByID(int ID) {
                return ((QUESTION_TYPESRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                QUESTION_TYPESDataTable cln = ((QUESTION_TYPESDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new QUESTION_TYPESDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnNAME = base.Columns["NAME"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnNAME = new System.Data.DataColumn("NAME", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNAME);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AllowDBNull = false;
                this.columnID.Unique = true;
                this.columnNAME.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QUESTION_TYPESRow NewQUESTION_TYPESRow() {
                return ((QUESTION_TYPESRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new QUESTION_TYPESRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(QUESTION_TYPESRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.QUESTION_TYPESRowChanged != null)) {
                    this.QUESTION_TYPESRowChanged(this, new QUESTION_TYPESRowChangeEvent(((QUESTION_TYPESRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.QUESTION_TYPESRowChanging != null)) {
                    this.QUESTION_TYPESRowChanging(this, new QUESTION_TYPESRowChangeEvent(((QUESTION_TYPESRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.QUESTION_TYPESRowDeleted != null)) {
                    this.QUESTION_TYPESRowDeleted(this, new QUESTION_TYPESRowChangeEvent(((QUESTION_TYPESRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.QUESTION_TYPESRowDeleting != null)) {
                    this.QUESTION_TYPESRowDeleting(this, new QUESTION_TYPESRowChangeEvent(((QUESTION_TYPESRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveQUESTION_TYPESRow(QUESTION_TYPESRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                phmkDataSet ds = new phmkDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "QUESTION_TYPESDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ANSWERSDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnQUESTIONID;
            
            private System.Data.DataColumn columnANSWER;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ANSWERSDataTable() {
                this.TableName = "ANSWERS";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ANSWERSDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ANSWERSDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn QUESTIONIDColumn {
                get {
                    return this.columnQUESTIONID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ANSWERColumn {
                get {
                    return this.columnANSWER;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ANSWERSRow this[int index] {
                get {
                    return ((ANSWERSRow)(this.Rows[index]));
                }
            }
            
            public event ANSWERSRowChangeEventHandler ANSWERSRowChanging;
            
            public event ANSWERSRowChangeEventHandler ANSWERSRowChanged;
            
            public event ANSWERSRowChangeEventHandler ANSWERSRowDeleting;
            
            public event ANSWERSRowChangeEventHandler ANSWERSRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddANSWERSRow(ANSWERSRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ANSWERSRow AddANSWERSRow(int ID, int QUESTIONID, string ANSWER) {
                ANSWERSRow rowANSWERSRow = ((ANSWERSRow)(this.NewRow()));
                rowANSWERSRow.ItemArray = new object[] {
                        ID,
                        QUESTIONID,
                        ANSWER};
                this.Rows.Add(rowANSWERSRow);
                return rowANSWERSRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ANSWERSRow FindByIDQUESTIONID(int ID, int QUESTIONID) {
                return ((ANSWERSRow)(this.Rows.Find(new object[] {
                            ID,
                            QUESTIONID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ANSWERSDataTable cln = ((ANSWERSDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ANSWERSDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnQUESTIONID = base.Columns["QUESTIONID"];
                this.columnANSWER = base.Columns["ANSWER"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnQUESTIONID = new System.Data.DataColumn("QUESTIONID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnQUESTIONID);
                this.columnANSWER = new System.Data.DataColumn("ANSWER", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnANSWER);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnID,
                                this.columnQUESTIONID}, true));
                this.columnID.AllowDBNull = false;
                this.columnQUESTIONID.AllowDBNull = false;
                this.columnANSWER.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ANSWERSRow NewANSWERSRow() {
                return ((ANSWERSRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ANSWERSRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ANSWERSRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ANSWERSRowChanged != null)) {
                    this.ANSWERSRowChanged(this, new ANSWERSRowChangeEvent(((ANSWERSRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ANSWERSRowChanging != null)) {
                    this.ANSWERSRowChanging(this, new ANSWERSRowChangeEvent(((ANSWERSRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ANSWERSRowDeleted != null)) {
                    this.ANSWERSRowDeleted(this, new ANSWERSRowChangeEvent(((ANSWERSRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ANSWERSRowDeleting != null)) {
                    this.ANSWERSRowDeleting(this, new ANSWERSRowChangeEvent(((ANSWERSRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveANSWERSRow(ANSWERSRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                phmkDataSet ds = new phmkDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ANSWERSDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class QUESTIONSDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnQUESTIONID;
            
            private System.Data.DataColumn columnQUESTIONNAME;
            
            private System.Data.DataColumn columnQUESTIONTYPE;
            
            private System.Data.DataColumn columnQUESTIONISNULL;
            
            private System.Data.DataColumn columnISDEFAULT;
            
            private System.Data.DataColumn columnQUESTIONTYPENAME;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QUESTIONSDataTable() {
                this.TableName = "QUESTIONS";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal QUESTIONSDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected QUESTIONSDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn QUESTIONIDColumn {
                get {
                    return this.columnQUESTIONID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn QUESTIONNAMEColumn {
                get {
                    return this.columnQUESTIONNAME;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn QUESTIONTYPEColumn {
                get {
                    return this.columnQUESTIONTYPE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn QUESTIONISNULLColumn {
                get {
                    return this.columnQUESTIONISNULL;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ISDEFAULTColumn {
                get {
                    return this.columnISDEFAULT;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn QUESTIONTYPENAMEColumn {
                get {
                    return this.columnQUESTIONTYPENAME;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QUESTIONSRow this[int index] {
                get {
                    return ((QUESTIONSRow)(this.Rows[index]));
                }
            }
            
            public event QUESTIONSRowChangeEventHandler QUESTIONSRowChanging;
            
            public event QUESTIONSRowChangeEventHandler QUESTIONSRowChanged;
            
            public event QUESTIONSRowChangeEventHandler QUESTIONSRowDeleting;
            
            public event QUESTIONSRowChangeEventHandler QUESTIONSRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddQUESTIONSRow(QUESTIONSRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QUESTIONSRow AddQUESTIONSRow(int QUESTIONID, string QUESTIONNAME, int QUESTIONTYPE, bool QUESTIONISNULL, bool ISDEFAULT, string QUESTIONTYPENAME) {
                QUESTIONSRow rowQUESTIONSRow = ((QUESTIONSRow)(this.NewRow()));
                rowQUESTIONSRow.ItemArray = new object[] {
                        QUESTIONID,
                        QUESTIONNAME,
                        QUESTIONTYPE,
                        QUESTIONISNULL,
                        ISDEFAULT,
                        QUESTIONTYPENAME};
                this.Rows.Add(rowQUESTIONSRow);
                return rowQUESTIONSRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QUESTIONSRow FindByQUESTIONID(int QUESTIONID) {
                return ((QUESTIONSRow)(this.Rows.Find(new object[] {
                            QUESTIONID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                QUESTIONSDataTable cln = ((QUESTIONSDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new QUESTIONSDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnQUESTIONID = base.Columns["QUESTIONID"];
                this.columnQUESTIONNAME = base.Columns["QUESTIONNAME"];
                this.columnQUESTIONTYPE = base.Columns["QUESTIONTYPE"];
                this.columnQUESTIONISNULL = base.Columns["QUESTIONISNULL"];
                this.columnISDEFAULT = base.Columns["ISDEFAULT"];
                this.columnQUESTIONTYPENAME = base.Columns["QUESTIONTYPENAME"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnQUESTIONID = new System.Data.DataColumn("QUESTIONID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnQUESTIONID);
                this.columnQUESTIONNAME = new System.Data.DataColumn("QUESTIONNAME", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnQUESTIONNAME);
                this.columnQUESTIONTYPE = new System.Data.DataColumn("QUESTIONTYPE", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnQUESTIONTYPE);
                this.columnQUESTIONISNULL = new System.Data.DataColumn("QUESTIONISNULL", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnQUESTIONISNULL);
                this.columnISDEFAULT = new System.Data.DataColumn("ISDEFAULT", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnISDEFAULT);
                this.columnQUESTIONTYPENAME = new System.Data.DataColumn("QUESTIONTYPENAME", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnQUESTIONTYPENAME);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnQUESTIONID}, true));
                this.columnQUESTIONID.AllowDBNull = false;
                this.columnQUESTIONID.Unique = true;
                this.columnQUESTIONNAME.AllowDBNull = false;
                this.columnQUESTIONNAME.MaxLength = 400;
                this.columnQUESTIONTYPE.AllowDBNull = false;
                this.columnQUESTIONISNULL.AllowDBNull = false;
                this.columnISDEFAULT.AllowDBNull = false;
                this.columnQUESTIONTYPENAME.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QUESTIONSRow NewQUESTIONSRow() {
                return ((QUESTIONSRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new QUESTIONSRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(QUESTIONSRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.QUESTIONSRowChanged != null)) {
                    this.QUESTIONSRowChanged(this, new QUESTIONSRowChangeEvent(((QUESTIONSRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.QUESTIONSRowChanging != null)) {
                    this.QUESTIONSRowChanging(this, new QUESTIONSRowChangeEvent(((QUESTIONSRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.QUESTIONSRowDeleted != null)) {
                    this.QUESTIONSRowDeleted(this, new QUESTIONSRowChangeEvent(((QUESTIONSRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.QUESTIONSRowDeleting != null)) {
                    this.QUESTIONSRowDeleting(this, new QUESTIONSRowChangeEvent(((QUESTIONSRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveQUESTIONSRow(QUESTIONSRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                phmkDataSet ds = new phmkDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "QUESTIONSDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PRIZESDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnNAME;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PRIZESDataTable() {
                this.TableName = "PRIZES";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PRIZESDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PRIZESDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NAMEColumn {
                get {
                    return this.columnNAME;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PRIZESRow this[int index] {
                get {
                    return ((PRIZESRow)(this.Rows[index]));
                }
            }
            
            public event PRIZESRowChangeEventHandler PRIZESRowChanging;
            
            public event PRIZESRowChangeEventHandler PRIZESRowChanged;
            
            public event PRIZESRowChangeEventHandler PRIZESRowDeleting;
            
            public event PRIZESRowChangeEventHandler PRIZESRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPRIZESRow(PRIZESRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PRIZESRow AddPRIZESRow(int ID, string NAME) {
                PRIZESRow rowPRIZESRow = ((PRIZESRow)(this.NewRow()));
                rowPRIZESRow.ItemArray = new object[] {
                        ID,
                        NAME};
                this.Rows.Add(rowPRIZESRow);
                return rowPRIZESRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PRIZESRow FindByID(int ID) {
                return ((PRIZESRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                PRIZESDataTable cln = ((PRIZESDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new PRIZESDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnNAME = base.Columns["NAME"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnNAME = new System.Data.DataColumn("NAME", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNAME);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AllowDBNull = false;
                this.columnID.Unique = true;
                this.columnNAME.AllowDBNull = false;
                this.columnNAME.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PRIZESRow NewPRIZESRow() {
                return ((PRIZESRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new PRIZESRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(PRIZESRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PRIZESRowChanged != null)) {
                    this.PRIZESRowChanged(this, new PRIZESRowChangeEvent(((PRIZESRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PRIZESRowChanging != null)) {
                    this.PRIZESRowChanging(this, new PRIZESRowChangeEvent(((PRIZESRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PRIZESRowDeleted != null)) {
                    this.PRIZESRowDeleted(this, new PRIZESRowChangeEvent(((PRIZESRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PRIZESRowDeleting != null)) {
                    this.PRIZESRowDeleting(this, new PRIZESRowChangeEvent(((PRIZESRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePRIZESRow(PRIZESRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                phmkDataSet ds = new phmkDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PRIZESDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MEDIA_CLUSTERDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnNAME;
            
            private System.Data.DataColumn columnDESCR;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MEDIA_CLUSTERDataTable() {
                this.TableName = "MEDIA_CLUSTER";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MEDIA_CLUSTERDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MEDIA_CLUSTERDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NAMEColumn {
                get {
                    return this.columnNAME;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DESCRColumn {
                get {
                    return this.columnDESCR;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MEDIA_CLUSTERRow this[int index] {
                get {
                    return ((MEDIA_CLUSTERRow)(this.Rows[index]));
                }
            }
            
            public event MEDIA_CLUSTERRowChangeEventHandler MEDIA_CLUSTERRowChanging;
            
            public event MEDIA_CLUSTERRowChangeEventHandler MEDIA_CLUSTERRowChanged;
            
            public event MEDIA_CLUSTERRowChangeEventHandler MEDIA_CLUSTERRowDeleting;
            
            public event MEDIA_CLUSTERRowChangeEventHandler MEDIA_CLUSTERRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMEDIA_CLUSTERRow(MEDIA_CLUSTERRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MEDIA_CLUSTERRow AddMEDIA_CLUSTERRow(int ID, string NAME, string DESCR) {
                MEDIA_CLUSTERRow rowMEDIA_CLUSTERRow = ((MEDIA_CLUSTERRow)(this.NewRow()));
                rowMEDIA_CLUSTERRow.ItemArray = new object[] {
                        ID,
                        NAME,
                        DESCR};
                this.Rows.Add(rowMEDIA_CLUSTERRow);
                return rowMEDIA_CLUSTERRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                MEDIA_CLUSTERDataTable cln = ((MEDIA_CLUSTERDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new MEDIA_CLUSTERDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnNAME = base.Columns["NAME"];
                this.columnDESCR = base.Columns["DESCR"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnNAME = new System.Data.DataColumn("NAME", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNAME);
                this.columnDESCR = new System.Data.DataColumn("DESCR", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDESCR);
                this.columnNAME.AllowDBNull = false;
                this.columnNAME.MaxLength = 30;
                this.columnDESCR.MaxLength = 100;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MEDIA_CLUSTERRow NewMEDIA_CLUSTERRow() {
                return ((MEDIA_CLUSTERRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new MEDIA_CLUSTERRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(MEDIA_CLUSTERRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MEDIA_CLUSTERRowChanged != null)) {
                    this.MEDIA_CLUSTERRowChanged(this, new MEDIA_CLUSTERRowChangeEvent(((MEDIA_CLUSTERRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MEDIA_CLUSTERRowChanging != null)) {
                    this.MEDIA_CLUSTERRowChanging(this, new MEDIA_CLUSTERRowChangeEvent(((MEDIA_CLUSTERRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MEDIA_CLUSTERRowDeleted != null)) {
                    this.MEDIA_CLUSTERRowDeleted(this, new MEDIA_CLUSTERRowChangeEvent(((MEDIA_CLUSTERRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MEDIA_CLUSTERRowDeleting != null)) {
                    this.MEDIA_CLUSTERRowDeleting(this, new MEDIA_CLUSTERRowChangeEvent(((MEDIA_CLUSTERRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMEDIA_CLUSTERRow(MEDIA_CLUSTERRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                phmkDataSet ds = new phmkDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MEDIA_CLUSTERDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MEDIADataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnNAME;
            
            private System.Data.DataColumn columnMEDIA_CLUSTERID;
            
            private System.Data.DataColumn columnMEDIA_CLUSTERNAME;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MEDIADataTable() {
                this.TableName = "MEDIA";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MEDIADataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MEDIADataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NAMEColumn {
                get {
                    return this.columnNAME;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MEDIA_CLUSTERIDColumn {
                get {
                    return this.columnMEDIA_CLUSTERID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MEDIA_CLUSTERNAMEColumn {
                get {
                    return this.columnMEDIA_CLUSTERNAME;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MEDIARow this[int index] {
                get {
                    return ((MEDIARow)(this.Rows[index]));
                }
            }
            
            public event MEDIARowChangeEventHandler MEDIARowChanging;
            
            public event MEDIARowChangeEventHandler MEDIARowChanged;
            
            public event MEDIARowChangeEventHandler MEDIARowDeleting;
            
            public event MEDIARowChangeEventHandler MEDIARowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMEDIARow(MEDIARow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MEDIARow AddMEDIARow(int ID, string NAME, int MEDIA_CLUSTERID, string MEDIA_CLUSTERNAME) {
                MEDIARow rowMEDIARow = ((MEDIARow)(this.NewRow()));
                rowMEDIARow.ItemArray = new object[] {
                        ID,
                        NAME,
                        MEDIA_CLUSTERID,
                        MEDIA_CLUSTERNAME};
                this.Rows.Add(rowMEDIARow);
                return rowMEDIARow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                MEDIADataTable cln = ((MEDIADataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new MEDIADataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnNAME = base.Columns["NAME"];
                this.columnMEDIA_CLUSTERID = base.Columns["MEDIA_CLUSTERID"];
                this.columnMEDIA_CLUSTERNAME = base.Columns["MEDIA_CLUSTERNAME"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnNAME = new System.Data.DataColumn("NAME", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNAME);
                this.columnMEDIA_CLUSTERID = new System.Data.DataColumn("MEDIA_CLUSTERID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMEDIA_CLUSTERID);
                this.columnMEDIA_CLUSTERNAME = new System.Data.DataColumn("MEDIA_CLUSTERNAME", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMEDIA_CLUSTERNAME);
                this.columnNAME.MaxLength = 100;
                this.columnMEDIA_CLUSTERID.AllowDBNull = false;
                this.columnMEDIA_CLUSTERNAME.MaxLength = 30;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MEDIARow NewMEDIARow() {
                return ((MEDIARow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new MEDIARow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(MEDIARow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MEDIARowChanged != null)) {
                    this.MEDIARowChanged(this, new MEDIARowChangeEvent(((MEDIARow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MEDIARowChanging != null)) {
                    this.MEDIARowChanging(this, new MEDIARowChangeEvent(((MEDIARow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MEDIARowDeleted != null)) {
                    this.MEDIARowDeleted(this, new MEDIARowChangeEvent(((MEDIARow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MEDIARowDeleting != null)) {
                    this.MEDIARowDeleting(this, new MEDIARowChangeEvent(((MEDIARow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMEDIARow(MEDIARow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                phmkDataSet ds = new phmkDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MEDIADataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ADDRESS_BLOCKINGDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnNAME;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ADDRESS_BLOCKINGDataTable() {
                this.TableName = "ADDRESS_BLOCKING";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ADDRESS_BLOCKINGDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ADDRESS_BLOCKINGDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NAMEColumn {
                get {
                    return this.columnNAME;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ADDRESS_BLOCKINGRow this[int index] {
                get {
                    return ((ADDRESS_BLOCKINGRow)(this.Rows[index]));
                }
            }
            
            public event ADDRESS_BLOCKINGRowChangeEventHandler ADDRESS_BLOCKINGRowChanging;
            
            public event ADDRESS_BLOCKINGRowChangeEventHandler ADDRESS_BLOCKINGRowChanged;
            
            public event ADDRESS_BLOCKINGRowChangeEventHandler ADDRESS_BLOCKINGRowDeleting;
            
            public event ADDRESS_BLOCKINGRowChangeEventHandler ADDRESS_BLOCKINGRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddADDRESS_BLOCKINGRow(ADDRESS_BLOCKINGRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ADDRESS_BLOCKINGRow AddADDRESS_BLOCKINGRow(int ID, string NAME) {
                ADDRESS_BLOCKINGRow rowADDRESS_BLOCKINGRow = ((ADDRESS_BLOCKINGRow)(this.NewRow()));
                rowADDRESS_BLOCKINGRow.ItemArray = new object[] {
                        ID,
                        NAME};
                this.Rows.Add(rowADDRESS_BLOCKINGRow);
                return rowADDRESS_BLOCKINGRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ADDRESS_BLOCKINGRow FindByID(int ID) {
                return ((ADDRESS_BLOCKINGRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ADDRESS_BLOCKINGDataTable cln = ((ADDRESS_BLOCKINGDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ADDRESS_BLOCKINGDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnNAME = base.Columns["NAME"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnNAME = new System.Data.DataColumn("NAME", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNAME);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AllowDBNull = false;
                this.columnID.Unique = true;
                this.columnNAME.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ADDRESS_BLOCKINGRow NewADDRESS_BLOCKINGRow() {
                return ((ADDRESS_BLOCKINGRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ADDRESS_BLOCKINGRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ADDRESS_BLOCKINGRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ADDRESS_BLOCKINGRowChanged != null)) {
                    this.ADDRESS_BLOCKINGRowChanged(this, new ADDRESS_BLOCKINGRowChangeEvent(((ADDRESS_BLOCKINGRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ADDRESS_BLOCKINGRowChanging != null)) {
                    this.ADDRESS_BLOCKINGRowChanging(this, new ADDRESS_BLOCKINGRowChangeEvent(((ADDRESS_BLOCKINGRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ADDRESS_BLOCKINGRowDeleted != null)) {
                    this.ADDRESS_BLOCKINGRowDeleted(this, new ADDRESS_BLOCKINGRowChangeEvent(((ADDRESS_BLOCKINGRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ADDRESS_BLOCKINGRowDeleting != null)) {
                    this.ADDRESS_BLOCKINGRowDeleting(this, new ADDRESS_BLOCKINGRowChangeEvent(((ADDRESS_BLOCKINGRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveADDRESS_BLOCKINGRow(ADDRESS_BLOCKINGRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                phmkDataSet ds = new phmkDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ADDRESS_BLOCKINGDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class EMAIL_BLOCKINGDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnNAME;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EMAIL_BLOCKINGDataTable() {
                this.TableName = "EMAIL_BLOCKING";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EMAIL_BLOCKINGDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected EMAIL_BLOCKINGDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NAMEColumn {
                get {
                    return this.columnNAME;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EMAIL_BLOCKINGRow this[int index] {
                get {
                    return ((EMAIL_BLOCKINGRow)(this.Rows[index]));
                }
            }
            
            public event EMAIL_BLOCKINGRowChangeEventHandler EMAIL_BLOCKINGRowChanging;
            
            public event EMAIL_BLOCKINGRowChangeEventHandler EMAIL_BLOCKINGRowChanged;
            
            public event EMAIL_BLOCKINGRowChangeEventHandler EMAIL_BLOCKINGRowDeleting;
            
            public event EMAIL_BLOCKINGRowChangeEventHandler EMAIL_BLOCKINGRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddEMAIL_BLOCKINGRow(EMAIL_BLOCKINGRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EMAIL_BLOCKINGRow AddEMAIL_BLOCKINGRow(int ID, string NAME) {
                EMAIL_BLOCKINGRow rowEMAIL_BLOCKINGRow = ((EMAIL_BLOCKINGRow)(this.NewRow()));
                rowEMAIL_BLOCKINGRow.ItemArray = new object[] {
                        ID,
                        NAME};
                this.Rows.Add(rowEMAIL_BLOCKINGRow);
                return rowEMAIL_BLOCKINGRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EMAIL_BLOCKINGRow FindByID(int ID) {
                return ((EMAIL_BLOCKINGRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                EMAIL_BLOCKINGDataTable cln = ((EMAIL_BLOCKINGDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new EMAIL_BLOCKINGDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnNAME = base.Columns["NAME"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnNAME = new System.Data.DataColumn("NAME", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNAME);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AllowDBNull = false;
                this.columnID.Unique = true;
                this.columnNAME.AllowDBNull = false;
                this.columnNAME.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EMAIL_BLOCKINGRow NewEMAIL_BLOCKINGRow() {
                return ((EMAIL_BLOCKINGRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new EMAIL_BLOCKINGRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(EMAIL_BLOCKINGRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EMAIL_BLOCKINGRowChanged != null)) {
                    this.EMAIL_BLOCKINGRowChanged(this, new EMAIL_BLOCKINGRowChangeEvent(((EMAIL_BLOCKINGRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EMAIL_BLOCKINGRowChanging != null)) {
                    this.EMAIL_BLOCKINGRowChanging(this, new EMAIL_BLOCKINGRowChangeEvent(((EMAIL_BLOCKINGRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EMAIL_BLOCKINGRowDeleted != null)) {
                    this.EMAIL_BLOCKINGRowDeleted(this, new EMAIL_BLOCKINGRowChangeEvent(((EMAIL_BLOCKINGRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EMAIL_BLOCKINGRowDeleting != null)) {
                    this.EMAIL_BLOCKINGRowDeleting(this, new EMAIL_BLOCKINGRowChangeEvent(((EMAIL_BLOCKINGRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveEMAIL_BLOCKINGRow(EMAIL_BLOCKINGRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                phmkDataSet ds = new phmkDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "EMAIL_BLOCKINGDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PHONE_BLOCKINGDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnNAME;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PHONE_BLOCKINGDataTable() {
                this.TableName = "PHONE_BLOCKING";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PHONE_BLOCKINGDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PHONE_BLOCKINGDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NAMEColumn {
                get {
                    return this.columnNAME;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PHONE_BLOCKINGRow this[int index] {
                get {
                    return ((PHONE_BLOCKINGRow)(this.Rows[index]));
                }
            }
            
            public event PHONE_BLOCKINGRowChangeEventHandler PHONE_BLOCKINGRowChanging;
            
            public event PHONE_BLOCKINGRowChangeEventHandler PHONE_BLOCKINGRowChanged;
            
            public event PHONE_BLOCKINGRowChangeEventHandler PHONE_BLOCKINGRowDeleting;
            
            public event PHONE_BLOCKINGRowChangeEventHandler PHONE_BLOCKINGRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPHONE_BLOCKINGRow(PHONE_BLOCKINGRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PHONE_BLOCKINGRow AddPHONE_BLOCKINGRow(int ID, string NAME) {
                PHONE_BLOCKINGRow rowPHONE_BLOCKINGRow = ((PHONE_BLOCKINGRow)(this.NewRow()));
                rowPHONE_BLOCKINGRow.ItemArray = new object[] {
                        ID,
                        NAME};
                this.Rows.Add(rowPHONE_BLOCKINGRow);
                return rowPHONE_BLOCKINGRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PHONE_BLOCKINGRow FindByID(int ID) {
                return ((PHONE_BLOCKINGRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                PHONE_BLOCKINGDataTable cln = ((PHONE_BLOCKINGDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new PHONE_BLOCKINGDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnNAME = base.Columns["NAME"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnNAME = new System.Data.DataColumn("NAME", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNAME);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AllowDBNull = false;
                this.columnID.Unique = true;
                this.columnNAME.AllowDBNull = false;
                this.columnNAME.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PHONE_BLOCKINGRow NewPHONE_BLOCKINGRow() {
                return ((PHONE_BLOCKINGRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new PHONE_BLOCKINGRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(PHONE_BLOCKINGRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PHONE_BLOCKINGRowChanged != null)) {
                    this.PHONE_BLOCKINGRowChanged(this, new PHONE_BLOCKINGRowChangeEvent(((PHONE_BLOCKINGRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PHONE_BLOCKINGRowChanging != null)) {
                    this.PHONE_BLOCKINGRowChanging(this, new PHONE_BLOCKINGRowChangeEvent(((PHONE_BLOCKINGRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PHONE_BLOCKINGRowDeleted != null)) {
                    this.PHONE_BLOCKINGRowDeleted(this, new PHONE_BLOCKINGRowChangeEvent(((PHONE_BLOCKINGRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PHONE_BLOCKINGRowDeleting != null)) {
                    this.PHONE_BLOCKINGRowDeleting(this, new PHONE_BLOCKINGRowChangeEvent(((PHONE_BLOCKINGRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePHONE_BLOCKINGRow(PHONE_BLOCKINGRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                phmkDataSet ds = new phmkDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PHONE_BLOCKINGDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MOBILE_PHONE_BLOCKINGDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnNAME;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MOBILE_PHONE_BLOCKINGDataTable() {
                this.TableName = "MOBILE_PHONE_BLOCKING";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MOBILE_PHONE_BLOCKINGDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MOBILE_PHONE_BLOCKINGDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NAMEColumn {
                get {
                    return this.columnNAME;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MOBILE_PHONE_BLOCKINGRow this[int index] {
                get {
                    return ((MOBILE_PHONE_BLOCKINGRow)(this.Rows[index]));
                }
            }
            
            public event MOBILE_PHONE_BLOCKINGRowChangeEventHandler MOBILE_PHONE_BLOCKINGRowChanging;
            
            public event MOBILE_PHONE_BLOCKINGRowChangeEventHandler MOBILE_PHONE_BLOCKINGRowChanged;
            
            public event MOBILE_PHONE_BLOCKINGRowChangeEventHandler MOBILE_PHONE_BLOCKINGRowDeleting;
            
            public event MOBILE_PHONE_BLOCKINGRowChangeEventHandler MOBILE_PHONE_BLOCKINGRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMOBILE_PHONE_BLOCKINGRow(MOBILE_PHONE_BLOCKINGRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MOBILE_PHONE_BLOCKINGRow AddMOBILE_PHONE_BLOCKINGRow(int ID, string NAME) {
                MOBILE_PHONE_BLOCKINGRow rowMOBILE_PHONE_BLOCKINGRow = ((MOBILE_PHONE_BLOCKINGRow)(this.NewRow()));
                rowMOBILE_PHONE_BLOCKINGRow.ItemArray = new object[] {
                        ID,
                        NAME};
                this.Rows.Add(rowMOBILE_PHONE_BLOCKINGRow);
                return rowMOBILE_PHONE_BLOCKINGRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MOBILE_PHONE_BLOCKINGRow FindByID(int ID) {
                return ((MOBILE_PHONE_BLOCKINGRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                MOBILE_PHONE_BLOCKINGDataTable cln = ((MOBILE_PHONE_BLOCKINGDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new MOBILE_PHONE_BLOCKINGDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnNAME = base.Columns["NAME"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnNAME = new System.Data.DataColumn("NAME", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNAME);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AllowDBNull = false;
                this.columnID.Unique = true;
                this.columnNAME.AllowDBNull = false;
                this.columnNAME.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MOBILE_PHONE_BLOCKINGRow NewMOBILE_PHONE_BLOCKINGRow() {
                return ((MOBILE_PHONE_BLOCKINGRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new MOBILE_PHONE_BLOCKINGRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(MOBILE_PHONE_BLOCKINGRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MOBILE_PHONE_BLOCKINGRowChanged != null)) {
                    this.MOBILE_PHONE_BLOCKINGRowChanged(this, new MOBILE_PHONE_BLOCKINGRowChangeEvent(((MOBILE_PHONE_BLOCKINGRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MOBILE_PHONE_BLOCKINGRowChanging != null)) {
                    this.MOBILE_PHONE_BLOCKINGRowChanging(this, new MOBILE_PHONE_BLOCKINGRowChangeEvent(((MOBILE_PHONE_BLOCKINGRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MOBILE_PHONE_BLOCKINGRowDeleted != null)) {
                    this.MOBILE_PHONE_BLOCKINGRowDeleted(this, new MOBILE_PHONE_BLOCKINGRowChangeEvent(((MOBILE_PHONE_BLOCKINGRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MOBILE_PHONE_BLOCKINGRowDeleting != null)) {
                    this.MOBILE_PHONE_BLOCKINGRowDeleting(this, new MOBILE_PHONE_BLOCKINGRowChangeEvent(((MOBILE_PHONE_BLOCKINGRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMOBILE_PHONE_BLOCKINGRow(MOBILE_PHONE_BLOCKINGRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                phmkDataSet ds = new phmkDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MOBILE_PHONE_BLOCKINGDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class USER_LISTDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnLOGIN;
            
            private System.Data.DataColumn columnPASSWORD;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public USER_LISTDataTable() {
                this.TableName = "USER_LIST";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal USER_LISTDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected USER_LISTDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LOGINColumn {
                get {
                    return this.columnLOGIN;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PASSWORDColumn {
                get {
                    return this.columnPASSWORD;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public USER_LISTRow this[int index] {
                get {
                    return ((USER_LISTRow)(this.Rows[index]));
                }
            }
            
            public event USER_LISTRowChangeEventHandler USER_LISTRowChanging;
            
            public event USER_LISTRowChangeEventHandler USER_LISTRowChanged;
            
            public event USER_LISTRowChangeEventHandler USER_LISTRowDeleting;
            
            public event USER_LISTRowChangeEventHandler USER_LISTRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddUSER_LISTRow(USER_LISTRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public USER_LISTRow AddUSER_LISTRow(int ID, string LOGIN, string PASSWORD) {
                USER_LISTRow rowUSER_LISTRow = ((USER_LISTRow)(this.NewRow()));
                rowUSER_LISTRow.ItemArray = new object[] {
                        ID,
                        LOGIN,
                        PASSWORD};
                this.Rows.Add(rowUSER_LISTRow);
                return rowUSER_LISTRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public USER_LISTRow FindByID(int ID) {
                return ((USER_LISTRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                USER_LISTDataTable cln = ((USER_LISTDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new USER_LISTDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnLOGIN = base.Columns["LOGIN"];
                this.columnPASSWORD = base.Columns["PASSWORD"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnLOGIN = new System.Data.DataColumn("LOGIN", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLOGIN);
                this.columnPASSWORD = new System.Data.DataColumn("PASSWORD", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPASSWORD);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AllowDBNull = false;
                this.columnID.Unique = true;
                this.columnLOGIN.AllowDBNull = false;
                this.columnLOGIN.MaxLength = 30;
                this.columnPASSWORD.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public USER_LISTRow NewUSER_LISTRow() {
                return ((USER_LISTRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new USER_LISTRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(USER_LISTRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.USER_LISTRowChanged != null)) {
                    this.USER_LISTRowChanged(this, new USER_LISTRowChangeEvent(((USER_LISTRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.USER_LISTRowChanging != null)) {
                    this.USER_LISTRowChanging(this, new USER_LISTRowChangeEvent(((USER_LISTRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.USER_LISTRowDeleted != null)) {
                    this.USER_LISTRowDeleted(this, new USER_LISTRowChangeEvent(((USER_LISTRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.USER_LISTRowDeleting != null)) {
                    this.USER_LISTRowDeleting(this, new USER_LISTRowChangeEvent(((USER_LISTRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveUSER_LISTRow(USER_LISTRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                phmkDataSet ds = new phmkDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "USER_LISTDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class COMPAIGN_MEDIADataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnMEDIAID;
            
            private System.Data.DataColumn columnCOMPAIGNID;
            
            private System.Data.DataColumn columnNAME;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public COMPAIGN_MEDIADataTable() {
                this.TableName = "COMPAIGN_MEDIA";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal COMPAIGN_MEDIADataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected COMPAIGN_MEDIADataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MEDIAIDColumn {
                get {
                    return this.columnMEDIAID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn COMPAIGNIDColumn {
                get {
                    return this.columnCOMPAIGNID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NAMEColumn {
                get {
                    return this.columnNAME;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public COMPAIGN_MEDIARow this[int index] {
                get {
                    return ((COMPAIGN_MEDIARow)(this.Rows[index]));
                }
            }
            
            public event COMPAIGN_MEDIARowChangeEventHandler COMPAIGN_MEDIARowChanging;
            
            public event COMPAIGN_MEDIARowChangeEventHandler COMPAIGN_MEDIARowChanged;
            
            public event COMPAIGN_MEDIARowChangeEventHandler COMPAIGN_MEDIARowDeleting;
            
            public event COMPAIGN_MEDIARowChangeEventHandler COMPAIGN_MEDIARowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCOMPAIGN_MEDIARow(COMPAIGN_MEDIARow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public COMPAIGN_MEDIARow AddCOMPAIGN_MEDIARow(int MEDIAID, System.Guid COMPAIGNID, string NAME) {
                COMPAIGN_MEDIARow rowCOMPAIGN_MEDIARow = ((COMPAIGN_MEDIARow)(this.NewRow()));
                rowCOMPAIGN_MEDIARow.ItemArray = new object[] {
                        MEDIAID,
                        COMPAIGNID,
                        NAME};
                this.Rows.Add(rowCOMPAIGN_MEDIARow);
                return rowCOMPAIGN_MEDIARow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public COMPAIGN_MEDIARow FindByMEDIAIDCOMPAIGNID(int MEDIAID, System.Guid COMPAIGNID) {
                return ((COMPAIGN_MEDIARow)(this.Rows.Find(new object[] {
                            MEDIAID,
                            COMPAIGNID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                COMPAIGN_MEDIADataTable cln = ((COMPAIGN_MEDIADataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new COMPAIGN_MEDIADataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMEDIAID = base.Columns["MEDIAID"];
                this.columnCOMPAIGNID = base.Columns["COMPAIGNID"];
                this.columnNAME = base.Columns["NAME"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMEDIAID = new System.Data.DataColumn("MEDIAID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMEDIAID);
                this.columnCOMPAIGNID = new System.Data.DataColumn("COMPAIGNID", typeof(System.Guid), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPAIGNID);
                this.columnNAME = new System.Data.DataColumn("NAME", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNAME);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnMEDIAID,
                                this.columnCOMPAIGNID}, true));
                this.columnMEDIAID.AllowDBNull = false;
                this.columnCOMPAIGNID.AllowDBNull = false;
                this.columnNAME.MaxLength = 100;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public COMPAIGN_MEDIARow NewCOMPAIGN_MEDIARow() {
                return ((COMPAIGN_MEDIARow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new COMPAIGN_MEDIARow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(COMPAIGN_MEDIARow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.COMPAIGN_MEDIARowChanged != null)) {
                    this.COMPAIGN_MEDIARowChanged(this, new COMPAIGN_MEDIARowChangeEvent(((COMPAIGN_MEDIARow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.COMPAIGN_MEDIARowChanging != null)) {
                    this.COMPAIGN_MEDIARowChanging(this, new COMPAIGN_MEDIARowChangeEvent(((COMPAIGN_MEDIARow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.COMPAIGN_MEDIARowDeleted != null)) {
                    this.COMPAIGN_MEDIARowDeleted(this, new COMPAIGN_MEDIARowChangeEvent(((COMPAIGN_MEDIARow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.COMPAIGN_MEDIARowDeleting != null)) {
                    this.COMPAIGN_MEDIARowDeleting(this, new COMPAIGN_MEDIARowChangeEvent(((COMPAIGN_MEDIARow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCOMPAIGN_MEDIARow(COMPAIGN_MEDIARow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                phmkDataSet ds = new phmkDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "COMPAIGN_MEDIADataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class USER_COMPAIGNDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnUSERID;
            
            private System.Data.DataColumn columnCOMPAIGNID;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public USER_COMPAIGNDataTable() {
                this.TableName = "USER_COMPAIGN";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal USER_COMPAIGNDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected USER_COMPAIGNDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn USERIDColumn {
                get {
                    return this.columnUSERID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn COMPAIGNIDColumn {
                get {
                    return this.columnCOMPAIGNID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public USER_COMPAIGNRow this[int index] {
                get {
                    return ((USER_COMPAIGNRow)(this.Rows[index]));
                }
            }
            
            public event USER_COMPAIGNRowChangeEventHandler USER_COMPAIGNRowChanging;
            
            public event USER_COMPAIGNRowChangeEventHandler USER_COMPAIGNRowChanged;
            
            public event USER_COMPAIGNRowChangeEventHandler USER_COMPAIGNRowDeleting;
            
            public event USER_COMPAIGNRowChangeEventHandler USER_COMPAIGNRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddUSER_COMPAIGNRow(USER_COMPAIGNRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public USER_COMPAIGNRow AddUSER_COMPAIGNRow(int USERID, string COMPAIGNID) {
                USER_COMPAIGNRow rowUSER_COMPAIGNRow = ((USER_COMPAIGNRow)(this.NewRow()));
                rowUSER_COMPAIGNRow.ItemArray = new object[] {
                        USERID,
                        COMPAIGNID};
                this.Rows.Add(rowUSER_COMPAIGNRow);
                return rowUSER_COMPAIGNRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public USER_COMPAIGNRow FindByUSERIDCOMPAIGNID(int USERID, string COMPAIGNID) {
                return ((USER_COMPAIGNRow)(this.Rows.Find(new object[] {
                            USERID,
                            COMPAIGNID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                USER_COMPAIGNDataTable cln = ((USER_COMPAIGNDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new USER_COMPAIGNDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnUSERID = base.Columns["USERID"];
                this.columnCOMPAIGNID = base.Columns["COMPAIGNID"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnUSERID = new System.Data.DataColumn("USERID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSERID);
                this.columnCOMPAIGNID = new System.Data.DataColumn("COMPAIGNID", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPAIGNID);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnUSERID,
                                this.columnCOMPAIGNID}, true));
                this.columnUSERID.AllowDBNull = false;
                this.columnCOMPAIGNID.AllowDBNull = false;
                this.columnCOMPAIGNID.MaxLength = 3;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public USER_COMPAIGNRow NewUSER_COMPAIGNRow() {
                return ((USER_COMPAIGNRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new USER_COMPAIGNRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(USER_COMPAIGNRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.USER_COMPAIGNRowChanged != null)) {
                    this.USER_COMPAIGNRowChanged(this, new USER_COMPAIGNRowChangeEvent(((USER_COMPAIGNRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.USER_COMPAIGNRowChanging != null)) {
                    this.USER_COMPAIGNRowChanging(this, new USER_COMPAIGNRowChangeEvent(((USER_COMPAIGNRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.USER_COMPAIGNRowDeleted != null)) {
                    this.USER_COMPAIGNRowDeleted(this, new USER_COMPAIGNRowChangeEvent(((USER_COMPAIGNRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.USER_COMPAIGNRowDeleting != null)) {
                    this.USER_COMPAIGNRowDeleting(this, new USER_COMPAIGNRowChangeEvent(((USER_COMPAIGNRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveUSER_COMPAIGNRow(USER_COMPAIGNRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                phmkDataSet ds = new phmkDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "USER_COMPAIGNDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class COMPAIGNDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnDESCRIPTION;
            
            private System.Data.DataColumn columnSTARTDATE;
            
            private System.Data.DataColumn columnENDDATE;
            
            private System.Data.DataColumn columnCAMPAIGNCODE;
            
            private System.Data.DataColumn columnCAMPAIGNNAME;
            
            private System.Data.DataColumn columnCAMPAIGNID;
            
            private System.Data.DataColumn columnACTIONID;
            
            private System.Data.DataColumn columnVARIANTID;
            
            private System.Data.DataColumn columnTARGETGROUPID;
            
            private System.Data.DataColumn columnACTIONNAME;
            
            private System.Data.DataColumn columnVARIANT;
            
            private System.Data.DataColumn columnTARGETGROUP;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public COMPAIGNDataTable() {
                this.TableName = "COMPAIGN";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal COMPAIGNDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected COMPAIGNDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DESCRIPTIONColumn {
                get {
                    return this.columnDESCRIPTION;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn STARTDATEColumn {
                get {
                    return this.columnSTARTDATE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ENDDATEColumn {
                get {
                    return this.columnENDDATE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CAMPAIGNCODEColumn {
                get {
                    return this.columnCAMPAIGNCODE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CAMPAIGNNAMEColumn {
                get {
                    return this.columnCAMPAIGNNAME;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CAMPAIGNIDColumn {
                get {
                    return this.columnCAMPAIGNID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ACTIONIDColumn {
                get {
                    return this.columnACTIONID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn VARIANTIDColumn {
                get {
                    return this.columnVARIANTID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TARGETGROUPIDColumn {
                get {
                    return this.columnTARGETGROUPID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ACTIONNAMEColumn {
                get {
                    return this.columnACTIONNAME;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn VARIANTColumn {
                get {
                    return this.columnVARIANT;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TARGETGROUPColumn {
                get {
                    return this.columnTARGETGROUP;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public COMPAIGNRow this[int index] {
                get {
                    return ((COMPAIGNRow)(this.Rows[index]));
                }
            }
            
            public event COMPAIGNRowChangeEventHandler COMPAIGNRowChanging;
            
            public event COMPAIGNRowChangeEventHandler COMPAIGNRowChanged;
            
            public event COMPAIGNRowChangeEventHandler COMPAIGNRowDeleting;
            
            public event COMPAIGNRowChangeEventHandler COMPAIGNRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCOMPAIGNRow(COMPAIGNRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public COMPAIGNRow AddCOMPAIGNRow(System.Guid ID, string DESCRIPTION, System.DateTime STARTDATE, System.DateTime ENDDATE, string CAMPAIGNCODE, string CAMPAIGNNAME, string CAMPAIGNID, string ACTIONID, string VARIANTID, string TARGETGROUPID, string ACTIONNAME, string VARIANT, string TARGETGROUP) {
                COMPAIGNRow rowCOMPAIGNRow = ((COMPAIGNRow)(this.NewRow()));
                rowCOMPAIGNRow.ItemArray = new object[] {
                        ID,
                        DESCRIPTION,
                        STARTDATE,
                        ENDDATE,
                        CAMPAIGNCODE,
                        CAMPAIGNNAME,
                        CAMPAIGNID,
                        ACTIONID,
                        VARIANTID,
                        TARGETGROUPID,
                        ACTIONNAME,
                        VARIANT,
                        TARGETGROUP};
                this.Rows.Add(rowCOMPAIGNRow);
                return rowCOMPAIGNRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public COMPAIGNRow FindByID(System.Guid ID) {
                return ((COMPAIGNRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                COMPAIGNDataTable cln = ((COMPAIGNDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new COMPAIGNDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnDESCRIPTION = base.Columns["DESCRIPTION"];
                this.columnSTARTDATE = base.Columns["STARTDATE"];
                this.columnENDDATE = base.Columns["ENDDATE"];
                this.columnCAMPAIGNCODE = base.Columns["CAMPAIGNCODE"];
                this.columnCAMPAIGNNAME = base.Columns["CAMPAIGNNAME"];
                this.columnCAMPAIGNID = base.Columns["CAMPAIGNID"];
                this.columnACTIONID = base.Columns["ACTIONID"];
                this.columnVARIANTID = base.Columns["VARIANTID"];
                this.columnTARGETGROUPID = base.Columns["TARGETGROUPID"];
                this.columnACTIONNAME = base.Columns["ACTIONNAME"];
                this.columnVARIANT = base.Columns["VARIANT"];
                this.columnTARGETGROUP = base.Columns["TARGETGROUP"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(System.Guid), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnDESCRIPTION = new System.Data.DataColumn("DESCRIPTION", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDESCRIPTION);
                this.columnSTARTDATE = new System.Data.DataColumn("STARTDATE", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTARTDATE);
                this.columnENDDATE = new System.Data.DataColumn("ENDDATE", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnENDDATE);
                this.columnCAMPAIGNCODE = new System.Data.DataColumn("CAMPAIGNCODE", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCAMPAIGNCODE);
                this.columnCAMPAIGNNAME = new System.Data.DataColumn("CAMPAIGNNAME", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCAMPAIGNNAME);
                this.columnCAMPAIGNID = new System.Data.DataColumn("CAMPAIGNID", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCAMPAIGNID);
                this.columnACTIONID = new System.Data.DataColumn("ACTIONID", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnACTIONID);
                this.columnVARIANTID = new System.Data.DataColumn("VARIANTID", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnVARIANTID);
                this.columnTARGETGROUPID = new System.Data.DataColumn("TARGETGROUPID", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTARGETGROUPID);
                this.columnACTIONNAME = new System.Data.DataColumn("ACTIONNAME", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnACTIONNAME);
                this.columnVARIANT = new System.Data.DataColumn("VARIANT", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnVARIANT);
                this.columnTARGETGROUP = new System.Data.DataColumn("TARGETGROUP", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTARGETGROUP);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.columnDESCRIPTION.MaxLength = 255;
                this.columnSTARTDATE.AllowDBNull = false;
                this.columnENDDATE.AllowDBNull = false;
                this.columnCAMPAIGNCODE.AllowDBNull = false;
                this.columnCAMPAIGNCODE.MaxLength = 10;
                this.columnCAMPAIGNNAME.AllowDBNull = false;
                this.columnCAMPAIGNNAME.MaxLength = 100;
                this.columnCAMPAIGNID.AllowDBNull = false;
                this.columnCAMPAIGNID.MaxLength = 3;
                this.columnACTIONID.AllowDBNull = false;
                this.columnACTIONID.MaxLength = 3;
                this.columnVARIANTID.AllowDBNull = false;
                this.columnVARIANTID.MaxLength = 3;
                this.columnTARGETGROUPID.AllowDBNull = false;
                this.columnTARGETGROUPID.MaxLength = 3;
                this.columnACTIONNAME.MaxLength = 100;
                this.columnVARIANT.MaxLength = 100;
                this.columnTARGETGROUP.MaxLength = 100;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public COMPAIGNRow NewCOMPAIGNRow() {
                return ((COMPAIGNRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new COMPAIGNRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(COMPAIGNRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.COMPAIGNRowChanged != null)) {
                    this.COMPAIGNRowChanged(this, new COMPAIGNRowChangeEvent(((COMPAIGNRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.COMPAIGNRowChanging != null)) {
                    this.COMPAIGNRowChanging(this, new COMPAIGNRowChangeEvent(((COMPAIGNRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.COMPAIGNRowDeleted != null)) {
                    this.COMPAIGNRowDeleted(this, new COMPAIGNRowChangeEvent(((COMPAIGNRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.COMPAIGNRowDeleting != null)) {
                    this.COMPAIGNRowDeleting(this, new COMPAIGNRowChangeEvent(((COMPAIGNRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCOMPAIGNRow(COMPAIGNRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                phmkDataSet ds = new phmkDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "COMPAIGNDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class COMPAIGN_PRIZESDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnCOMPAIGNID;
            
            private System.Data.DataColumn columnPRIZESID;
            
            private System.Data.DataColumn columnNAME;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public COMPAIGN_PRIZESDataTable() {
                this.TableName = "COMPAIGN_PRIZES";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal COMPAIGN_PRIZESDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected COMPAIGN_PRIZESDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn COMPAIGNIDColumn {
                get {
                    return this.columnCOMPAIGNID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PRIZESIDColumn {
                get {
                    return this.columnPRIZESID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NAMEColumn {
                get {
                    return this.columnNAME;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public COMPAIGN_PRIZESRow this[int index] {
                get {
                    return ((COMPAIGN_PRIZESRow)(this.Rows[index]));
                }
            }
            
            public event COMPAIGN_PRIZESRowChangeEventHandler COMPAIGN_PRIZESRowChanging;
            
            public event COMPAIGN_PRIZESRowChangeEventHandler COMPAIGN_PRIZESRowChanged;
            
            public event COMPAIGN_PRIZESRowChangeEventHandler COMPAIGN_PRIZESRowDeleting;
            
            public event COMPAIGN_PRIZESRowChangeEventHandler COMPAIGN_PRIZESRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCOMPAIGN_PRIZESRow(COMPAIGN_PRIZESRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public COMPAIGN_PRIZESRow AddCOMPAIGN_PRIZESRow(System.Guid COMPAIGNID, int PRIZESID, string NAME) {
                COMPAIGN_PRIZESRow rowCOMPAIGN_PRIZESRow = ((COMPAIGN_PRIZESRow)(this.NewRow()));
                rowCOMPAIGN_PRIZESRow.ItemArray = new object[] {
                        COMPAIGNID,
                        PRIZESID,
                        NAME};
                this.Rows.Add(rowCOMPAIGN_PRIZESRow);
                return rowCOMPAIGN_PRIZESRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public COMPAIGN_PRIZESRow FindByCOMPAIGNIDPRIZESID(System.Guid COMPAIGNID, int PRIZESID) {
                return ((COMPAIGN_PRIZESRow)(this.Rows.Find(new object[] {
                            COMPAIGNID,
                            PRIZESID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                COMPAIGN_PRIZESDataTable cln = ((COMPAIGN_PRIZESDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new COMPAIGN_PRIZESDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCOMPAIGNID = base.Columns["COMPAIGNID"];
                this.columnPRIZESID = base.Columns["PRIZESID"];
                this.columnNAME = base.Columns["NAME"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCOMPAIGNID = new System.Data.DataColumn("COMPAIGNID", typeof(System.Guid), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPAIGNID);
                this.columnPRIZESID = new System.Data.DataColumn("PRIZESID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPRIZESID);
                this.columnNAME = new System.Data.DataColumn("NAME", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNAME);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnCOMPAIGNID,
                                this.columnPRIZESID}, true));
                this.columnCOMPAIGNID.AllowDBNull = false;
                this.columnPRIZESID.AllowDBNull = false;
                this.columnNAME.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public COMPAIGN_PRIZESRow NewCOMPAIGN_PRIZESRow() {
                return ((COMPAIGN_PRIZESRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new COMPAIGN_PRIZESRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(COMPAIGN_PRIZESRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.COMPAIGN_PRIZESRowChanged != null)) {
                    this.COMPAIGN_PRIZESRowChanged(this, new COMPAIGN_PRIZESRowChangeEvent(((COMPAIGN_PRIZESRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.COMPAIGN_PRIZESRowChanging != null)) {
                    this.COMPAIGN_PRIZESRowChanging(this, new COMPAIGN_PRIZESRowChangeEvent(((COMPAIGN_PRIZESRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.COMPAIGN_PRIZESRowDeleted != null)) {
                    this.COMPAIGN_PRIZESRowDeleted(this, new COMPAIGN_PRIZESRowChangeEvent(((COMPAIGN_PRIZESRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.COMPAIGN_PRIZESRowDeleting != null)) {
                    this.COMPAIGN_PRIZESRowDeleting(this, new COMPAIGN_PRIZESRowChangeEvent(((COMPAIGN_PRIZESRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCOMPAIGN_PRIZESRow(COMPAIGN_PRIZESRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                phmkDataSet ds = new phmkDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "COMPAIGN_PRIZESDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class QUESTION_FOR_COMPAIGNDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnGOMPAIGNID;
            
            private System.Data.DataColumn columnQUESTIONID;
            
            private System.Data.DataColumn columnQUESTIONNAME;
            
            private System.Data.DataColumn columnQUESTIONTYPE;
            
            private System.Data.DataColumn columnISDEFAULT;
            
            private System.Data.DataColumn columnQUESTIONTYPE_NAME;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QUESTION_FOR_COMPAIGNDataTable() {
                this.TableName = "QUESTION_FOR_COMPAIGN";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal QUESTION_FOR_COMPAIGNDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected QUESTION_FOR_COMPAIGNDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn GOMPAIGNIDColumn {
                get {
                    return this.columnGOMPAIGNID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn QUESTIONIDColumn {
                get {
                    return this.columnQUESTIONID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn QUESTIONNAMEColumn {
                get {
                    return this.columnQUESTIONNAME;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn QUESTIONTYPEColumn {
                get {
                    return this.columnQUESTIONTYPE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ISDEFAULTColumn {
                get {
                    return this.columnISDEFAULT;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn QUESTIONTYPE_NAMEColumn {
                get {
                    return this.columnQUESTIONTYPE_NAME;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QUESTION_FOR_COMPAIGNRow this[int index] {
                get {
                    return ((QUESTION_FOR_COMPAIGNRow)(this.Rows[index]));
                }
            }
            
            public event QUESTION_FOR_COMPAIGNRowChangeEventHandler QUESTION_FOR_COMPAIGNRowChanging;
            
            public event QUESTION_FOR_COMPAIGNRowChangeEventHandler QUESTION_FOR_COMPAIGNRowChanged;
            
            public event QUESTION_FOR_COMPAIGNRowChangeEventHandler QUESTION_FOR_COMPAIGNRowDeleting;
            
            public event QUESTION_FOR_COMPAIGNRowChangeEventHandler QUESTION_FOR_COMPAIGNRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddQUESTION_FOR_COMPAIGNRow(QUESTION_FOR_COMPAIGNRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QUESTION_FOR_COMPAIGNRow AddQUESTION_FOR_COMPAIGNRow(System.Guid GOMPAIGNID, int QUESTIONID, string QUESTIONNAME, int QUESTIONTYPE, bool ISDEFAULT, string QUESTIONTYPE_NAME) {
                QUESTION_FOR_COMPAIGNRow rowQUESTION_FOR_COMPAIGNRow = ((QUESTION_FOR_COMPAIGNRow)(this.NewRow()));
                rowQUESTION_FOR_COMPAIGNRow.ItemArray = new object[] {
                        GOMPAIGNID,
                        QUESTIONID,
                        QUESTIONNAME,
                        QUESTIONTYPE,
                        ISDEFAULT,
                        QUESTIONTYPE_NAME};
                this.Rows.Add(rowQUESTION_FOR_COMPAIGNRow);
                return rowQUESTION_FOR_COMPAIGNRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QUESTION_FOR_COMPAIGNRow FindByGOMPAIGNIDQUESTIONID(System.Guid GOMPAIGNID, int QUESTIONID) {
                return ((QUESTION_FOR_COMPAIGNRow)(this.Rows.Find(new object[] {
                            GOMPAIGNID,
                            QUESTIONID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                QUESTION_FOR_COMPAIGNDataTable cln = ((QUESTION_FOR_COMPAIGNDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new QUESTION_FOR_COMPAIGNDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnGOMPAIGNID = base.Columns["GOMPAIGNID"];
                this.columnQUESTIONID = base.Columns["QUESTIONID"];
                this.columnQUESTIONNAME = base.Columns["QUESTIONNAME"];
                this.columnQUESTIONTYPE = base.Columns["QUESTIONTYPE"];
                this.columnISDEFAULT = base.Columns["ISDEFAULT"];
                this.columnQUESTIONTYPE_NAME = base.Columns["QUESTIONTYPE_NAME"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnGOMPAIGNID = new System.Data.DataColumn("GOMPAIGNID", typeof(System.Guid), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnGOMPAIGNID);
                this.columnQUESTIONID = new System.Data.DataColumn("QUESTIONID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnQUESTIONID);
                this.columnQUESTIONNAME = new System.Data.DataColumn("QUESTIONNAME", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnQUESTIONNAME);
                this.columnQUESTIONTYPE = new System.Data.DataColumn("QUESTIONTYPE", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnQUESTIONTYPE);
                this.columnISDEFAULT = new System.Data.DataColumn("ISDEFAULT", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnISDEFAULT);
                this.columnQUESTIONTYPE_NAME = new System.Data.DataColumn("QUESTIONTYPE_NAME", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnQUESTIONTYPE_NAME);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnGOMPAIGNID,
                                this.columnQUESTIONID}, true));
                this.columnGOMPAIGNID.AllowDBNull = false;
                this.columnQUESTIONID.AllowDBNull = false;
                this.columnQUESTIONNAME.MaxLength = 400;
                this.columnQUESTIONTYPE_NAME.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QUESTION_FOR_COMPAIGNRow NewQUESTION_FOR_COMPAIGNRow() {
                return ((QUESTION_FOR_COMPAIGNRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new QUESTION_FOR_COMPAIGNRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(QUESTION_FOR_COMPAIGNRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.QUESTION_FOR_COMPAIGNRowChanged != null)) {
                    this.QUESTION_FOR_COMPAIGNRowChanged(this, new QUESTION_FOR_COMPAIGNRowChangeEvent(((QUESTION_FOR_COMPAIGNRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.QUESTION_FOR_COMPAIGNRowChanging != null)) {
                    this.QUESTION_FOR_COMPAIGNRowChanging(this, new QUESTION_FOR_COMPAIGNRowChangeEvent(((QUESTION_FOR_COMPAIGNRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.QUESTION_FOR_COMPAIGNRowDeleted != null)) {
                    this.QUESTION_FOR_COMPAIGNRowDeleted(this, new QUESTION_FOR_COMPAIGNRowChangeEvent(((QUESTION_FOR_COMPAIGNRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.QUESTION_FOR_COMPAIGNRowDeleting != null)) {
                    this.QUESTION_FOR_COMPAIGNRowDeleting(this, new QUESTION_FOR_COMPAIGNRowChangeEvent(((QUESTION_FOR_COMPAIGNRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveQUESTION_FOR_COMPAIGNRow(QUESTION_FOR_COMPAIGNRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                phmkDataSet ds = new phmkDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "QUESTION_FOR_COMPAIGNDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class COMPAIGN_POPULATED_POINTSDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnCOMPAIGNID;
            
            private System.Data.DataColumn columnPOPULATED_POINTID;
            
            private System.Data.DataColumn columnPOPULATED_POINT_NAME;
            
            private System.Data.DataColumn columnREGION_NAME;
            
            private System.Data.DataColumn columnREGIONID;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public COMPAIGN_POPULATED_POINTSDataTable() {
                this.TableName = "COMPAIGN_POPULATED_POINTS";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal COMPAIGN_POPULATED_POINTSDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected COMPAIGN_POPULATED_POINTSDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn COMPAIGNIDColumn {
                get {
                    return this.columnCOMPAIGNID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn POPULATED_POINTIDColumn {
                get {
                    return this.columnPOPULATED_POINTID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn POPULATED_POINT_NAMEColumn {
                get {
                    return this.columnPOPULATED_POINT_NAME;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn REGION_NAMEColumn {
                get {
                    return this.columnREGION_NAME;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn REGIONIDColumn {
                get {
                    return this.columnREGIONID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public COMPAIGN_POPULATED_POINTSRow this[int index] {
                get {
                    return ((COMPAIGN_POPULATED_POINTSRow)(this.Rows[index]));
                }
            }
            
            public event COMPAIGN_POPULATED_POINTSRowChangeEventHandler COMPAIGN_POPULATED_POINTSRowChanging;
            
            public event COMPAIGN_POPULATED_POINTSRowChangeEventHandler COMPAIGN_POPULATED_POINTSRowChanged;
            
            public event COMPAIGN_POPULATED_POINTSRowChangeEventHandler COMPAIGN_POPULATED_POINTSRowDeleting;
            
            public event COMPAIGN_POPULATED_POINTSRowChangeEventHandler COMPAIGN_POPULATED_POINTSRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCOMPAIGN_POPULATED_POINTSRow(COMPAIGN_POPULATED_POINTSRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public COMPAIGN_POPULATED_POINTSRow AddCOMPAIGN_POPULATED_POINTSRow(System.Guid COMPAIGNID, int POPULATED_POINTID, string POPULATED_POINT_NAME, string REGION_NAME) {
                COMPAIGN_POPULATED_POINTSRow rowCOMPAIGN_POPULATED_POINTSRow = ((COMPAIGN_POPULATED_POINTSRow)(this.NewRow()));
                rowCOMPAIGN_POPULATED_POINTSRow.ItemArray = new object[] {
                        COMPAIGNID,
                        POPULATED_POINTID,
                        POPULATED_POINT_NAME,
                        REGION_NAME,
                        null};
                this.Rows.Add(rowCOMPAIGN_POPULATED_POINTSRow);
                return rowCOMPAIGN_POPULATED_POINTSRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                COMPAIGN_POPULATED_POINTSDataTable cln = ((COMPAIGN_POPULATED_POINTSDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new COMPAIGN_POPULATED_POINTSDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCOMPAIGNID = base.Columns["COMPAIGNID"];
                this.columnPOPULATED_POINTID = base.Columns["POPULATED_POINTID"];
                this.columnPOPULATED_POINT_NAME = base.Columns["POPULATED_POINT_NAME"];
                this.columnREGION_NAME = base.Columns["REGION_NAME"];
                this.columnREGIONID = base.Columns["REGIONID"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCOMPAIGNID = new System.Data.DataColumn("COMPAIGNID", typeof(System.Guid), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPAIGNID);
                this.columnPOPULATED_POINTID = new System.Data.DataColumn("POPULATED_POINTID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPOPULATED_POINTID);
                this.columnPOPULATED_POINT_NAME = new System.Data.DataColumn("POPULATED_POINT_NAME", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPOPULATED_POINT_NAME);
                this.columnREGION_NAME = new System.Data.DataColumn("REGION_NAME", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnREGION_NAME);
                this.columnREGIONID = new System.Data.DataColumn("REGIONID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnREGIONID);
                this.columnCOMPAIGNID.AllowDBNull = false;
                this.columnPOPULATED_POINTID.AllowDBNull = false;
                this.columnPOPULATED_POINT_NAME.MaxLength = 30;
                this.columnREGION_NAME.MaxLength = 50;
                this.columnREGIONID.AutoIncrement = true;
                this.columnREGIONID.ReadOnly = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public COMPAIGN_POPULATED_POINTSRow NewCOMPAIGN_POPULATED_POINTSRow() {
                return ((COMPAIGN_POPULATED_POINTSRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new COMPAIGN_POPULATED_POINTSRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(COMPAIGN_POPULATED_POINTSRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.COMPAIGN_POPULATED_POINTSRowChanged != null)) {
                    this.COMPAIGN_POPULATED_POINTSRowChanged(this, new COMPAIGN_POPULATED_POINTSRowChangeEvent(((COMPAIGN_POPULATED_POINTSRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.COMPAIGN_POPULATED_POINTSRowChanging != null)) {
                    this.COMPAIGN_POPULATED_POINTSRowChanging(this, new COMPAIGN_POPULATED_POINTSRowChangeEvent(((COMPAIGN_POPULATED_POINTSRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.COMPAIGN_POPULATED_POINTSRowDeleted != null)) {
                    this.COMPAIGN_POPULATED_POINTSRowDeleted(this, new COMPAIGN_POPULATED_POINTSRowChangeEvent(((COMPAIGN_POPULATED_POINTSRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.COMPAIGN_POPULATED_POINTSRowDeleting != null)) {
                    this.COMPAIGN_POPULATED_POINTSRowDeleting(this, new COMPAIGN_POPULATED_POINTSRowChangeEvent(((COMPAIGN_POPULATED_POINTSRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCOMPAIGN_POPULATED_POINTSRow(COMPAIGN_POPULATED_POINTSRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                phmkDataSet ds = new phmkDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "COMPAIGN_POPULATED_POINTSDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GLOBAL_BLOCKINGDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnNAME;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GLOBAL_BLOCKINGDataTable() {
                this.TableName = "GLOBAL_BLOCKING";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GLOBAL_BLOCKINGDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GLOBAL_BLOCKINGDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NAMEColumn {
                get {
                    return this.columnNAME;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GLOBAL_BLOCKINGRow this[int index] {
                get {
                    return ((GLOBAL_BLOCKINGRow)(this.Rows[index]));
                }
            }
            
            public event GLOBAL_BLOCKINGRowChangeEventHandler GLOBAL_BLOCKINGRowChanging;
            
            public event GLOBAL_BLOCKINGRowChangeEventHandler GLOBAL_BLOCKINGRowChanged;
            
            public event GLOBAL_BLOCKINGRowChangeEventHandler GLOBAL_BLOCKINGRowDeleting;
            
            public event GLOBAL_BLOCKINGRowChangeEventHandler GLOBAL_BLOCKINGRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGLOBAL_BLOCKINGRow(GLOBAL_BLOCKINGRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GLOBAL_BLOCKINGRow AddGLOBAL_BLOCKINGRow(int ID, string NAME) {
                GLOBAL_BLOCKINGRow rowGLOBAL_BLOCKINGRow = ((GLOBAL_BLOCKINGRow)(this.NewRow()));
                rowGLOBAL_BLOCKINGRow.ItemArray = new object[] {
                        ID,
                        NAME};
                this.Rows.Add(rowGLOBAL_BLOCKINGRow);
                return rowGLOBAL_BLOCKINGRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GLOBAL_BLOCKINGRow FindByID(int ID) {
                return ((GLOBAL_BLOCKINGRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                GLOBAL_BLOCKINGDataTable cln = ((GLOBAL_BLOCKINGDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new GLOBAL_BLOCKINGDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnNAME = base.Columns["NAME"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnNAME = new System.Data.DataColumn("NAME", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNAME);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AllowDBNull = false;
                this.columnID.Unique = true;
                this.columnNAME.AllowDBNull = false;
                this.columnNAME.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GLOBAL_BLOCKINGRow NewGLOBAL_BLOCKINGRow() {
                return ((GLOBAL_BLOCKINGRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new GLOBAL_BLOCKINGRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(GLOBAL_BLOCKINGRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GLOBAL_BLOCKINGRowChanged != null)) {
                    this.GLOBAL_BLOCKINGRowChanged(this, new GLOBAL_BLOCKINGRowChangeEvent(((GLOBAL_BLOCKINGRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GLOBAL_BLOCKINGRowChanging != null)) {
                    this.GLOBAL_BLOCKINGRowChanging(this, new GLOBAL_BLOCKINGRowChangeEvent(((GLOBAL_BLOCKINGRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GLOBAL_BLOCKINGRowDeleted != null)) {
                    this.GLOBAL_BLOCKINGRowDeleted(this, new GLOBAL_BLOCKINGRowChangeEvent(((GLOBAL_BLOCKINGRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GLOBAL_BLOCKINGRowDeleting != null)) {
                    this.GLOBAL_BLOCKINGRowDeleting(this, new GLOBAL_BLOCKINGRowChangeEvent(((GLOBAL_BLOCKINGRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGLOBAL_BLOCKINGRow(GLOBAL_BLOCKINGRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                phmkDataSet ds = new phmkDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GLOBAL_BLOCKINGDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class OBLAST_DWDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnOBLASTID;
            
            private System.Data.DataColumn columnNAME;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OBLAST_DWDataTable() {
                this.TableName = "OBLAST_DW";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OBLAST_DWDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected OBLAST_DWDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn OBLASTIDColumn {
                get {
                    return this.columnOBLASTID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NAMEColumn {
                get {
                    return this.columnNAME;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OBLAST_DWRow this[int index] {
                get {
                    return ((OBLAST_DWRow)(this.Rows[index]));
                }
            }
            
            public event OBLAST_DWRowChangeEventHandler OBLAST_DWRowChanging;
            
            public event OBLAST_DWRowChangeEventHandler OBLAST_DWRowChanged;
            
            public event OBLAST_DWRowChangeEventHandler OBLAST_DWRowDeleting;
            
            public event OBLAST_DWRowChangeEventHandler OBLAST_DWRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddOBLAST_DWRow(OBLAST_DWRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OBLAST_DWRow AddOBLAST_DWRow(int OBLASTID, string NAME) {
                OBLAST_DWRow rowOBLAST_DWRow = ((OBLAST_DWRow)(this.NewRow()));
                rowOBLAST_DWRow.ItemArray = new object[] {
                        OBLASTID,
                        NAME};
                this.Rows.Add(rowOBLAST_DWRow);
                return rowOBLAST_DWRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OBLAST_DWRow FindByOBLASTID(int OBLASTID) {
                return ((OBLAST_DWRow)(this.Rows.Find(new object[] {
                            OBLASTID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                OBLAST_DWDataTable cln = ((OBLAST_DWDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new OBLAST_DWDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnOBLASTID = base.Columns["OBLASTID"];
                this.columnNAME = base.Columns["NAME"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnOBLASTID = new System.Data.DataColumn("OBLASTID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnOBLASTID);
                this.columnNAME = new System.Data.DataColumn("NAME", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNAME);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnOBLASTID}, true));
                this.columnOBLASTID.AllowDBNull = false;
                this.columnOBLASTID.Unique = true;
                this.columnNAME.AllowDBNull = false;
                this.columnNAME.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OBLAST_DWRow NewOBLAST_DWRow() {
                return ((OBLAST_DWRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new OBLAST_DWRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(OBLAST_DWRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.OBLAST_DWRowChanged != null)) {
                    this.OBLAST_DWRowChanged(this, new OBLAST_DWRowChangeEvent(((OBLAST_DWRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.OBLAST_DWRowChanging != null)) {
                    this.OBLAST_DWRowChanging(this, new OBLAST_DWRowChangeEvent(((OBLAST_DWRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.OBLAST_DWRowDeleted != null)) {
                    this.OBLAST_DWRowDeleted(this, new OBLAST_DWRowChangeEvent(((OBLAST_DWRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.OBLAST_DWRowDeleting != null)) {
                    this.OBLAST_DWRowDeleting(this, new OBLAST_DWRowChangeEvent(((OBLAST_DWRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveOBLAST_DWRow(OBLAST_DWRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                phmkDataSet ds = new phmkDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "OBLAST_DWDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SETTLEMENT_TYPE_DWDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnSETTLEMENTTYPEID;
            
            private System.Data.DataColumn columnDESCR;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SETTLEMENT_TYPE_DWDataTable() {
                this.TableName = "SETTLEMENT_TYPE_DW";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SETTLEMENT_TYPE_DWDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SETTLEMENT_TYPE_DWDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SETTLEMENTTYPEIDColumn {
                get {
                    return this.columnSETTLEMENTTYPEID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DESCRColumn {
                get {
                    return this.columnDESCR;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SETTLEMENT_TYPE_DWRow this[int index] {
                get {
                    return ((SETTLEMENT_TYPE_DWRow)(this.Rows[index]));
                }
            }
            
            public event SETTLEMENT_TYPE_DWRowChangeEventHandler SETTLEMENT_TYPE_DWRowChanging;
            
            public event SETTLEMENT_TYPE_DWRowChangeEventHandler SETTLEMENT_TYPE_DWRowChanged;
            
            public event SETTLEMENT_TYPE_DWRowChangeEventHandler SETTLEMENT_TYPE_DWRowDeleting;
            
            public event SETTLEMENT_TYPE_DWRowChangeEventHandler SETTLEMENT_TYPE_DWRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSETTLEMENT_TYPE_DWRow(SETTLEMENT_TYPE_DWRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SETTLEMENT_TYPE_DWRow AddSETTLEMENT_TYPE_DWRow(int SETTLEMENTTYPEID, string DESCR) {
                SETTLEMENT_TYPE_DWRow rowSETTLEMENT_TYPE_DWRow = ((SETTLEMENT_TYPE_DWRow)(this.NewRow()));
                rowSETTLEMENT_TYPE_DWRow.ItemArray = new object[] {
                        null,
                        SETTLEMENTTYPEID,
                        DESCR};
                this.Rows.Add(rowSETTLEMENT_TYPE_DWRow);
                return rowSETTLEMENT_TYPE_DWRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SETTLEMENT_TYPE_DWRow FindBySETTLEMENTTYPEID(int SETTLEMENTTYPEID) {
                return ((SETTLEMENT_TYPE_DWRow)(this.Rows.Find(new object[] {
                            SETTLEMENTTYPEID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                SETTLEMENT_TYPE_DWDataTable cln = ((SETTLEMENT_TYPE_DWDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new SETTLEMENT_TYPE_DWDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnSETTLEMENTTYPEID = base.Columns["SETTLEMENTTYPEID"];
                this.columnDESCR = base.Columns["DESCR"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnSETTLEMENTTYPEID = new System.Data.DataColumn("SETTLEMENTTYPEID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSETTLEMENTTYPEID);
                this.columnDESCR = new System.Data.DataColumn("DESCR", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDESCR);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnSETTLEMENTTYPEID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnSETTLEMENTTYPEID.AllowDBNull = false;
                this.columnSETTLEMENTTYPEID.Unique = true;
                this.columnDESCR.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SETTLEMENT_TYPE_DWRow NewSETTLEMENT_TYPE_DWRow() {
                return ((SETTLEMENT_TYPE_DWRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new SETTLEMENT_TYPE_DWRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(SETTLEMENT_TYPE_DWRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SETTLEMENT_TYPE_DWRowChanged != null)) {
                    this.SETTLEMENT_TYPE_DWRowChanged(this, new SETTLEMENT_TYPE_DWRowChangeEvent(((SETTLEMENT_TYPE_DWRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SETTLEMENT_TYPE_DWRowChanging != null)) {
                    this.SETTLEMENT_TYPE_DWRowChanging(this, new SETTLEMENT_TYPE_DWRowChangeEvent(((SETTLEMENT_TYPE_DWRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SETTLEMENT_TYPE_DWRowDeleted != null)) {
                    this.SETTLEMENT_TYPE_DWRowDeleted(this, new SETTLEMENT_TYPE_DWRowChangeEvent(((SETTLEMENT_TYPE_DWRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SETTLEMENT_TYPE_DWRowDeleting != null)) {
                    this.SETTLEMENT_TYPE_DWRowDeleting(this, new SETTLEMENT_TYPE_DWRowChangeEvent(((SETTLEMENT_TYPE_DWRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSETTLEMENT_TYPE_DWRow(SETTLEMENT_TYPE_DWRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                phmkDataSet ds = new phmkDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SETTLEMENT_TYPE_DWDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CONSUMERDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnAZ_INDENT_ID;
            
            private System.Data.DataColumn columnSOURCE;
            
            private System.Data.DataColumn columnGLOBAL_BLOCKING;
            
            private System.Data.DataColumn columnGENDER;
            
            private System.Data.DataColumn columnFIRST_NAME;
            
            private System.Data.DataColumn columnMIDDLE_NAME;
            
            private System.Data.DataColumn columnLAST_NAME;
            
            private System.Data.DataColumn columnCOUNTRY_CODE;
            
            private System.Data.DataColumn columnTYPE_OF_ID_CARD;
            
            private System.Data.DataColumn columnID_CARD_NUMBER;
            
            private System.Data.DataColumn columnRNN;
            
            private System.Data.DataColumn columnADDITIONAL_INFORMATION;
            
            private System.Data.DataColumn columnPOSTAL_CODE;
            
            private System.Data.DataColumn columnDATE_OF_BIRTH;
            
            private System.Data.DataColumn columnLANGUAGEID;
            
            private System.Data.DataColumn columnADDRES_BLOCKING;
            
            private System.Data.DataColumn columnPROMOTIONALID;
            
            private System.Data.DataColumn columnEMAIL;
            
            private System.Data.DataColumn columnEMAIL_BLOCKING;
            
            private System.Data.DataColumn columnPHONE_NUMBER;
            
            private System.Data.DataColumn columnPHONE_BLOCKING;
            
            private System.Data.DataColumn columnMOBILE_NUMBER;
            
            private System.Data.DataColumn columnMOBILE_BLOCKING;
            
            private System.Data.DataColumn columnMEDIA_CODE;
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnOBLAST_ID;
            
            private System.Data.DataColumn columnREGION_ID;
            
            private System.Data.DataColumn columnPOP_POINT_ID;
            
            private System.Data.DataColumn columnSETTLEMENT_TYPE_ID;
            
            private System.Data.DataColumn columnSTREET_TYPE;
            
            private System.Data.DataColumn columnSTREET;
            
            private System.Data.DataColumn columnHOUSE_NUMBER;
            
            private System.Data.DataColumn columnAPARTMENT_NUMBER;
            
            private System.Data.DataColumn columnMICRODISTRICT;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CONSUMERDataTable() {
                this.TableName = "CONSUMER";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CONSUMERDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CONSUMERDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AZ_INDENT_IDColumn {
                get {
                    return this.columnAZ_INDENT_ID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SOURCEColumn {
                get {
                    return this.columnSOURCE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn GLOBAL_BLOCKINGColumn {
                get {
                    return this.columnGLOBAL_BLOCKING;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn GENDERColumn {
                get {
                    return this.columnGENDER;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FIRST_NAMEColumn {
                get {
                    return this.columnFIRST_NAME;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MIDDLE_NAMEColumn {
                get {
                    return this.columnMIDDLE_NAME;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LAST_NAMEColumn {
                get {
                    return this.columnLAST_NAME;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn COUNTRY_CODEColumn {
                get {
                    return this.columnCOUNTRY_CODE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TYPE_OF_ID_CARDColumn {
                get {
                    return this.columnTYPE_OF_ID_CARD;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ID_CARD_NUMBERColumn {
                get {
                    return this.columnID_CARD_NUMBER;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RNNColumn {
                get {
                    return this.columnRNN;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ADDITIONAL_INFORMATIONColumn {
                get {
                    return this.columnADDITIONAL_INFORMATION;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn POSTAL_CODEColumn {
                get {
                    return this.columnPOSTAL_CODE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DATE_OF_BIRTHColumn {
                get {
                    return this.columnDATE_OF_BIRTH;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LANGUAGEIDColumn {
                get {
                    return this.columnLANGUAGEID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ADDRES_BLOCKINGColumn {
                get {
                    return this.columnADDRES_BLOCKING;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PROMOTIONALIDColumn {
                get {
                    return this.columnPROMOTIONALID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn EMAILColumn {
                get {
                    return this.columnEMAIL;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn EMAIL_BLOCKINGColumn {
                get {
                    return this.columnEMAIL_BLOCKING;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PHONE_NUMBERColumn {
                get {
                    return this.columnPHONE_NUMBER;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PHONE_BLOCKINGColumn {
                get {
                    return this.columnPHONE_BLOCKING;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MOBILE_NUMBERColumn {
                get {
                    return this.columnMOBILE_NUMBER;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MOBILE_BLOCKINGColumn {
                get {
                    return this.columnMOBILE_BLOCKING;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MEDIA_CODEColumn {
                get {
                    return this.columnMEDIA_CODE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn OBLAST_IDColumn {
                get {
                    return this.columnOBLAST_ID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn REGION_IDColumn {
                get {
                    return this.columnREGION_ID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn POP_POINT_IDColumn {
                get {
                    return this.columnPOP_POINT_ID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SETTLEMENT_TYPE_IDColumn {
                get {
                    return this.columnSETTLEMENT_TYPE_ID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn STREET_TYPEColumn {
                get {
                    return this.columnSTREET_TYPE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn STREETColumn {
                get {
                    return this.columnSTREET;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn HOUSE_NUMBERColumn {
                get {
                    return this.columnHOUSE_NUMBER;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn APARTMENT_NUMBERColumn {
                get {
                    return this.columnAPARTMENT_NUMBER;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MICRODISTRICTColumn {
                get {
                    return this.columnMICRODISTRICT;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CONSUMERRow this[int index] {
                get {
                    return ((CONSUMERRow)(this.Rows[index]));
                }
            }
            
            public event CONSUMERRowChangeEventHandler CONSUMERRowChanging;
            
            public event CONSUMERRowChangeEventHandler CONSUMERRowChanged;
            
            public event CONSUMERRowChangeEventHandler CONSUMERRowDeleting;
            
            public event CONSUMERRowChangeEventHandler CONSUMERRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCONSUMERRow(CONSUMERRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CONSUMERRow AddCONSUMERRow(
                        string AZ_INDENT_ID, 
                        int SOURCE, 
                        int GLOBAL_BLOCKING, 
                        string GENDER, 
                        string FIRST_NAME, 
                        string MIDDLE_NAME, 
                        string LAST_NAME, 
                        string COUNTRY_CODE, 
                        int TYPE_OF_ID_CARD, 
                        string ID_CARD_NUMBER, 
                        string RNN, 
                        string ADDITIONAL_INFORMATION, 
                        string POSTAL_CODE, 
                        System.DateTime DATE_OF_BIRTH, 
                        int LANGUAGEID, 
                        int ADDRES_BLOCKING, 
                        string PROMOTIONALID, 
                        string EMAIL, 
                        int EMAIL_BLOCKING, 
                        string PHONE_NUMBER, 
                        int PHONE_BLOCKING, 
                        string MOBILE_NUMBER, 
                        int MOBILE_BLOCKING, 
                        int MEDIA_CODE, 
                        System.Guid ID, 
                        int OBLAST_ID, 
                        int REGION_ID, 
                        int POP_POINT_ID, 
                        int SETTLEMENT_TYPE_ID, 
                        int STREET_TYPE, 
                        int STREET, 
                        string HOUSE_NUMBER, 
                        string APARTMENT_NUMBER, 
                        string MICRODISTRICT) {
                CONSUMERRow rowCONSUMERRow = ((CONSUMERRow)(this.NewRow()));
                rowCONSUMERRow.ItemArray = new object[] {
                        AZ_INDENT_ID,
                        SOURCE,
                        GLOBAL_BLOCKING,
                        GENDER,
                        FIRST_NAME,
                        MIDDLE_NAME,
                        LAST_NAME,
                        COUNTRY_CODE,
                        TYPE_OF_ID_CARD,
                        ID_CARD_NUMBER,
                        RNN,
                        ADDITIONAL_INFORMATION,
                        POSTAL_CODE,
                        DATE_OF_BIRTH,
                        LANGUAGEID,
                        ADDRES_BLOCKING,
                        PROMOTIONALID,
                        EMAIL,
                        EMAIL_BLOCKING,
                        PHONE_NUMBER,
                        PHONE_BLOCKING,
                        MOBILE_NUMBER,
                        MOBILE_BLOCKING,
                        MEDIA_CODE,
                        ID,
                        OBLAST_ID,
                        REGION_ID,
                        POP_POINT_ID,
                        SETTLEMENT_TYPE_ID,
                        STREET_TYPE,
                        STREET,
                        HOUSE_NUMBER,
                        APARTMENT_NUMBER,
                        MICRODISTRICT};
                this.Rows.Add(rowCONSUMERRow);
                return rowCONSUMERRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CONSUMERRow FindByID(System.Guid ID) {
                return ((CONSUMERRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                CONSUMERDataTable cln = ((CONSUMERDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new CONSUMERDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnAZ_INDENT_ID = base.Columns["AZ_INDENT_ID"];
                this.columnSOURCE = base.Columns["SOURCE"];
                this.columnGLOBAL_BLOCKING = base.Columns["GLOBAL_BLOCKING"];
                this.columnGENDER = base.Columns["GENDER"];
                this.columnFIRST_NAME = base.Columns["FIRST_NAME"];
                this.columnMIDDLE_NAME = base.Columns["MIDDLE_NAME"];
                this.columnLAST_NAME = base.Columns["LAST_NAME"];
                this.columnCOUNTRY_CODE = base.Columns["COUNTRY_CODE"];
                this.columnTYPE_OF_ID_CARD = base.Columns["TYPE_OF_ID_CARD"];
                this.columnID_CARD_NUMBER = base.Columns["ID_CARD_NUMBER"];
                this.columnRNN = base.Columns["RNN"];
                this.columnADDITIONAL_INFORMATION = base.Columns["ADDITIONAL_INFORMATION"];
                this.columnPOSTAL_CODE = base.Columns["POSTAL_CODE"];
                this.columnDATE_OF_BIRTH = base.Columns["DATE_OF_BIRTH"];
                this.columnLANGUAGEID = base.Columns["LANGUAGEID"];
                this.columnADDRES_BLOCKING = base.Columns["ADDRES_BLOCKING"];
                this.columnPROMOTIONALID = base.Columns["PROMOTIONALID"];
                this.columnEMAIL = base.Columns["EMAIL"];
                this.columnEMAIL_BLOCKING = base.Columns["EMAIL_BLOCKING"];
                this.columnPHONE_NUMBER = base.Columns["PHONE_NUMBER"];
                this.columnPHONE_BLOCKING = base.Columns["PHONE_BLOCKING"];
                this.columnMOBILE_NUMBER = base.Columns["MOBILE_NUMBER"];
                this.columnMOBILE_BLOCKING = base.Columns["MOBILE_BLOCKING"];
                this.columnMEDIA_CODE = base.Columns["MEDIA_CODE"];
                this.columnID = base.Columns["ID"];
                this.columnOBLAST_ID = base.Columns["OBLAST_ID"];
                this.columnREGION_ID = base.Columns["REGION_ID"];
                this.columnPOP_POINT_ID = base.Columns["POP_POINT_ID"];
                this.columnSETTLEMENT_TYPE_ID = base.Columns["SETTLEMENT_TYPE_ID"];
                this.columnSTREET_TYPE = base.Columns["STREET_TYPE"];
                this.columnSTREET = base.Columns["STREET"];
                this.columnHOUSE_NUMBER = base.Columns["HOUSE_NUMBER"];
                this.columnAPARTMENT_NUMBER = base.Columns["APARTMENT_NUMBER"];
                this.columnMICRODISTRICT = base.Columns["MICRODISTRICT"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnAZ_INDENT_ID = new System.Data.DataColumn("AZ_INDENT_ID", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAZ_INDENT_ID);
                this.columnSOURCE = new System.Data.DataColumn("SOURCE", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSOURCE);
                this.columnGLOBAL_BLOCKING = new System.Data.DataColumn("GLOBAL_BLOCKING", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnGLOBAL_BLOCKING);
                this.columnGENDER = new System.Data.DataColumn("GENDER", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnGENDER);
                this.columnFIRST_NAME = new System.Data.DataColumn("FIRST_NAME", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFIRST_NAME);
                this.columnMIDDLE_NAME = new System.Data.DataColumn("MIDDLE_NAME", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMIDDLE_NAME);
                this.columnLAST_NAME = new System.Data.DataColumn("LAST_NAME", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLAST_NAME);
                this.columnCOUNTRY_CODE = new System.Data.DataColumn("COUNTRY_CODE", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOUNTRY_CODE);
                this.columnTYPE_OF_ID_CARD = new System.Data.DataColumn("TYPE_OF_ID_CARD", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTYPE_OF_ID_CARD);
                this.columnID_CARD_NUMBER = new System.Data.DataColumn("ID_CARD_NUMBER", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID_CARD_NUMBER);
                this.columnRNN = new System.Data.DataColumn("RNN", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRNN);
                this.columnADDITIONAL_INFORMATION = new System.Data.DataColumn("ADDITIONAL_INFORMATION", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnADDITIONAL_INFORMATION);
                this.columnPOSTAL_CODE = new System.Data.DataColumn("POSTAL_CODE", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPOSTAL_CODE);
                this.columnDATE_OF_BIRTH = new System.Data.DataColumn("DATE_OF_BIRTH", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDATE_OF_BIRTH);
                this.columnLANGUAGEID = new System.Data.DataColumn("LANGUAGEID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLANGUAGEID);
                this.columnADDRES_BLOCKING = new System.Data.DataColumn("ADDRES_BLOCKING", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnADDRES_BLOCKING);
                this.columnPROMOTIONALID = new System.Data.DataColumn("PROMOTIONALID", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPROMOTIONALID);
                this.columnEMAIL = new System.Data.DataColumn("EMAIL", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnEMAIL);
                this.columnEMAIL_BLOCKING = new System.Data.DataColumn("EMAIL_BLOCKING", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnEMAIL_BLOCKING);
                this.columnPHONE_NUMBER = new System.Data.DataColumn("PHONE_NUMBER", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPHONE_NUMBER);
                this.columnPHONE_BLOCKING = new System.Data.DataColumn("PHONE_BLOCKING", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPHONE_BLOCKING);
                this.columnMOBILE_NUMBER = new System.Data.DataColumn("MOBILE_NUMBER", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMOBILE_NUMBER);
                this.columnMOBILE_BLOCKING = new System.Data.DataColumn("MOBILE_BLOCKING", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMOBILE_BLOCKING);
                this.columnMEDIA_CODE = new System.Data.DataColumn("MEDIA_CODE", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMEDIA_CODE);
                this.columnID = new System.Data.DataColumn("ID", typeof(System.Guid), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnOBLAST_ID = new System.Data.DataColumn("OBLAST_ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnOBLAST_ID);
                this.columnREGION_ID = new System.Data.DataColumn("REGION_ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnREGION_ID);
                this.columnPOP_POINT_ID = new System.Data.DataColumn("POP_POINT_ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPOP_POINT_ID);
                this.columnSETTLEMENT_TYPE_ID = new System.Data.DataColumn("SETTLEMENT_TYPE_ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSETTLEMENT_TYPE_ID);
                this.columnSTREET_TYPE = new System.Data.DataColumn("STREET_TYPE", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTREET_TYPE);
                this.columnSTREET = new System.Data.DataColumn("STREET", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTREET);
                this.columnHOUSE_NUMBER = new System.Data.DataColumn("HOUSE_NUMBER", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnHOUSE_NUMBER);
                this.columnAPARTMENT_NUMBER = new System.Data.DataColumn("APARTMENT_NUMBER", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAPARTMENT_NUMBER);
                this.columnMICRODISTRICT = new System.Data.DataColumn("MICRODISTRICT", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMICRODISTRICT);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnAZ_INDENT_ID.AllowDBNull = false;
                this.columnAZ_INDENT_ID.MaxLength = 10;
                this.columnSOURCE.AllowDBNull = false;
                this.columnGLOBAL_BLOCKING.AllowDBNull = false;
                this.columnGENDER.AllowDBNull = false;
                this.columnGENDER.MaxLength = 1;
                this.columnFIRST_NAME.AllowDBNull = false;
                this.columnFIRST_NAME.MaxLength = 50;
                this.columnMIDDLE_NAME.AllowDBNull = false;
                this.columnMIDDLE_NAME.MaxLength = 50;
                this.columnLAST_NAME.MaxLength = 50;
                this.columnCOUNTRY_CODE.AllowDBNull = false;
                this.columnCOUNTRY_CODE.MaxLength = 3;
                this.columnID_CARD_NUMBER.MaxLength = 20;
                this.columnRNN.MaxLength = 12;
                this.columnADDITIONAL_INFORMATION.MaxLength = 200;
                this.columnPOSTAL_CODE.MaxLength = 10;
                this.columnDATE_OF_BIRTH.AllowDBNull = false;
                this.columnLANGUAGEID.AllowDBNull = false;
                this.columnPROMOTIONALID.MaxLength = 10;
                this.columnEMAIL.MaxLength = 50;
                this.columnPHONE_NUMBER.MaxLength = 20;
                this.columnMOBILE_NUMBER.MaxLength = 20;
                this.columnID.AllowDBNull = false;
                this.columnID.Unique = true;
                this.columnHOUSE_NUMBER.MaxLength = 10;
                this.columnAPARTMENT_NUMBER.MaxLength = 10;
                this.columnMICRODISTRICT.MaxLength = 40;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CONSUMERRow NewCONSUMERRow() {
                return ((CONSUMERRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new CONSUMERRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(CONSUMERRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CONSUMERRowChanged != null)) {
                    this.CONSUMERRowChanged(this, new CONSUMERRowChangeEvent(((CONSUMERRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CONSUMERRowChanging != null)) {
                    this.CONSUMERRowChanging(this, new CONSUMERRowChangeEvent(((CONSUMERRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CONSUMERRowDeleted != null)) {
                    this.CONSUMERRowDeleted(this, new CONSUMERRowChangeEvent(((CONSUMERRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CONSUMERRowDeleting != null)) {
                    this.CONSUMERRowDeleting(this, new CONSUMERRowChangeEvent(((CONSUMERRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCONSUMERRow(CONSUMERRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                phmkDataSet ds = new phmkDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CONSUMERDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class RESPONCE_CHANELS_DWDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnNAME;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RESPONCE_CHANELS_DWDataTable() {
                this.TableName = "RESPONCE_CHANELS_DW";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RESPONCE_CHANELS_DWDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected RESPONCE_CHANELS_DWDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NAMEColumn {
                get {
                    return this.columnNAME;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RESPONCE_CHANELS_DWRow this[int index] {
                get {
                    return ((RESPONCE_CHANELS_DWRow)(this.Rows[index]));
                }
            }
            
            public event RESPONCE_CHANELS_DWRowChangeEventHandler RESPONCE_CHANELS_DWRowChanging;
            
            public event RESPONCE_CHANELS_DWRowChangeEventHandler RESPONCE_CHANELS_DWRowChanged;
            
            public event RESPONCE_CHANELS_DWRowChangeEventHandler RESPONCE_CHANELS_DWRowDeleting;
            
            public event RESPONCE_CHANELS_DWRowChangeEventHandler RESPONCE_CHANELS_DWRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRESPONCE_CHANELS_DWRow(RESPONCE_CHANELS_DWRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RESPONCE_CHANELS_DWRow AddRESPONCE_CHANELS_DWRow(string NAME) {
                RESPONCE_CHANELS_DWRow rowRESPONCE_CHANELS_DWRow = ((RESPONCE_CHANELS_DWRow)(this.NewRow()));
                rowRESPONCE_CHANELS_DWRow.ItemArray = new object[] {
                        null,
                        NAME};
                this.Rows.Add(rowRESPONCE_CHANELS_DWRow);
                return rowRESPONCE_CHANELS_DWRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RESPONCE_CHANELS_DWRow FindByID(int ID) {
                return ((RESPONCE_CHANELS_DWRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                RESPONCE_CHANELS_DWDataTable cln = ((RESPONCE_CHANELS_DWDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new RESPONCE_CHANELS_DWDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnNAME = base.Columns["NAME"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnNAME = new System.Data.DataColumn("NAME", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNAME);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.columnNAME.AllowDBNull = false;
                this.columnNAME.MaxLength = 30;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RESPONCE_CHANELS_DWRow NewRESPONCE_CHANELS_DWRow() {
                return ((RESPONCE_CHANELS_DWRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new RESPONCE_CHANELS_DWRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(RESPONCE_CHANELS_DWRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RESPONCE_CHANELS_DWRowChanged != null)) {
                    this.RESPONCE_CHANELS_DWRowChanged(this, new RESPONCE_CHANELS_DWRowChangeEvent(((RESPONCE_CHANELS_DWRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RESPONCE_CHANELS_DWRowChanging != null)) {
                    this.RESPONCE_CHANELS_DWRowChanging(this, new RESPONCE_CHANELS_DWRowChangeEvent(((RESPONCE_CHANELS_DWRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RESPONCE_CHANELS_DWRowDeleted != null)) {
                    this.RESPONCE_CHANELS_DWRowDeleted(this, new RESPONCE_CHANELS_DWRowChangeEvent(((RESPONCE_CHANELS_DWRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RESPONCE_CHANELS_DWRowDeleting != null)) {
                    this.RESPONCE_CHANELS_DWRowDeleting(this, new RESPONCE_CHANELS_DWRowChangeEvent(((RESPONCE_CHANELS_DWRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRESPONCE_CHANELS_DWRow(RESPONCE_CHANELS_DWRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                phmkDataSet ds = new phmkDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "RESPONCE_CHANELS_DWDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MEDIA_CLUSTER_DWDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnNAME;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MEDIA_CLUSTER_DWDataTable() {
                this.TableName = "MEDIA_CLUSTER_DW";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MEDIA_CLUSTER_DWDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MEDIA_CLUSTER_DWDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NAMEColumn {
                get {
                    return this.columnNAME;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MEDIA_CLUSTER_DWRow this[int index] {
                get {
                    return ((MEDIA_CLUSTER_DWRow)(this.Rows[index]));
                }
            }
            
            public event MEDIA_CLUSTER_DWRowChangeEventHandler MEDIA_CLUSTER_DWRowChanging;
            
            public event MEDIA_CLUSTER_DWRowChangeEventHandler MEDIA_CLUSTER_DWRowChanged;
            
            public event MEDIA_CLUSTER_DWRowChangeEventHandler MEDIA_CLUSTER_DWRowDeleting;
            
            public event MEDIA_CLUSTER_DWRowChangeEventHandler MEDIA_CLUSTER_DWRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMEDIA_CLUSTER_DWRow(MEDIA_CLUSTER_DWRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MEDIA_CLUSTER_DWRow AddMEDIA_CLUSTER_DWRow(int ID, string NAME) {
                MEDIA_CLUSTER_DWRow rowMEDIA_CLUSTER_DWRow = ((MEDIA_CLUSTER_DWRow)(this.NewRow()));
                rowMEDIA_CLUSTER_DWRow.ItemArray = new object[] {
                        ID,
                        NAME};
                this.Rows.Add(rowMEDIA_CLUSTER_DWRow);
                return rowMEDIA_CLUSTER_DWRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MEDIA_CLUSTER_DWRow FindByID(int ID) {
                return ((MEDIA_CLUSTER_DWRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                MEDIA_CLUSTER_DWDataTable cln = ((MEDIA_CLUSTER_DWDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new MEDIA_CLUSTER_DWDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnNAME = base.Columns["NAME"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnNAME = new System.Data.DataColumn("NAME", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNAME);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AllowDBNull = false;
                this.columnID.Unique = true;
                this.columnNAME.AllowDBNull = false;
                this.columnNAME.MaxLength = 30;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MEDIA_CLUSTER_DWRow NewMEDIA_CLUSTER_DWRow() {
                return ((MEDIA_CLUSTER_DWRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new MEDIA_CLUSTER_DWRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(MEDIA_CLUSTER_DWRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MEDIA_CLUSTER_DWRowChanged != null)) {
                    this.MEDIA_CLUSTER_DWRowChanged(this, new MEDIA_CLUSTER_DWRowChangeEvent(((MEDIA_CLUSTER_DWRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MEDIA_CLUSTER_DWRowChanging != null)) {
                    this.MEDIA_CLUSTER_DWRowChanging(this, new MEDIA_CLUSTER_DWRowChangeEvent(((MEDIA_CLUSTER_DWRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MEDIA_CLUSTER_DWRowDeleted != null)) {
                    this.MEDIA_CLUSTER_DWRowDeleted(this, new MEDIA_CLUSTER_DWRowChangeEvent(((MEDIA_CLUSTER_DWRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MEDIA_CLUSTER_DWRowDeleting != null)) {
                    this.MEDIA_CLUSTER_DWRowDeleting(this, new MEDIA_CLUSTER_DWRowChangeEvent(((MEDIA_CLUSTER_DWRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMEDIA_CLUSTER_DWRow(MEDIA_CLUSTER_DWRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                phmkDataSet ds = new phmkDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MEDIA_CLUSTER_DWDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MEDIA_DWDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnNAME;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MEDIA_DWDataTable() {
                this.TableName = "MEDIA_DW";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MEDIA_DWDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MEDIA_DWDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NAMEColumn {
                get {
                    return this.columnNAME;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MEDIA_DWRow this[int index] {
                get {
                    return ((MEDIA_DWRow)(this.Rows[index]));
                }
            }
            
            public event MEDIA_DWRowChangeEventHandler MEDIA_DWRowChanging;
            
            public event MEDIA_DWRowChangeEventHandler MEDIA_DWRowChanged;
            
            public event MEDIA_DWRowChangeEventHandler MEDIA_DWRowDeleting;
            
            public event MEDIA_DWRowChangeEventHandler MEDIA_DWRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMEDIA_DWRow(MEDIA_DWRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MEDIA_DWRow AddMEDIA_DWRow(int ID, string NAME) {
                MEDIA_DWRow rowMEDIA_DWRow = ((MEDIA_DWRow)(this.NewRow()));
                rowMEDIA_DWRow.ItemArray = new object[] {
                        ID,
                        NAME};
                this.Rows.Add(rowMEDIA_DWRow);
                return rowMEDIA_DWRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MEDIA_DWRow FindByID(int ID) {
                return ((MEDIA_DWRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                MEDIA_DWDataTable cln = ((MEDIA_DWDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new MEDIA_DWDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnNAME = base.Columns["NAME"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnNAME = new System.Data.DataColumn("NAME", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNAME);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AllowDBNull = false;
                this.columnID.Unique = true;
                this.columnNAME.MaxLength = 100;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MEDIA_DWRow NewMEDIA_DWRow() {
                return ((MEDIA_DWRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new MEDIA_DWRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(MEDIA_DWRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MEDIA_DWRowChanged != null)) {
                    this.MEDIA_DWRowChanged(this, new MEDIA_DWRowChangeEvent(((MEDIA_DWRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MEDIA_DWRowChanging != null)) {
                    this.MEDIA_DWRowChanging(this, new MEDIA_DWRowChangeEvent(((MEDIA_DWRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MEDIA_DWRowDeleted != null)) {
                    this.MEDIA_DWRowDeleted(this, new MEDIA_DWRowChangeEvent(((MEDIA_DWRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MEDIA_DWRowDeleting != null)) {
                    this.MEDIA_DWRowDeleting(this, new MEDIA_DWRowChangeEvent(((MEDIA_DWRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMEDIA_DWRow(MEDIA_DWRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                phmkDataSet ds = new phmkDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MEDIA_DWDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class BRAND_FAMILY_DWDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnPMCODE;
            
            private System.Data.DataColumn columnDESCR;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BRAND_FAMILY_DWDataTable() {
                this.TableName = "BRAND_FAMILY_DW";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BRAND_FAMILY_DWDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected BRAND_FAMILY_DWDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PMCODEColumn {
                get {
                    return this.columnPMCODE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DESCRColumn {
                get {
                    return this.columnDESCR;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BRAND_FAMILY_DWRow this[int index] {
                get {
                    return ((BRAND_FAMILY_DWRow)(this.Rows[index]));
                }
            }
            
            public event BRAND_FAMILY_DWRowChangeEventHandler BRAND_FAMILY_DWRowChanging;
            
            public event BRAND_FAMILY_DWRowChangeEventHandler BRAND_FAMILY_DWRowChanged;
            
            public event BRAND_FAMILY_DWRowChangeEventHandler BRAND_FAMILY_DWRowDeleting;
            
            public event BRAND_FAMILY_DWRowChangeEventHandler BRAND_FAMILY_DWRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddBRAND_FAMILY_DWRow(BRAND_FAMILY_DWRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BRAND_FAMILY_DWRow AddBRAND_FAMILY_DWRow(string PMCODE, string DESCR) {
                BRAND_FAMILY_DWRow rowBRAND_FAMILY_DWRow = ((BRAND_FAMILY_DWRow)(this.NewRow()));
                rowBRAND_FAMILY_DWRow.ItemArray = new object[] {
                        null,
                        PMCODE,
                        DESCR};
                this.Rows.Add(rowBRAND_FAMILY_DWRow);
                return rowBRAND_FAMILY_DWRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BRAND_FAMILY_DWRow FindByPMCODE(string PMCODE) {
                return ((BRAND_FAMILY_DWRow)(this.Rows.Find(new object[] {
                            PMCODE})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                BRAND_FAMILY_DWDataTable cln = ((BRAND_FAMILY_DWDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new BRAND_FAMILY_DWDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnPMCODE = base.Columns["PMCODE"];
                this.columnDESCR = base.Columns["DESCR"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnPMCODE = new System.Data.DataColumn("PMCODE", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPMCODE);
                this.columnDESCR = new System.Data.DataColumn("DESCR", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDESCR);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnPMCODE}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnPMCODE.AllowDBNull = false;
                this.columnPMCODE.Unique = true;
                this.columnPMCODE.MaxLength = 20;
                this.columnDESCR.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BRAND_FAMILY_DWRow NewBRAND_FAMILY_DWRow() {
                return ((BRAND_FAMILY_DWRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new BRAND_FAMILY_DWRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(BRAND_FAMILY_DWRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.BRAND_FAMILY_DWRowChanged != null)) {
                    this.BRAND_FAMILY_DWRowChanged(this, new BRAND_FAMILY_DWRowChangeEvent(((BRAND_FAMILY_DWRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.BRAND_FAMILY_DWRowChanging != null)) {
                    this.BRAND_FAMILY_DWRowChanging(this, new BRAND_FAMILY_DWRowChangeEvent(((BRAND_FAMILY_DWRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.BRAND_FAMILY_DWRowDeleted != null)) {
                    this.BRAND_FAMILY_DWRowDeleted(this, new BRAND_FAMILY_DWRowChangeEvent(((BRAND_FAMILY_DWRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.BRAND_FAMILY_DWRowDeleting != null)) {
                    this.BRAND_FAMILY_DWRowDeleting(this, new BRAND_FAMILY_DWRowChangeEvent(((BRAND_FAMILY_DWRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveBRAND_FAMILY_DWRow(BRAND_FAMILY_DWRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                phmkDataSet ds = new phmkDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "BRAND_FAMILY_DWDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class BRANDS_DWDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnMBLONGDESCR;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BRANDS_DWDataTable() {
                this.TableName = "BRANDS_DW";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BRANDS_DWDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected BRANDS_DWDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MBLONGDESCRColumn {
                get {
                    return this.columnMBLONGDESCR;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BRANDS_DWRow this[int index] {
                get {
                    return ((BRANDS_DWRow)(this.Rows[index]));
                }
            }
            
            public event BRANDS_DWRowChangeEventHandler BRANDS_DWRowChanging;
            
            public event BRANDS_DWRowChangeEventHandler BRANDS_DWRowChanged;
            
            public event BRANDS_DWRowChangeEventHandler BRANDS_DWRowDeleting;
            
            public event BRANDS_DWRowChangeEventHandler BRANDS_DWRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddBRANDS_DWRow(BRANDS_DWRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BRANDS_DWRow AddBRANDS_DWRow(string MBLONGDESCR) {
                BRANDS_DWRow rowBRANDS_DWRow = ((BRANDS_DWRow)(this.NewRow()));
                rowBRANDS_DWRow.ItemArray = new object[] {
                        null,
                        MBLONGDESCR};
                this.Rows.Add(rowBRANDS_DWRow);
                return rowBRANDS_DWRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                BRANDS_DWDataTable cln = ((BRANDS_DWDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new BRANDS_DWDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnMBLONGDESCR = base.Columns["MBLONGDESCR"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnMBLONGDESCR = new System.Data.DataColumn("MBLONGDESCR", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMBLONGDESCR);
                this.columnID.AutoIncrement = true;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnMBLONGDESCR.MaxLength = 100;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BRANDS_DWRow NewBRANDS_DWRow() {
                return ((BRANDS_DWRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new BRANDS_DWRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(BRANDS_DWRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.BRANDS_DWRowChanged != null)) {
                    this.BRANDS_DWRowChanged(this, new BRANDS_DWRowChangeEvent(((BRANDS_DWRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.BRANDS_DWRowChanging != null)) {
                    this.BRANDS_DWRowChanging(this, new BRANDS_DWRowChangeEvent(((BRANDS_DWRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.BRANDS_DWRowDeleted != null)) {
                    this.BRANDS_DWRowDeleted(this, new BRANDS_DWRowChangeEvent(((BRANDS_DWRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.BRANDS_DWRowDeleting != null)) {
                    this.BRANDS_DWRowDeleting(this, new BRANDS_DWRowChangeEvent(((BRANDS_DWRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveBRANDS_DWRow(BRANDS_DWRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                phmkDataSet ds = new phmkDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "BRANDS_DWDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class BRAND_FAMILY_DW1DataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnPMCODE;
            
            private System.Data.DataColumn columnDESCR;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BRAND_FAMILY_DW1DataTable() {
                this.TableName = "BRAND_FAMILY_DW1";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BRAND_FAMILY_DW1DataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected BRAND_FAMILY_DW1DataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PMCODEColumn {
                get {
                    return this.columnPMCODE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DESCRColumn {
                get {
                    return this.columnDESCR;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BRAND_FAMILY_DW1Row this[int index] {
                get {
                    return ((BRAND_FAMILY_DW1Row)(this.Rows[index]));
                }
            }
            
            public event BRAND_FAMILY_DW1RowChangeEventHandler BRAND_FAMILY_DW1RowChanging;
            
            public event BRAND_FAMILY_DW1RowChangeEventHandler BRAND_FAMILY_DW1RowChanged;
            
            public event BRAND_FAMILY_DW1RowChangeEventHandler BRAND_FAMILY_DW1RowDeleting;
            
            public event BRAND_FAMILY_DW1RowChangeEventHandler BRAND_FAMILY_DW1RowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddBRAND_FAMILY_DW1Row(BRAND_FAMILY_DW1Row row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BRAND_FAMILY_DW1Row AddBRAND_FAMILY_DW1Row(string PMCODE, string DESCR) {
                BRAND_FAMILY_DW1Row rowBRAND_FAMILY_DW1Row = ((BRAND_FAMILY_DW1Row)(this.NewRow()));
                rowBRAND_FAMILY_DW1Row.ItemArray = new object[] {
                        null,
                        PMCODE,
                        DESCR};
                this.Rows.Add(rowBRAND_FAMILY_DW1Row);
                return rowBRAND_FAMILY_DW1Row;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BRAND_FAMILY_DW1Row FindByPMCODE(string PMCODE) {
                return ((BRAND_FAMILY_DW1Row)(this.Rows.Find(new object[] {
                            PMCODE})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                BRAND_FAMILY_DW1DataTable cln = ((BRAND_FAMILY_DW1DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new BRAND_FAMILY_DW1DataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnPMCODE = base.Columns["PMCODE"];
                this.columnDESCR = base.Columns["DESCR"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnPMCODE = new System.Data.DataColumn("PMCODE", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPMCODE);
                this.columnDESCR = new System.Data.DataColumn("DESCR", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDESCR);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnPMCODE}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnPMCODE.AllowDBNull = false;
                this.columnPMCODE.Unique = true;
                this.columnPMCODE.MaxLength = 20;
                this.columnDESCR.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BRAND_FAMILY_DW1Row NewBRAND_FAMILY_DW1Row() {
                return ((BRAND_FAMILY_DW1Row)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new BRAND_FAMILY_DW1Row(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(BRAND_FAMILY_DW1Row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.BRAND_FAMILY_DW1RowChanged != null)) {
                    this.BRAND_FAMILY_DW1RowChanged(this, new BRAND_FAMILY_DW1RowChangeEvent(((BRAND_FAMILY_DW1Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.BRAND_FAMILY_DW1RowChanging != null)) {
                    this.BRAND_FAMILY_DW1RowChanging(this, new BRAND_FAMILY_DW1RowChangeEvent(((BRAND_FAMILY_DW1Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.BRAND_FAMILY_DW1RowDeleted != null)) {
                    this.BRAND_FAMILY_DW1RowDeleted(this, new BRAND_FAMILY_DW1RowChangeEvent(((BRAND_FAMILY_DW1Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.BRAND_FAMILY_DW1RowDeleting != null)) {
                    this.BRAND_FAMILY_DW1RowDeleting(this, new BRAND_FAMILY_DW1RowChangeEvent(((BRAND_FAMILY_DW1Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveBRAND_FAMILY_DW1Row(BRAND_FAMILY_DW1Row row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                phmkDataSet ds = new phmkDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "BRAND_FAMILY_DW1DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class BRANDS_DW1DataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnMBLONGDESCR;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BRANDS_DW1DataTable() {
                this.TableName = "BRANDS_DW1";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BRANDS_DW1DataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected BRANDS_DW1DataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MBLONGDESCRColumn {
                get {
                    return this.columnMBLONGDESCR;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BRANDS_DW1Row this[int index] {
                get {
                    return ((BRANDS_DW1Row)(this.Rows[index]));
                }
            }
            
            public event BRANDS_DW1RowChangeEventHandler BRANDS_DW1RowChanging;
            
            public event BRANDS_DW1RowChangeEventHandler BRANDS_DW1RowChanged;
            
            public event BRANDS_DW1RowChangeEventHandler BRANDS_DW1RowDeleting;
            
            public event BRANDS_DW1RowChangeEventHandler BRANDS_DW1RowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddBRANDS_DW1Row(BRANDS_DW1Row row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BRANDS_DW1Row AddBRANDS_DW1Row(string MBLONGDESCR) {
                BRANDS_DW1Row rowBRANDS_DW1Row = ((BRANDS_DW1Row)(this.NewRow()));
                rowBRANDS_DW1Row.ItemArray = new object[] {
                        null,
                        MBLONGDESCR};
                this.Rows.Add(rowBRANDS_DW1Row);
                return rowBRANDS_DW1Row;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                BRANDS_DW1DataTable cln = ((BRANDS_DW1DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new BRANDS_DW1DataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnMBLONGDESCR = base.Columns["MBLONGDESCR"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnMBLONGDESCR = new System.Data.DataColumn("MBLONGDESCR", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMBLONGDESCR);
                this.columnID.AutoIncrement = true;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnMBLONGDESCR.MaxLength = 100;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BRANDS_DW1Row NewBRANDS_DW1Row() {
                return ((BRANDS_DW1Row)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new BRANDS_DW1Row(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(BRANDS_DW1Row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.BRANDS_DW1RowChanged != null)) {
                    this.BRANDS_DW1RowChanged(this, new BRANDS_DW1RowChangeEvent(((BRANDS_DW1Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.BRANDS_DW1RowChanging != null)) {
                    this.BRANDS_DW1RowChanging(this, new BRANDS_DW1RowChangeEvent(((BRANDS_DW1Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.BRANDS_DW1RowDeleted != null)) {
                    this.BRANDS_DW1RowDeleted(this, new BRANDS_DW1RowChangeEvent(((BRANDS_DW1Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.BRANDS_DW1RowDeleting != null)) {
                    this.BRANDS_DW1RowDeleting(this, new BRANDS_DW1RowChangeEvent(((BRANDS_DW1Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveBRANDS_DW1Row(BRANDS_DW1Row row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                phmkDataSet ds = new phmkDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "BRANDS_DW1DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PRIZES_DWDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnNAME;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PRIZES_DWDataTable() {
                this.TableName = "PRIZES_DW";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PRIZES_DWDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PRIZES_DWDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NAMEColumn {
                get {
                    return this.columnNAME;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PRIZES_DWRow this[int index] {
                get {
                    return ((PRIZES_DWRow)(this.Rows[index]));
                }
            }
            
            public event PRIZES_DWRowChangeEventHandler PRIZES_DWRowChanging;
            
            public event PRIZES_DWRowChangeEventHandler PRIZES_DWRowChanged;
            
            public event PRIZES_DWRowChangeEventHandler PRIZES_DWRowDeleting;
            
            public event PRIZES_DWRowChangeEventHandler PRIZES_DWRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPRIZES_DWRow(PRIZES_DWRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PRIZES_DWRow AddPRIZES_DWRow(int ID, string NAME) {
                PRIZES_DWRow rowPRIZES_DWRow = ((PRIZES_DWRow)(this.NewRow()));
                rowPRIZES_DWRow.ItemArray = new object[] {
                        ID,
                        NAME};
                this.Rows.Add(rowPRIZES_DWRow);
                return rowPRIZES_DWRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PRIZES_DWRow FindByID(int ID) {
                return ((PRIZES_DWRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                PRIZES_DWDataTable cln = ((PRIZES_DWDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new PRIZES_DWDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnNAME = base.Columns["NAME"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnNAME = new System.Data.DataColumn("NAME", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNAME);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AllowDBNull = false;
                this.columnID.Unique = true;
                this.columnNAME.AllowDBNull = false;
                this.columnNAME.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PRIZES_DWRow NewPRIZES_DWRow() {
                return ((PRIZES_DWRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new PRIZES_DWRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(PRIZES_DWRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PRIZES_DWRowChanged != null)) {
                    this.PRIZES_DWRowChanged(this, new PRIZES_DWRowChangeEvent(((PRIZES_DWRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PRIZES_DWRowChanging != null)) {
                    this.PRIZES_DWRowChanging(this, new PRIZES_DWRowChangeEvent(((PRIZES_DWRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PRIZES_DWRowDeleted != null)) {
                    this.PRIZES_DWRowDeleted(this, new PRIZES_DWRowChangeEvent(((PRIZES_DWRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PRIZES_DWRowDeleting != null)) {
                    this.PRIZES_DWRowDeleting(this, new PRIZES_DWRowChangeEvent(((PRIZES_DWRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePRIZES_DWRow(PRIZES_DWRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                phmkDataSet ds = new phmkDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PRIZES_DWDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PRIZES_DW1DataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnNAME;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PRIZES_DW1DataTable() {
                this.TableName = "PRIZES_DW1";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PRIZES_DW1DataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PRIZES_DW1DataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NAMEColumn {
                get {
                    return this.columnNAME;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PRIZES_DW1Row this[int index] {
                get {
                    return ((PRIZES_DW1Row)(this.Rows[index]));
                }
            }
            
            public event PRIZES_DW1RowChangeEventHandler PRIZES_DW1RowChanging;
            
            public event PRIZES_DW1RowChangeEventHandler PRIZES_DW1RowChanged;
            
            public event PRIZES_DW1RowChangeEventHandler PRIZES_DW1RowDeleting;
            
            public event PRIZES_DW1RowChangeEventHandler PRIZES_DW1RowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPRIZES_DW1Row(PRIZES_DW1Row row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PRIZES_DW1Row AddPRIZES_DW1Row(int ID, string NAME) {
                PRIZES_DW1Row rowPRIZES_DW1Row = ((PRIZES_DW1Row)(this.NewRow()));
                rowPRIZES_DW1Row.ItemArray = new object[] {
                        ID,
                        NAME};
                this.Rows.Add(rowPRIZES_DW1Row);
                return rowPRIZES_DW1Row;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PRIZES_DW1Row FindByID(int ID) {
                return ((PRIZES_DW1Row)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                PRIZES_DW1DataTable cln = ((PRIZES_DW1DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new PRIZES_DW1DataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnNAME = base.Columns["NAME"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnNAME = new System.Data.DataColumn("NAME", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNAME);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AllowDBNull = false;
                this.columnID.Unique = true;
                this.columnNAME.AllowDBNull = false;
                this.columnNAME.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PRIZES_DW1Row NewPRIZES_DW1Row() {
                return ((PRIZES_DW1Row)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new PRIZES_DW1Row(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(PRIZES_DW1Row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PRIZES_DW1RowChanged != null)) {
                    this.PRIZES_DW1RowChanged(this, new PRIZES_DW1RowChangeEvent(((PRIZES_DW1Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PRIZES_DW1RowChanging != null)) {
                    this.PRIZES_DW1RowChanging(this, new PRIZES_DW1RowChangeEvent(((PRIZES_DW1Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PRIZES_DW1RowDeleted != null)) {
                    this.PRIZES_DW1RowDeleted(this, new PRIZES_DW1RowChangeEvent(((PRIZES_DW1Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PRIZES_DW1RowDeleting != null)) {
                    this.PRIZES_DW1RowDeleting(this, new PRIZES_DW1RowChangeEvent(((PRIZES_DW1Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePRIZES_DW1Row(PRIZES_DW1Row row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                phmkDataSet ds = new phmkDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PRIZES_DW1DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CONSUMER_QUESTION_FOR_COMPAIGNDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnGOMPAIGNID;
            
            private System.Data.DataColumn columnQUESTIONID;
            
            private System.Data.DataColumn columnANSWER;
            
            private System.Data.DataColumn columnALTANSWER;
            
            private System.Data.DataColumn columnQUESTIONNAME;
            
            private System.Data.DataColumn columnQUESTIONTYPE;
            
            private System.Data.DataColumn columnANSWERNAME;
            
            private System.Data.DataColumn columnQUESTIONTYPENAME;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CONSUMER_QUESTION_FOR_COMPAIGNDataTable() {
                this.TableName = "CONSUMER_QUESTION_FOR_COMPAIGN";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CONSUMER_QUESTION_FOR_COMPAIGNDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CONSUMER_QUESTION_FOR_COMPAIGNDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn GOMPAIGNIDColumn {
                get {
                    return this.columnGOMPAIGNID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn QUESTIONIDColumn {
                get {
                    return this.columnQUESTIONID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ANSWERColumn {
                get {
                    return this.columnANSWER;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ALTANSWERColumn {
                get {
                    return this.columnALTANSWER;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn QUESTIONNAMEColumn {
                get {
                    return this.columnQUESTIONNAME;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn QUESTIONTYPEColumn {
                get {
                    return this.columnQUESTIONTYPE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ANSWERNAMEColumn {
                get {
                    return this.columnANSWERNAME;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn QUESTIONTYPENAMEColumn {
                get {
                    return this.columnQUESTIONTYPENAME;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CONSUMER_QUESTION_FOR_COMPAIGNRow this[int index] {
                get {
                    return ((CONSUMER_QUESTION_FOR_COMPAIGNRow)(this.Rows[index]));
                }
            }
            
            public event CONSUMER_QUESTION_FOR_COMPAIGNRowChangeEventHandler CONSUMER_QUESTION_FOR_COMPAIGNRowChanging;
            
            public event CONSUMER_QUESTION_FOR_COMPAIGNRowChangeEventHandler CONSUMER_QUESTION_FOR_COMPAIGNRowChanged;
            
            public event CONSUMER_QUESTION_FOR_COMPAIGNRowChangeEventHandler CONSUMER_QUESTION_FOR_COMPAIGNRowDeleting;
            
            public event CONSUMER_QUESTION_FOR_COMPAIGNRowChangeEventHandler CONSUMER_QUESTION_FOR_COMPAIGNRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCONSUMER_QUESTION_FOR_COMPAIGNRow(CONSUMER_QUESTION_FOR_COMPAIGNRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CONSUMER_QUESTION_FOR_COMPAIGNRow AddCONSUMER_QUESTION_FOR_COMPAIGNRow(System.Guid ID, System.Guid GOMPAIGNID, int QUESTIONID, int ANSWER, string ALTANSWER, string QUESTIONNAME, int QUESTIONTYPE, string ANSWERNAME, string QUESTIONTYPENAME) {
                CONSUMER_QUESTION_FOR_COMPAIGNRow rowCONSUMER_QUESTION_FOR_COMPAIGNRow = ((CONSUMER_QUESTION_FOR_COMPAIGNRow)(this.NewRow()));
                rowCONSUMER_QUESTION_FOR_COMPAIGNRow.ItemArray = new object[] {
                        ID,
                        GOMPAIGNID,
                        QUESTIONID,
                        ANSWER,
                        ALTANSWER,
                        QUESTIONNAME,
                        QUESTIONTYPE,
                        ANSWERNAME,
                        QUESTIONTYPENAME};
                this.Rows.Add(rowCONSUMER_QUESTION_FOR_COMPAIGNRow);
                return rowCONSUMER_QUESTION_FOR_COMPAIGNRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CONSUMER_QUESTION_FOR_COMPAIGNRow FindByIDGOMPAIGNIDQUESTIONID(System.Guid ID, System.Guid GOMPAIGNID, int QUESTIONID) {
                return ((CONSUMER_QUESTION_FOR_COMPAIGNRow)(this.Rows.Find(new object[] {
                            ID,
                            GOMPAIGNID,
                            QUESTIONID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                CONSUMER_QUESTION_FOR_COMPAIGNDataTable cln = ((CONSUMER_QUESTION_FOR_COMPAIGNDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new CONSUMER_QUESTION_FOR_COMPAIGNDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnGOMPAIGNID = base.Columns["GOMPAIGNID"];
                this.columnQUESTIONID = base.Columns["QUESTIONID"];
                this.columnANSWER = base.Columns["ANSWER"];
                this.columnALTANSWER = base.Columns["ALTANSWER"];
                this.columnQUESTIONNAME = base.Columns["QUESTIONNAME"];
                this.columnQUESTIONTYPE = base.Columns["QUESTIONTYPE"];
                this.columnANSWERNAME = base.Columns["ANSWERNAME"];
                this.columnQUESTIONTYPENAME = base.Columns["QUESTIONTYPENAME"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(System.Guid), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnGOMPAIGNID = new System.Data.DataColumn("GOMPAIGNID", typeof(System.Guid), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnGOMPAIGNID);
                this.columnQUESTIONID = new System.Data.DataColumn("QUESTIONID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnQUESTIONID);
                this.columnANSWER = new System.Data.DataColumn("ANSWER", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnANSWER);
                this.columnALTANSWER = new System.Data.DataColumn("ALTANSWER", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnALTANSWER);
                this.columnQUESTIONNAME = new System.Data.DataColumn("QUESTIONNAME", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnQUESTIONNAME);
                this.columnQUESTIONTYPE = new System.Data.DataColumn("QUESTIONTYPE", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnQUESTIONTYPE);
                this.columnANSWERNAME = new System.Data.DataColumn("ANSWERNAME", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnANSWERNAME);
                this.columnQUESTIONTYPENAME = new System.Data.DataColumn("QUESTIONTYPENAME", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnQUESTIONTYPENAME);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnID,
                                this.columnGOMPAIGNID,
                                this.columnQUESTIONID}, true));
                this.columnID.AllowDBNull = false;
                this.columnGOMPAIGNID.AllowDBNull = false;
                this.columnQUESTIONID.AllowDBNull = false;
                this.columnALTANSWER.MaxLength = 255;
                this.columnQUESTIONNAME.AllowDBNull = false;
                this.columnQUESTIONNAME.MaxLength = 400;
                this.columnQUESTIONTYPE.AllowDBNull = false;
                this.columnANSWERNAME.MaxLength = 50;
                this.columnQUESTIONTYPENAME.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CONSUMER_QUESTION_FOR_COMPAIGNRow NewCONSUMER_QUESTION_FOR_COMPAIGNRow() {
                return ((CONSUMER_QUESTION_FOR_COMPAIGNRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new CONSUMER_QUESTION_FOR_COMPAIGNRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(CONSUMER_QUESTION_FOR_COMPAIGNRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CONSUMER_QUESTION_FOR_COMPAIGNRowChanged != null)) {
                    this.CONSUMER_QUESTION_FOR_COMPAIGNRowChanged(this, new CONSUMER_QUESTION_FOR_COMPAIGNRowChangeEvent(((CONSUMER_QUESTION_FOR_COMPAIGNRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CONSUMER_QUESTION_FOR_COMPAIGNRowChanging != null)) {
                    this.CONSUMER_QUESTION_FOR_COMPAIGNRowChanging(this, new CONSUMER_QUESTION_FOR_COMPAIGNRowChangeEvent(((CONSUMER_QUESTION_FOR_COMPAIGNRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CONSUMER_QUESTION_FOR_COMPAIGNRowDeleted != null)) {
                    this.CONSUMER_QUESTION_FOR_COMPAIGNRowDeleted(this, new CONSUMER_QUESTION_FOR_COMPAIGNRowChangeEvent(((CONSUMER_QUESTION_FOR_COMPAIGNRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CONSUMER_QUESTION_FOR_COMPAIGNRowDeleting != null)) {
                    this.CONSUMER_QUESTION_FOR_COMPAIGNRowDeleting(this, new CONSUMER_QUESTION_FOR_COMPAIGNRowChangeEvent(((CONSUMER_QUESTION_FOR_COMPAIGNRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCONSUMER_QUESTION_FOR_COMPAIGNRow(CONSUMER_QUESTION_FOR_COMPAIGNRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                phmkDataSet ds = new phmkDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CONSUMER_QUESTION_FOR_COMPAIGNDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ANSWERS_DWDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnSID;
            
            private System.Data.DataColumn columnANSWER;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ANSWERS_DWDataTable() {
                this.TableName = "ANSWERS_DW";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ANSWERS_DWDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ANSWERS_DWDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SIDColumn {
                get {
                    return this.columnSID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ANSWERColumn {
                get {
                    return this.columnANSWER;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ANSWERS_DWRow this[int index] {
                get {
                    return ((ANSWERS_DWRow)(this.Rows[index]));
                }
            }
            
            public event ANSWERS_DWRowChangeEventHandler ANSWERS_DWRowChanging;
            
            public event ANSWERS_DWRowChangeEventHandler ANSWERS_DWRowChanged;
            
            public event ANSWERS_DWRowChangeEventHandler ANSWERS_DWRowDeleting;
            
            public event ANSWERS_DWRowChangeEventHandler ANSWERS_DWRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddANSWERS_DWRow(ANSWERS_DWRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ANSWERS_DWRow AddANSWERS_DWRow(string ANSWER) {
                ANSWERS_DWRow rowANSWERS_DWRow = ((ANSWERS_DWRow)(this.NewRow()));
                rowANSWERS_DWRow.ItemArray = new object[] {
                        null,
                        ANSWER};
                this.Rows.Add(rowANSWERS_DWRow);
                return rowANSWERS_DWRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ANSWERS_DWDataTable cln = ((ANSWERS_DWDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ANSWERS_DWDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSID = base.Columns["SID"];
                this.columnANSWER = base.Columns["ANSWER"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSID = new System.Data.DataColumn("SID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSID);
                this.columnANSWER = new System.Data.DataColumn("ANSWER", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnANSWER);
                this.columnSID.AutoIncrement = true;
                this.columnSID.AllowDBNull = false;
                this.columnSID.ReadOnly = true;
                this.columnANSWER.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ANSWERS_DWRow NewANSWERS_DWRow() {
                return ((ANSWERS_DWRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ANSWERS_DWRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ANSWERS_DWRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ANSWERS_DWRowChanged != null)) {
                    this.ANSWERS_DWRowChanged(this, new ANSWERS_DWRowChangeEvent(((ANSWERS_DWRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ANSWERS_DWRowChanging != null)) {
                    this.ANSWERS_DWRowChanging(this, new ANSWERS_DWRowChangeEvent(((ANSWERS_DWRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ANSWERS_DWRowDeleted != null)) {
                    this.ANSWERS_DWRowDeleted(this, new ANSWERS_DWRowChangeEvent(((ANSWERS_DWRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ANSWERS_DWRowDeleting != null)) {
                    this.ANSWERS_DWRowDeleting(this, new ANSWERS_DWRowChangeEvent(((ANSWERS_DWRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveANSWERS_DWRow(ANSWERS_DWRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                phmkDataSet ds = new phmkDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ANSWERS_DWDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class RESPONCE_CHANELSDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnNAME;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RESPONCE_CHANELSDataTable() {
                this.TableName = "RESPONCE_CHANELS";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RESPONCE_CHANELSDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected RESPONCE_CHANELSDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NAMEColumn {
                get {
                    return this.columnNAME;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RESPONCE_CHANELSRow this[int index] {
                get {
                    return ((RESPONCE_CHANELSRow)(this.Rows[index]));
                }
            }
            
            public event RESPONCE_CHANELSRowChangeEventHandler RESPONCE_CHANELSRowChanging;
            
            public event RESPONCE_CHANELSRowChangeEventHandler RESPONCE_CHANELSRowChanged;
            
            public event RESPONCE_CHANELSRowChangeEventHandler RESPONCE_CHANELSRowDeleting;
            
            public event RESPONCE_CHANELSRowChangeEventHandler RESPONCE_CHANELSRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRESPONCE_CHANELSRow(RESPONCE_CHANELSRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RESPONCE_CHANELSRow AddRESPONCE_CHANELSRow(int ID, string NAME) {
                RESPONCE_CHANELSRow rowRESPONCE_CHANELSRow = ((RESPONCE_CHANELSRow)(this.NewRow()));
                rowRESPONCE_CHANELSRow.ItemArray = new object[] {
                        ID,
                        NAME};
                this.Rows.Add(rowRESPONCE_CHANELSRow);
                return rowRESPONCE_CHANELSRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RESPONCE_CHANELSRow FindByID(int ID) {
                return ((RESPONCE_CHANELSRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                RESPONCE_CHANELSDataTable cln = ((RESPONCE_CHANELSDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new RESPONCE_CHANELSDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnNAME = base.Columns["NAME"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnNAME = new System.Data.DataColumn("NAME", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNAME);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AllowDBNull = false;
                this.columnID.Unique = true;
                this.columnNAME.AllowDBNull = false;
                this.columnNAME.MaxLength = 30;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RESPONCE_CHANELSRow NewRESPONCE_CHANELSRow() {
                return ((RESPONCE_CHANELSRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new RESPONCE_CHANELSRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(RESPONCE_CHANELSRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RESPONCE_CHANELSRowChanged != null)) {
                    this.RESPONCE_CHANELSRowChanged(this, new RESPONCE_CHANELSRowChangeEvent(((RESPONCE_CHANELSRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RESPONCE_CHANELSRowChanging != null)) {
                    this.RESPONCE_CHANELSRowChanging(this, new RESPONCE_CHANELSRowChangeEvent(((RESPONCE_CHANELSRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RESPONCE_CHANELSRowDeleted != null)) {
                    this.RESPONCE_CHANELSRowDeleted(this, new RESPONCE_CHANELSRowChangeEvent(((RESPONCE_CHANELSRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RESPONCE_CHANELSRowDeleting != null)) {
                    this.RESPONCE_CHANELSRowDeleting(this, new RESPONCE_CHANELSRowChangeEvent(((RESPONCE_CHANELSRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRESPONCE_CHANELSRow(RESPONCE_CHANELSRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                phmkDataSet ds = new phmkDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "RESPONCE_CHANELSDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MICRODISTRICTDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnNAME;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MICRODISTRICTDataTable() {
                this.TableName = "MICRODISTRICT";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MICRODISTRICTDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MICRODISTRICTDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NAMEColumn {
                get {
                    return this.columnNAME;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MICRODISTRICTRow this[int index] {
                get {
                    return ((MICRODISTRICTRow)(this.Rows[index]));
                }
            }
            
            public event MICRODISTRICTRowChangeEventHandler MICRODISTRICTRowChanging;
            
            public event MICRODISTRICTRowChangeEventHandler MICRODISTRICTRowChanged;
            
            public event MICRODISTRICTRowChangeEventHandler MICRODISTRICTRowDeleting;
            
            public event MICRODISTRICTRowChangeEventHandler MICRODISTRICTRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMICRODISTRICTRow(MICRODISTRICTRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MICRODISTRICTRow AddMICRODISTRICTRow(string NAME) {
                MICRODISTRICTRow rowMICRODISTRICTRow = ((MICRODISTRICTRow)(this.NewRow()));
                rowMICRODISTRICTRow.ItemArray = new object[] {
                        null,
                        NAME};
                this.Rows.Add(rowMICRODISTRICTRow);
                return rowMICRODISTRICTRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MICRODISTRICTRow FindByID(int ID) {
                return ((MICRODISTRICTRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                MICRODISTRICTDataTable cln = ((MICRODISTRICTDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new MICRODISTRICTDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnNAME = base.Columns["NAME"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnNAME = new System.Data.DataColumn("NAME", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNAME);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.columnNAME.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MICRODISTRICTRow NewMICRODISTRICTRow() {
                return ((MICRODISTRICTRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new MICRODISTRICTRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(MICRODISTRICTRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MICRODISTRICTRowChanged != null)) {
                    this.MICRODISTRICTRowChanged(this, new MICRODISTRICTRowChangeEvent(((MICRODISTRICTRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MICRODISTRICTRowChanging != null)) {
                    this.MICRODISTRICTRowChanging(this, new MICRODISTRICTRowChangeEvent(((MICRODISTRICTRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MICRODISTRICTRowDeleted != null)) {
                    this.MICRODISTRICTRowDeleted(this, new MICRODISTRICTRowChangeEvent(((MICRODISTRICTRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MICRODISTRICTRowDeleting != null)) {
                    this.MICRODISTRICTRowDeleting(this, new MICRODISTRICTRowChangeEvent(((MICRODISTRICTRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMICRODISTRICTRow(MICRODISTRICTRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                phmkDataSet ds = new phmkDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MICRODISTRICTDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class BRANDSRow : System.Data.DataRow {
            
            private BRANDSDataTable tableBRANDS;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BRANDSRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableBRANDS = ((BRANDSDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BRANDFAMILY {
                get {
                    return ((string)(this[this.tableBRANDS.BRANDFAMILYColumn]));
                }
                set {
                    this[this.tableBRANDS.BRANDFAMILYColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string THICKCAT {
                get {
                    return ((string)(this[this.tableBRANDS.THICKCATColumn]));
                }
                set {
                    this[this.tableBRANDS.THICKCATColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LENGTHCAT {
                get {
                    return ((string)(this[this.tableBRANDS.LENGTHCATColumn]));
                }
                set {
                    this[this.tableBRANDS.LENGTHCATColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BRANDDIF {
                get {
                    try {
                        return ((string)(this[this.tableBRANDS.BRANDDIFColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'BRANDDIF\' in table \'BRANDS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBRANDS.BRANDDIFColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool MENTHIND {
                get {
                    try {
                        return ((bool)(this[this.tableBRANDS.MENTHINDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'MENTHIND\' in table \'BRANDS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBRANDS.MENTHINDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PACKTYPE {
                get {
                    return ((string)(this[this.tableBRANDS.PACKTYPEColumn]));
                }
                set {
                    this[this.tableBRANDS.PACKTYPEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool FILTIND {
                get {
                    try {
                        return ((bool)(this[this.tableBRANDS.FILTINDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'FILTIND\' in table \'BRANDS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBRANDS.FILTINDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ITEMSPACK {
                get {
                    try {
                        return ((int)(this[this.tableBRANDS.ITEMSPACKColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ITEMSPACK\' in table \'BRANDS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBRANDS.ITEMSPACKColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MARKBC {
                get {
                    return ((string)(this[this.tableBRANDS.MARKBCColumn]));
                }
                set {
                    this[this.tableBRANDS.MARKBCColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MBLONGDESCR {
                get {
                    try {
                        return ((string)(this[this.tableBRANDS.MBLONGDESCRColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'MBLONGDESCR\' in table \'BRANDS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBRANDS.MBLONGDESCRColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BLENDTC {
                get {
                    try {
                        return ((string)(this[this.tableBRANDS.BLENDTCColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'BLENDTC\' in table \'BRANDS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBRANDS.BLENDTCColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SPECFLAVC {
                get {
                    return ((string)(this[this.tableBRANDS.SPECFLAVCColumn]));
                }
                set {
                    this[this.tableBRANDS.SPECFLAVCColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string COMPANYCODE {
                get {
                    return ((string)(this[this.tableBRANDS.COMPANYCODEColumn]));
                }
                set {
                    this[this.tableBRANDS.COMPANYCODEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BRAND_FAMILY_DESCR {
                get {
                    try {
                        return ((string)(this[this.tableBRANDS.BRAND_FAMILY_DESCRColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'BRAND_FAMILY_DESCR\' in table \'BRANDS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBRANDS.BRAND_FAMILY_DESCRColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string COMPANY_CODE_DESCRIPTION {
                get {
                    try {
                        return ((string)(this[this.tableBRANDS.COMPANY_CODE_DESCRIPTIONColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'COMPANY_CODE_DESCRIPTION\' in table \'BRANDS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBRANDS.COMPANY_CODE_DESCRIPTIONColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LENGTH_CATEGORY_DESCR {
                get {
                    try {
                        return ((string)(this[this.tableBRANDS.LENGTH_CATEGORY_DESCRColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'LENGTH_CATEGORY_DESCR\' in table \'BRANDS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBRANDS.LENGTH_CATEGORY_DESCRColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PACK_TYPE_DESCR {
                get {
                    try {
                        return ((string)(this[this.tableBRANDS.PACK_TYPE_DESCRColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PACK_TYPE_DESCR\' in table \'BRANDS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBRANDS.PACK_TYPE_DESCRColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SPECIAL_FLAVOR_CODE_DESCR {
                get {
                    try {
                        return ((string)(this[this.tableBRANDS.SPECIAL_FLAVOR_CODE_DESCRColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SPECIAL_FLAVOR_CODE_DESCR\' in table \'BRANDS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBRANDS.SPECIAL_FLAVOR_CODE_DESCRColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string THICKNESS_CATEGORY_DESCR {
                get {
                    try {
                        return ((string)(this[this.tableBRANDS.THICKNESS_CATEGORY_DESCRColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'THICKNESS_CATEGORY_DESCR\' in table \'BRANDS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBRANDS.THICKNESS_CATEGORY_DESCRColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBRANDDIFNull() {
                return this.IsNull(this.tableBRANDS.BRANDDIFColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBRANDDIFNull() {
                this[this.tableBRANDS.BRANDDIFColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMENTHINDNull() {
                return this.IsNull(this.tableBRANDS.MENTHINDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMENTHINDNull() {
                this[this.tableBRANDS.MENTHINDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFILTINDNull() {
                return this.IsNull(this.tableBRANDS.FILTINDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFILTINDNull() {
                this[this.tableBRANDS.FILTINDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsITEMSPACKNull() {
                return this.IsNull(this.tableBRANDS.ITEMSPACKColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetITEMSPACKNull() {
                this[this.tableBRANDS.ITEMSPACKColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMBLONGDESCRNull() {
                return this.IsNull(this.tableBRANDS.MBLONGDESCRColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMBLONGDESCRNull() {
                this[this.tableBRANDS.MBLONGDESCRColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBLENDTCNull() {
                return this.IsNull(this.tableBRANDS.BLENDTCColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBLENDTCNull() {
                this[this.tableBRANDS.BLENDTCColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBRAND_FAMILY_DESCRNull() {
                return this.IsNull(this.tableBRANDS.BRAND_FAMILY_DESCRColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBRAND_FAMILY_DESCRNull() {
                this[this.tableBRANDS.BRAND_FAMILY_DESCRColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCOMPANY_CODE_DESCRIPTIONNull() {
                return this.IsNull(this.tableBRANDS.COMPANY_CODE_DESCRIPTIONColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCOMPANY_CODE_DESCRIPTIONNull() {
                this[this.tableBRANDS.COMPANY_CODE_DESCRIPTIONColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLENGTH_CATEGORY_DESCRNull() {
                return this.IsNull(this.tableBRANDS.LENGTH_CATEGORY_DESCRColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLENGTH_CATEGORY_DESCRNull() {
                this[this.tableBRANDS.LENGTH_CATEGORY_DESCRColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPACK_TYPE_DESCRNull() {
                return this.IsNull(this.tableBRANDS.PACK_TYPE_DESCRColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPACK_TYPE_DESCRNull() {
                this[this.tableBRANDS.PACK_TYPE_DESCRColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSPECIAL_FLAVOR_CODE_DESCRNull() {
                return this.IsNull(this.tableBRANDS.SPECIAL_FLAVOR_CODE_DESCRColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSPECIAL_FLAVOR_CODE_DESCRNull() {
                this[this.tableBRANDS.SPECIAL_FLAVOR_CODE_DESCRColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTHICKNESS_CATEGORY_DESCRNull() {
                return this.IsNull(this.tableBRANDS.THICKNESS_CATEGORY_DESCRColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTHICKNESS_CATEGORY_DESCRNull() {
                this[this.tableBRANDS.THICKNESS_CATEGORY_DESCRColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class COMPANY_CODERow : System.Data.DataRow {
            
            private COMPANY_CODEDataTable tableCOMPANY_CODE;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal COMPANY_CODERow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCOMPANY_CODE = ((COMPANY_CODEDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PMCODE {
                get {
                    return ((string)(this[this.tableCOMPANY_CODE.PMCODEColumn]));
                }
                set {
                    this[this.tableCOMPANY_CODE.PMCODEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DESCRIPTION {
                get {
                    try {
                        return ((string)(this[this.tableCOMPANY_CODE.DESCRIPTIONColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DESCRIPTION\' in table \'COMPANY_CODE\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCOMPANY_CODE.DESCRIPTIONColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDESCRIPTIONNull() {
                return this.IsNull(this.tableCOMPANY_CODE.DESCRIPTIONColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDESCRIPTIONNull() {
                this[this.tableCOMPANY_CODE.DESCRIPTIONColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LENGTH_CATEGORYRow : System.Data.DataRow {
            
            private LENGTH_CATEGORYDataTable tableLENGTH_CATEGORY;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LENGTH_CATEGORYRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLENGTH_CATEGORY = ((LENGTH_CATEGORYDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CATEGORY {
                get {
                    return ((string)(this[this.tableLENGTH_CATEGORY.CATEGORYColumn]));
                }
                set {
                    this[this.tableLENGTH_CATEGORY.CATEGORYColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DESCR {
                get {
                    try {
                        return ((string)(this[this.tableLENGTH_CATEGORY.DESCRColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DESCR\' in table \'LENGTH_CATEGORY\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLENGTH_CATEGORY.DESCRColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDESCRNull() {
                return this.IsNull(this.tableLENGTH_CATEGORY.DESCRColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDESCRNull() {
                this[this.tableLENGTH_CATEGORY.DESCRColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PACK_TYPERow : System.Data.DataRow {
            
            private PACK_TYPEDataTable tablePACK_TYPE;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PACK_TYPERow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePACK_TYPE = ((PACK_TYPEDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TYPE {
                get {
                    return ((string)(this[this.tablePACK_TYPE.TYPEColumn]));
                }
                set {
                    this[this.tablePACK_TYPE.TYPEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DESCR {
                get {
                    try {
                        return ((string)(this[this.tablePACK_TYPE.DESCRColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DESCR\' in table \'PACK_TYPE\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePACK_TYPE.DESCRColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDESCRNull() {
                return this.IsNull(this.tablePACK_TYPE.DESCRColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDESCRNull() {
                this[this.tablePACK_TYPE.DESCRColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class BRAND_FAMILYRow : System.Data.DataRow {
            
            private BRAND_FAMILYDataTable tableBRAND_FAMILY;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BRAND_FAMILYRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableBRAND_FAMILY = ((BRAND_FAMILYDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PMCODE {
                get {
                    return ((string)(this[this.tableBRAND_FAMILY.PMCODEColumn]));
                }
                set {
                    this[this.tableBRAND_FAMILY.PMCODEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DESCR {
                get {
                    try {
                        return ((string)(this[this.tableBRAND_FAMILY.DESCRColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DESCR\' in table \'BRAND_FAMILY\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBRAND_FAMILY.DESCRColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDESCRNull() {
                return this.IsNull(this.tableBRAND_FAMILY.DESCRColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDESCRNull() {
                this[this.tableBRAND_FAMILY.DESCRColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SPECIAL_FLAVOR_CODERow : System.Data.DataRow {
            
            private SPECIAL_FLAVOR_CODEDataTable tableSPECIAL_FLAVOR_CODE;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SPECIAL_FLAVOR_CODERow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSPECIAL_FLAVOR_CODE = ((SPECIAL_FLAVOR_CODEDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CODE {
                get {
                    return ((string)(this[this.tableSPECIAL_FLAVOR_CODE.CODEColumn]));
                }
                set {
                    this[this.tableSPECIAL_FLAVOR_CODE.CODEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DESCR {
                get {
                    try {
                        return ((string)(this[this.tableSPECIAL_FLAVOR_CODE.DESCRColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DESCR\' in table \'SPECIAL_FLAVOR_CODE\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSPECIAL_FLAVOR_CODE.DESCRColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDESCRNull() {
                return this.IsNull(this.tableSPECIAL_FLAVOR_CODE.DESCRColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDESCRNull() {
                this[this.tableSPECIAL_FLAVOR_CODE.DESCRColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class THICKNESS_CATEGORYRow : System.Data.DataRow {
            
            private THICKNESS_CATEGORYDataTable tableTHICKNESS_CATEGORY;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal THICKNESS_CATEGORYRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTHICKNESS_CATEGORY = ((THICKNESS_CATEGORYDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CATEGORY {
                get {
                    return ((string)(this[this.tableTHICKNESS_CATEGORY.CATEGORYColumn]));
                }
                set {
                    this[this.tableTHICKNESS_CATEGORY.CATEGORYColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DESCR {
                get {
                    try {
                        return ((string)(this[this.tableTHICKNESS_CATEGORY.DESCRColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DESCR\' in table \'THICKNESS_CATEGORY\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTHICKNESS_CATEGORY.DESCRColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDESCRNull() {
                return this.IsNull(this.tableTHICKNESS_CATEGORY.DESCRColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDESCRNull() {
                this[this.tableTHICKNESS_CATEGORY.DESCRColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SIGNATURE_TYPERow : System.Data.DataRow {
            
            private SIGNATURE_TYPEDataTable tableSIGNATURE_TYPE;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SIGNATURE_TYPERow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSIGNATURE_TYPE = ((SIGNATURE_TYPEDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableSIGNATURE_TYPE.IDColumn]));
                }
                set {
                    this[this.tableSIGNATURE_TYPE.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DESCR {
                get {
                    return ((string)(this[this.tableSIGNATURE_TYPE.DESCRColumn]));
                }
                set {
                    this[this.tableSIGNATURE_TYPE.DESCRColumn] = value;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PASSPORT_TYPERow : System.Data.DataRow {
            
            private PASSPORT_TYPEDataTable tablePASSPORT_TYPE;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PASSPORT_TYPERow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePASSPORT_TYPE = ((PASSPORT_TYPEDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tablePASSPORT_TYPE.IDColumn]));
                }
                set {
                    this[this.tablePASSPORT_TYPE.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NAME {
                get {
                    return ((string)(this[this.tablePASSPORT_TYPE.NAMEColumn]));
                }
                set {
                    this[this.tablePASSPORT_TYPE.NAMEColumn] = value;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LOYALTYRow : System.Data.DataRow {
            
            private LOYALTYDataTable tableLOYALTY;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LOYALTYRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLOYALTY = ((LOYALTYDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableLOYALTY.IDColumn]));
                }
                set {
                    this[this.tableLOYALTY.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DESCR {
                get {
                    return ((string)(this[this.tableLOYALTY.DESCRColumn]));
                }
                set {
                    this[this.tableLOYALTY.DESCRColumn] = value;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LANGUAGERow : System.Data.DataRow {
            
            private LANGUAGEDataTable tableLANGUAGE;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LANGUAGERow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLANGUAGE = ((LANGUAGEDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableLANGUAGE.IDColumn]));
                }
                set {
                    this[this.tableLANGUAGE.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LANGUAGECODE {
                get {
                    return ((string)(this[this.tableLANGUAGE.LANGUAGECODEColumn]));
                }
                set {
                    this[this.tableLANGUAGE.LANGUAGECODEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NAME {
                get {
                    try {
                        return ((string)(this[this.tableLANGUAGE.NAMEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'NAME\' in table \'LANGUAGE\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLANGUAGE.NAMEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNAMENull() {
                return this.IsNull(this.tableLANGUAGE.NAMEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNAMENull() {
                this[this.tableLANGUAGE.NAMEColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class OBLASTRow : System.Data.DataRow {
            
            private OBLASTDataTable tableOBLAST;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OBLASTRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableOBLAST = ((OBLASTDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OBLASTID {
                get {
                    try {
                        return ((int)(this[this.tableOBLAST.OBLASTIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'OBLASTID\' in table \'OBLAST\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOBLAST.OBLASTIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NAME {
                get {
                    return ((string)(this[this.tableOBLAST.NAMEColumn]));
                }
                set {
                    this[this.tableOBLAST.NAMEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOBLASTIDNull() {
                return this.IsNull(this.tableOBLAST.OBLASTIDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOBLASTIDNull() {
                this[this.tableOBLAST.OBLASTIDColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class REGIONRow : System.Data.DataRow {
            
            private REGIONDataTable tableREGION;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal REGIONRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableREGION = ((REGIONDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int REGIONID {
                get {
                    return ((int)(this[this.tableREGION.REGIONIDColumn]));
                }
                set {
                    this[this.tableREGION.REGIONIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OBLASTID {
                get {
                    try {
                        return ((int)(this[this.tableREGION.OBLASTIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'OBLASTID\' in table \'REGION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableREGION.OBLASTIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NAME {
                get {
                    return ((string)(this[this.tableREGION.NAMEColumn]));
                }
                set {
                    this[this.tableREGION.NAMEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OBLNAME {
                get {
                    try {
                        return ((string)(this[this.tableREGION.OBLNAMEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'OBLNAME\' in table \'REGION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableREGION.OBLNAMEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOBLASTIDNull() {
                return this.IsNull(this.tableREGION.OBLASTIDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOBLASTIDNull() {
                this[this.tableREGION.OBLASTIDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOBLNAMENull() {
                return this.IsNull(this.tableREGION.OBLNAMEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOBLNAMENull() {
                this[this.tableREGION.OBLNAMEColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SETTLEMENT_TYPERow : System.Data.DataRow {
            
            private SETTLEMENT_TYPEDataTable tableSETTLEMENT_TYPE;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SETTLEMENT_TYPERow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSETTLEMENT_TYPE = ((SETTLEMENT_TYPEDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SETTLEMENTTYPEID {
                get {
                    return ((int)(this[this.tableSETTLEMENT_TYPE.SETTLEMENTTYPEIDColumn]));
                }
                set {
                    this[this.tableSETTLEMENT_TYPE.SETTLEMENTTYPEIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DESCR {
                get {
                    try {
                        return ((string)(this[this.tableSETTLEMENT_TYPE.DESCRColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DESCR\' in table \'SETTLEMENT_TYPE\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSETTLEMENT_TYPE.DESCRColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDESCRNull() {
                return this.IsNull(this.tableSETTLEMENT_TYPE.DESCRColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDESCRNull() {
                this[this.tableSETTLEMENT_TYPE.DESCRColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class STREETRow : System.Data.DataRow {
            
            private STREETDataTable tableSTREET;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal STREETRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSTREET = ((STREETDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableSTREET.IDColumn]));
                }
                set {
                    this[this.tableSTREET.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int STREET_TYPEID {
                get {
                    return ((int)(this[this.tableSTREET.STREET_TYPEIDColumn]));
                }
                set {
                    this[this.tableSTREET.STREET_TYPEIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NAME {
                get {
                    return ((string)(this[this.tableSTREET.NAMEColumn]));
                }
                set {
                    this[this.tableSTREET.NAMEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string STREETTYPENAME {
                get {
                    try {
                        return ((string)(this[this.tableSTREET.STREETTYPENAMEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'STREETTYPENAME\' in table \'STREET\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTREET.STREETTYPENAMEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSTREETTYPENAMENull() {
                return this.IsNull(this.tableSTREET.STREETTYPENAMEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSTREETTYPENAMENull() {
                this[this.tableSTREET.STREETTYPENAMEColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class STREET_TYPERow : System.Data.DataRow {
            
            private STREET_TYPEDataTable tableSTREET_TYPE;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal STREET_TYPERow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSTREET_TYPE = ((STREET_TYPEDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int STREETTYPEID {
                get {
                    return ((int)(this[this.tableSTREET_TYPE.STREETTYPEIDColumn]));
                }
                set {
                    this[this.tableSTREET_TYPE.STREETTYPEIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string STREETTYPENAME {
                get {
                    try {
                        return ((string)(this[this.tableSTREET_TYPE.STREETTYPENAMEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'STREETTYPENAME\' in table \'STREET_TYPE\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTREET_TYPE.STREETTYPENAMEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSTREETTYPENAMENull() {
                return this.IsNull(this.tableSTREET_TYPE.STREETTYPENAMEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSTREETTYPENAMENull() {
                this[this.tableSTREET_TYPE.STREETTYPENAMEColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class POPULATED_POINTSRow : System.Data.DataRow {
            
            private POPULATED_POINTSDataTable tablePOPULATED_POINTS;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal POPULATED_POINTSRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePOPULATED_POINTS = ((POPULATED_POINTSDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    try {
                        return ((int)(this[this.tablePOPULATED_POINTS.IDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ID\' in table \'POPULATED_POINTS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePOPULATED_POINTS.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int REGIONID {
                get {
                    try {
                        return ((int)(this[this.tablePOPULATED_POINTS.REGIONIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'REGIONID\' in table \'POPULATED_POINTS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePOPULATED_POINTS.REGIONIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SETTLEMENTTYPEID {
                get {
                    try {
                        return ((int)(this[this.tablePOPULATED_POINTS.SETTLEMENTTYPEIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SETTLEMENTTYPEID\' in table \'POPULATED_POINTS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePOPULATED_POINTS.SETTLEMENTTYPEIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NAME {
                get {
                    try {
                        return ((string)(this[this.tablePOPULATED_POINTS.NAMEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'NAME\' in table \'POPULATED_POINTS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePOPULATED_POINTS.NAMEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DESCR {
                get {
                    try {
                        return ((string)(this[this.tablePOPULATED_POINTS.DESCRColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DESCR\' in table \'POPULATED_POINTS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePOPULATED_POINTS.DESCRColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string REGIONNAME {
                get {
                    try {
                        return ((string)(this[this.tablePOPULATED_POINTS.REGIONNAMEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'REGIONNAME\' in table \'POPULATED_POINTS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePOPULATED_POINTS.REGIONNAMEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SETTLEMENTTYPENAME {
                get {
                    try {
                        return ((string)(this[this.tablePOPULATED_POINTS.SETTLEMENTTYPENAMEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SETTLEMENTTYPENAME\' in table \'POPULATED_POINTS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePOPULATED_POINTS.SETTLEMENTTYPENAMEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIDNull() {
                return this.IsNull(this.tablePOPULATED_POINTS.IDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIDNull() {
                this[this.tablePOPULATED_POINTS.IDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsREGIONIDNull() {
                return this.IsNull(this.tablePOPULATED_POINTS.REGIONIDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetREGIONIDNull() {
                this[this.tablePOPULATED_POINTS.REGIONIDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSETTLEMENTTYPEIDNull() {
                return this.IsNull(this.tablePOPULATED_POINTS.SETTLEMENTTYPEIDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSETTLEMENTTYPEIDNull() {
                this[this.tablePOPULATED_POINTS.SETTLEMENTTYPEIDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNAMENull() {
                return this.IsNull(this.tablePOPULATED_POINTS.NAMEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNAMENull() {
                this[this.tablePOPULATED_POINTS.NAMEColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDESCRNull() {
                return this.IsNull(this.tablePOPULATED_POINTS.DESCRColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDESCRNull() {
                this[this.tablePOPULATED_POINTS.DESCRColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsREGIONNAMENull() {
                return this.IsNull(this.tablePOPULATED_POINTS.REGIONNAMEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetREGIONNAMENull() {
                this[this.tablePOPULATED_POINTS.REGIONNAMEColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSETTLEMENTTYPENAMENull() {
                return this.IsNull(this.tablePOPULATED_POINTS.SETTLEMENTTYPENAMEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSETTLEMENTTYPENAMENull() {
                this[this.tablePOPULATED_POINTS.SETTLEMENTTYPENAMEColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class QUESTION_TYPESRow : System.Data.DataRow {
            
            private QUESTION_TYPESDataTable tableQUESTION_TYPES;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal QUESTION_TYPESRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableQUESTION_TYPES = ((QUESTION_TYPESDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableQUESTION_TYPES.IDColumn]));
                }
                set {
                    this[this.tableQUESTION_TYPES.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NAME {
                get {
                    try {
                        return ((string)(this[this.tableQUESTION_TYPES.NAMEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'NAME\' in table \'QUESTION_TYPES\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableQUESTION_TYPES.NAMEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNAMENull() {
                return this.IsNull(this.tableQUESTION_TYPES.NAMEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNAMENull() {
                this[this.tableQUESTION_TYPES.NAMEColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ANSWERSRow : System.Data.DataRow {
            
            private ANSWERSDataTable tableANSWERS;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ANSWERSRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableANSWERS = ((ANSWERSDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableANSWERS.IDColumn]));
                }
                set {
                    this[this.tableANSWERS.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int QUESTIONID {
                get {
                    return ((int)(this[this.tableANSWERS.QUESTIONIDColumn]));
                }
                set {
                    this[this.tableANSWERS.QUESTIONIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ANSWER {
                get {
                    try {
                        return ((string)(this[this.tableANSWERS.ANSWERColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ANSWER\' in table \'ANSWERS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableANSWERS.ANSWERColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsANSWERNull() {
                return this.IsNull(this.tableANSWERS.ANSWERColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetANSWERNull() {
                this[this.tableANSWERS.ANSWERColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class QUESTIONSRow : System.Data.DataRow {
            
            private QUESTIONSDataTable tableQUESTIONS;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal QUESTIONSRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableQUESTIONS = ((QUESTIONSDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int QUESTIONID {
                get {
                    return ((int)(this[this.tableQUESTIONS.QUESTIONIDColumn]));
                }
                set {
                    this[this.tableQUESTIONS.QUESTIONIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string QUESTIONNAME {
                get {
                    return ((string)(this[this.tableQUESTIONS.QUESTIONNAMEColumn]));
                }
                set {
                    this[this.tableQUESTIONS.QUESTIONNAMEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int QUESTIONTYPE {
                get {
                    return ((int)(this[this.tableQUESTIONS.QUESTIONTYPEColumn]));
                }
                set {
                    this[this.tableQUESTIONS.QUESTIONTYPEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool QUESTIONISNULL {
                get {
                    return ((bool)(this[this.tableQUESTIONS.QUESTIONISNULLColumn]));
                }
                set {
                    this[this.tableQUESTIONS.QUESTIONISNULLColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool ISDEFAULT {
                get {
                    return ((bool)(this[this.tableQUESTIONS.ISDEFAULTColumn]));
                }
                set {
                    this[this.tableQUESTIONS.ISDEFAULTColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string QUESTIONTYPENAME {
                get {
                    try {
                        return ((string)(this[this.tableQUESTIONS.QUESTIONTYPENAMEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'QUESTIONTYPENAME\' in table \'QUESTIONS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableQUESTIONS.QUESTIONTYPENAMEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQUESTIONTYPENAMENull() {
                return this.IsNull(this.tableQUESTIONS.QUESTIONTYPENAMEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQUESTIONTYPENAMENull() {
                this[this.tableQUESTIONS.QUESTIONTYPENAMEColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PRIZESRow : System.Data.DataRow {
            
            private PRIZESDataTable tablePRIZES;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PRIZESRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePRIZES = ((PRIZESDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tablePRIZES.IDColumn]));
                }
                set {
                    this[this.tablePRIZES.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NAME {
                get {
                    return ((string)(this[this.tablePRIZES.NAMEColumn]));
                }
                set {
                    this[this.tablePRIZES.NAMEColumn] = value;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MEDIA_CLUSTERRow : System.Data.DataRow {
            
            private MEDIA_CLUSTERDataTable tableMEDIA_CLUSTER;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MEDIA_CLUSTERRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMEDIA_CLUSTER = ((MEDIA_CLUSTERDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    try {
                        return ((int)(this[this.tableMEDIA_CLUSTER.IDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ID\' in table \'MEDIA_CLUSTER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMEDIA_CLUSTER.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NAME {
                get {
                    return ((string)(this[this.tableMEDIA_CLUSTER.NAMEColumn]));
                }
                set {
                    this[this.tableMEDIA_CLUSTER.NAMEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DESCR {
                get {
                    try {
                        return ((string)(this[this.tableMEDIA_CLUSTER.DESCRColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DESCR\' in table \'MEDIA_CLUSTER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMEDIA_CLUSTER.DESCRColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIDNull() {
                return this.IsNull(this.tableMEDIA_CLUSTER.IDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIDNull() {
                this[this.tableMEDIA_CLUSTER.IDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDESCRNull() {
                return this.IsNull(this.tableMEDIA_CLUSTER.DESCRColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDESCRNull() {
                this[this.tableMEDIA_CLUSTER.DESCRColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MEDIARow : System.Data.DataRow {
            
            private MEDIADataTable tableMEDIA;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MEDIARow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMEDIA = ((MEDIADataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    try {
                        return ((int)(this[this.tableMEDIA.IDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ID\' in table \'MEDIA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMEDIA.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NAME {
                get {
                    try {
                        return ((string)(this[this.tableMEDIA.NAMEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'NAME\' in table \'MEDIA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMEDIA.NAMEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MEDIA_CLUSTERID {
                get {
                    return ((int)(this[this.tableMEDIA.MEDIA_CLUSTERIDColumn]));
                }
                set {
                    this[this.tableMEDIA.MEDIA_CLUSTERIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MEDIA_CLUSTERNAME {
                get {
                    try {
                        return ((string)(this[this.tableMEDIA.MEDIA_CLUSTERNAMEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'MEDIA_CLUSTERNAME\' in table \'MEDIA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMEDIA.MEDIA_CLUSTERNAMEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIDNull() {
                return this.IsNull(this.tableMEDIA.IDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIDNull() {
                this[this.tableMEDIA.IDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNAMENull() {
                return this.IsNull(this.tableMEDIA.NAMEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNAMENull() {
                this[this.tableMEDIA.NAMEColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMEDIA_CLUSTERNAMENull() {
                return this.IsNull(this.tableMEDIA.MEDIA_CLUSTERNAMEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMEDIA_CLUSTERNAMENull() {
                this[this.tableMEDIA.MEDIA_CLUSTERNAMEColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ADDRESS_BLOCKINGRow : System.Data.DataRow {
            
            private ADDRESS_BLOCKINGDataTable tableADDRESS_BLOCKING;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ADDRESS_BLOCKINGRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableADDRESS_BLOCKING = ((ADDRESS_BLOCKINGDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableADDRESS_BLOCKING.IDColumn]));
                }
                set {
                    this[this.tableADDRESS_BLOCKING.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NAME {
                get {
                    try {
                        return ((string)(this[this.tableADDRESS_BLOCKING.NAMEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'NAME\' in table \'ADDRESS_BLOCKING\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableADDRESS_BLOCKING.NAMEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNAMENull() {
                return this.IsNull(this.tableADDRESS_BLOCKING.NAMEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNAMENull() {
                this[this.tableADDRESS_BLOCKING.NAMEColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class EMAIL_BLOCKINGRow : System.Data.DataRow {
            
            private EMAIL_BLOCKINGDataTable tableEMAIL_BLOCKING;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EMAIL_BLOCKINGRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableEMAIL_BLOCKING = ((EMAIL_BLOCKINGDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableEMAIL_BLOCKING.IDColumn]));
                }
                set {
                    this[this.tableEMAIL_BLOCKING.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NAME {
                get {
                    return ((string)(this[this.tableEMAIL_BLOCKING.NAMEColumn]));
                }
                set {
                    this[this.tableEMAIL_BLOCKING.NAMEColumn] = value;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PHONE_BLOCKINGRow : System.Data.DataRow {
            
            private PHONE_BLOCKINGDataTable tablePHONE_BLOCKING;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PHONE_BLOCKINGRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePHONE_BLOCKING = ((PHONE_BLOCKINGDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tablePHONE_BLOCKING.IDColumn]));
                }
                set {
                    this[this.tablePHONE_BLOCKING.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NAME {
                get {
                    return ((string)(this[this.tablePHONE_BLOCKING.NAMEColumn]));
                }
                set {
                    this[this.tablePHONE_BLOCKING.NAMEColumn] = value;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MOBILE_PHONE_BLOCKINGRow : System.Data.DataRow {
            
            private MOBILE_PHONE_BLOCKINGDataTable tableMOBILE_PHONE_BLOCKING;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MOBILE_PHONE_BLOCKINGRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMOBILE_PHONE_BLOCKING = ((MOBILE_PHONE_BLOCKINGDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableMOBILE_PHONE_BLOCKING.IDColumn]));
                }
                set {
                    this[this.tableMOBILE_PHONE_BLOCKING.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NAME {
                get {
                    return ((string)(this[this.tableMOBILE_PHONE_BLOCKING.NAMEColumn]));
                }
                set {
                    this[this.tableMOBILE_PHONE_BLOCKING.NAMEColumn] = value;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class USER_LISTRow : System.Data.DataRow {
            
            private USER_LISTDataTable tableUSER_LIST;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal USER_LISTRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableUSER_LIST = ((USER_LISTDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableUSER_LIST.IDColumn]));
                }
                set {
                    this[this.tableUSER_LIST.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LOGIN {
                get {
                    return ((string)(this[this.tableUSER_LIST.LOGINColumn]));
                }
                set {
                    this[this.tableUSER_LIST.LOGINColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PASSWORD {
                get {
                    try {
                        return ((string)(this[this.tableUSER_LIST.PASSWORDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PASSWORD\' in table \'USER_LIST\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUSER_LIST.PASSWORDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPASSWORDNull() {
                return this.IsNull(this.tableUSER_LIST.PASSWORDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPASSWORDNull() {
                this[this.tableUSER_LIST.PASSWORDColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class COMPAIGN_MEDIARow : System.Data.DataRow {
            
            private COMPAIGN_MEDIADataTable tableCOMPAIGN_MEDIA;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal COMPAIGN_MEDIARow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCOMPAIGN_MEDIA = ((COMPAIGN_MEDIADataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MEDIAID {
                get {
                    return ((int)(this[this.tableCOMPAIGN_MEDIA.MEDIAIDColumn]));
                }
                set {
                    this[this.tableCOMPAIGN_MEDIA.MEDIAIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid COMPAIGNID {
                get {
                    return ((System.Guid)(this[this.tableCOMPAIGN_MEDIA.COMPAIGNIDColumn]));
                }
                set {
                    this[this.tableCOMPAIGN_MEDIA.COMPAIGNIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NAME {
                get {
                    try {
                        return ((string)(this[this.tableCOMPAIGN_MEDIA.NAMEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'NAME\' in table \'COMPAIGN_MEDIA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCOMPAIGN_MEDIA.NAMEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNAMENull() {
                return this.IsNull(this.tableCOMPAIGN_MEDIA.NAMEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNAMENull() {
                this[this.tableCOMPAIGN_MEDIA.NAMEColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class USER_COMPAIGNRow : System.Data.DataRow {
            
            private USER_COMPAIGNDataTable tableUSER_COMPAIGN;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal USER_COMPAIGNRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableUSER_COMPAIGN = ((USER_COMPAIGNDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int USERID {
                get {
                    return ((int)(this[this.tableUSER_COMPAIGN.USERIDColumn]));
                }
                set {
                    this[this.tableUSER_COMPAIGN.USERIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string COMPAIGNID {
                get {
                    return ((string)(this[this.tableUSER_COMPAIGN.COMPAIGNIDColumn]));
                }
                set {
                    this[this.tableUSER_COMPAIGN.COMPAIGNIDColumn] = value;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class COMPAIGNRow : System.Data.DataRow {
            
            private COMPAIGNDataTable tableCOMPAIGN;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal COMPAIGNRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCOMPAIGN = ((COMPAIGNDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid ID {
                get {
                    return ((System.Guid)(this[this.tableCOMPAIGN.IDColumn]));
                }
                set {
                    this[this.tableCOMPAIGN.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DESCRIPTION {
                get {
                    try {
                        return ((string)(this[this.tableCOMPAIGN.DESCRIPTIONColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DESCRIPTION\' in table \'COMPAIGN\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCOMPAIGN.DESCRIPTIONColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime STARTDATE {
                get {
                    return ((System.DateTime)(this[this.tableCOMPAIGN.STARTDATEColumn]));
                }
                set {
                    this[this.tableCOMPAIGN.STARTDATEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ENDDATE {
                get {
                    return ((System.DateTime)(this[this.tableCOMPAIGN.ENDDATEColumn]));
                }
                set {
                    this[this.tableCOMPAIGN.ENDDATEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CAMPAIGNCODE {
                get {
                    return ((string)(this[this.tableCOMPAIGN.CAMPAIGNCODEColumn]));
                }
                set {
                    this[this.tableCOMPAIGN.CAMPAIGNCODEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CAMPAIGNNAME {
                get {
                    return ((string)(this[this.tableCOMPAIGN.CAMPAIGNNAMEColumn]));
                }
                set {
                    this[this.tableCOMPAIGN.CAMPAIGNNAMEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CAMPAIGNID {
                get {
                    return ((string)(this[this.tableCOMPAIGN.CAMPAIGNIDColumn]));
                }
                set {
                    this[this.tableCOMPAIGN.CAMPAIGNIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ACTIONID {
                get {
                    return ((string)(this[this.tableCOMPAIGN.ACTIONIDColumn]));
                }
                set {
                    this[this.tableCOMPAIGN.ACTIONIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VARIANTID {
                get {
                    return ((string)(this[this.tableCOMPAIGN.VARIANTIDColumn]));
                }
                set {
                    this[this.tableCOMPAIGN.VARIANTIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TARGETGROUPID {
                get {
                    return ((string)(this[this.tableCOMPAIGN.TARGETGROUPIDColumn]));
                }
                set {
                    this[this.tableCOMPAIGN.TARGETGROUPIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ACTIONNAME {
                get {
                    try {
                        return ((string)(this[this.tableCOMPAIGN.ACTIONNAMEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ACTIONNAME\' in table \'COMPAIGN\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCOMPAIGN.ACTIONNAMEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VARIANT {
                get {
                    try {
                        return ((string)(this[this.tableCOMPAIGN.VARIANTColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'VARIANT\' in table \'COMPAIGN\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCOMPAIGN.VARIANTColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TARGETGROUP {
                get {
                    try {
                        return ((string)(this[this.tableCOMPAIGN.TARGETGROUPColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'TARGETGROUP\' in table \'COMPAIGN\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCOMPAIGN.TARGETGROUPColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDESCRIPTIONNull() {
                return this.IsNull(this.tableCOMPAIGN.DESCRIPTIONColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDESCRIPTIONNull() {
                this[this.tableCOMPAIGN.DESCRIPTIONColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsACTIONNAMENull() {
                return this.IsNull(this.tableCOMPAIGN.ACTIONNAMEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetACTIONNAMENull() {
                this[this.tableCOMPAIGN.ACTIONNAMEColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVARIANTNull() {
                return this.IsNull(this.tableCOMPAIGN.VARIANTColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVARIANTNull() {
                this[this.tableCOMPAIGN.VARIANTColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTARGETGROUPNull() {
                return this.IsNull(this.tableCOMPAIGN.TARGETGROUPColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTARGETGROUPNull() {
                this[this.tableCOMPAIGN.TARGETGROUPColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class COMPAIGN_PRIZESRow : System.Data.DataRow {
            
            private COMPAIGN_PRIZESDataTable tableCOMPAIGN_PRIZES;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal COMPAIGN_PRIZESRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCOMPAIGN_PRIZES = ((COMPAIGN_PRIZESDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid COMPAIGNID {
                get {
                    return ((System.Guid)(this[this.tableCOMPAIGN_PRIZES.COMPAIGNIDColumn]));
                }
                set {
                    this[this.tableCOMPAIGN_PRIZES.COMPAIGNIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PRIZESID {
                get {
                    return ((int)(this[this.tableCOMPAIGN_PRIZES.PRIZESIDColumn]));
                }
                set {
                    this[this.tableCOMPAIGN_PRIZES.PRIZESIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NAME {
                get {
                    try {
                        return ((string)(this[this.tableCOMPAIGN_PRIZES.NAMEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'NAME\' in table \'COMPAIGN_PRIZES\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCOMPAIGN_PRIZES.NAMEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNAMENull() {
                return this.IsNull(this.tableCOMPAIGN_PRIZES.NAMEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNAMENull() {
                this[this.tableCOMPAIGN_PRIZES.NAMEColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class QUESTION_FOR_COMPAIGNRow : System.Data.DataRow {
            
            private QUESTION_FOR_COMPAIGNDataTable tableQUESTION_FOR_COMPAIGN;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal QUESTION_FOR_COMPAIGNRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableQUESTION_FOR_COMPAIGN = ((QUESTION_FOR_COMPAIGNDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid GOMPAIGNID {
                get {
                    return ((System.Guid)(this[this.tableQUESTION_FOR_COMPAIGN.GOMPAIGNIDColumn]));
                }
                set {
                    this[this.tableQUESTION_FOR_COMPAIGN.GOMPAIGNIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int QUESTIONID {
                get {
                    return ((int)(this[this.tableQUESTION_FOR_COMPAIGN.QUESTIONIDColumn]));
                }
                set {
                    this[this.tableQUESTION_FOR_COMPAIGN.QUESTIONIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string QUESTIONNAME {
                get {
                    try {
                        return ((string)(this[this.tableQUESTION_FOR_COMPAIGN.QUESTIONNAMEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'QUESTIONNAME\' in table \'QUESTION_FOR_COMPAIGN\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableQUESTION_FOR_COMPAIGN.QUESTIONNAMEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int QUESTIONTYPE {
                get {
                    try {
                        return ((int)(this[this.tableQUESTION_FOR_COMPAIGN.QUESTIONTYPEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'QUESTIONTYPE\' in table \'QUESTION_FOR_COMPAIGN\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableQUESTION_FOR_COMPAIGN.QUESTIONTYPEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool ISDEFAULT {
                get {
                    try {
                        return ((bool)(this[this.tableQUESTION_FOR_COMPAIGN.ISDEFAULTColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ISDEFAULT\' in table \'QUESTION_FOR_COMPAIGN\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableQUESTION_FOR_COMPAIGN.ISDEFAULTColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string QUESTIONTYPE_NAME {
                get {
                    try {
                        return ((string)(this[this.tableQUESTION_FOR_COMPAIGN.QUESTIONTYPE_NAMEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'QUESTIONTYPE_NAME\' in table \'QUESTION_FOR_COMPAIGN\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableQUESTION_FOR_COMPAIGN.QUESTIONTYPE_NAMEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQUESTIONNAMENull() {
                return this.IsNull(this.tableQUESTION_FOR_COMPAIGN.QUESTIONNAMEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQUESTIONNAMENull() {
                this[this.tableQUESTION_FOR_COMPAIGN.QUESTIONNAMEColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQUESTIONTYPENull() {
                return this.IsNull(this.tableQUESTION_FOR_COMPAIGN.QUESTIONTYPEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQUESTIONTYPENull() {
                this[this.tableQUESTION_FOR_COMPAIGN.QUESTIONTYPEColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsISDEFAULTNull() {
                return this.IsNull(this.tableQUESTION_FOR_COMPAIGN.ISDEFAULTColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetISDEFAULTNull() {
                this[this.tableQUESTION_FOR_COMPAIGN.ISDEFAULTColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQUESTIONTYPE_NAMENull() {
                return this.IsNull(this.tableQUESTION_FOR_COMPAIGN.QUESTIONTYPE_NAMEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQUESTIONTYPE_NAMENull() {
                this[this.tableQUESTION_FOR_COMPAIGN.QUESTIONTYPE_NAMEColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class COMPAIGN_POPULATED_POINTSRow : System.Data.DataRow {
            
            private COMPAIGN_POPULATED_POINTSDataTable tableCOMPAIGN_POPULATED_POINTS;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal COMPAIGN_POPULATED_POINTSRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCOMPAIGN_POPULATED_POINTS = ((COMPAIGN_POPULATED_POINTSDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid COMPAIGNID {
                get {
                    return ((System.Guid)(this[this.tableCOMPAIGN_POPULATED_POINTS.COMPAIGNIDColumn]));
                }
                set {
                    this[this.tableCOMPAIGN_POPULATED_POINTS.COMPAIGNIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int POPULATED_POINTID {
                get {
                    return ((int)(this[this.tableCOMPAIGN_POPULATED_POINTS.POPULATED_POINTIDColumn]));
                }
                set {
                    this[this.tableCOMPAIGN_POPULATED_POINTS.POPULATED_POINTIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string POPULATED_POINT_NAME {
                get {
                    try {
                        return ((string)(this[this.tableCOMPAIGN_POPULATED_POINTS.POPULATED_POINT_NAMEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'POPULATED_POINT_NAME\' in table \'COMPAIGN_POPULATED_POINTS\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCOMPAIGN_POPULATED_POINTS.POPULATED_POINT_NAMEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string REGION_NAME {
                get {
                    try {
                        return ((string)(this[this.tableCOMPAIGN_POPULATED_POINTS.REGION_NAMEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'REGION_NAME\' in table \'COMPAIGN_POPULATED_POINTS\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableCOMPAIGN_POPULATED_POINTS.REGION_NAMEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int REGIONID {
                get {
                    try {
                        return ((int)(this[this.tableCOMPAIGN_POPULATED_POINTS.REGIONIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'REGIONID\' in table \'COMPAIGN_POPULATED_POINTS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCOMPAIGN_POPULATED_POINTS.REGIONIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPOPULATED_POINT_NAMENull() {
                return this.IsNull(this.tableCOMPAIGN_POPULATED_POINTS.POPULATED_POINT_NAMEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPOPULATED_POINT_NAMENull() {
                this[this.tableCOMPAIGN_POPULATED_POINTS.POPULATED_POINT_NAMEColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsREGION_NAMENull() {
                return this.IsNull(this.tableCOMPAIGN_POPULATED_POINTS.REGION_NAMEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetREGION_NAMENull() {
                this[this.tableCOMPAIGN_POPULATED_POINTS.REGION_NAMEColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsREGIONIDNull() {
                return this.IsNull(this.tableCOMPAIGN_POPULATED_POINTS.REGIONIDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetREGIONIDNull() {
                this[this.tableCOMPAIGN_POPULATED_POINTS.REGIONIDColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GLOBAL_BLOCKINGRow : System.Data.DataRow {
            
            private GLOBAL_BLOCKINGDataTable tableGLOBAL_BLOCKING;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GLOBAL_BLOCKINGRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGLOBAL_BLOCKING = ((GLOBAL_BLOCKINGDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableGLOBAL_BLOCKING.IDColumn]));
                }
                set {
                    this[this.tableGLOBAL_BLOCKING.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NAME {
                get {
                    return ((string)(this[this.tableGLOBAL_BLOCKING.NAMEColumn]));
                }
                set {
                    this[this.tableGLOBAL_BLOCKING.NAMEColumn] = value;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class OBLAST_DWRow : System.Data.DataRow {
            
            private OBLAST_DWDataTable tableOBLAST_DW;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OBLAST_DWRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableOBLAST_DW = ((OBLAST_DWDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OBLASTID {
                get {
                    return ((int)(this[this.tableOBLAST_DW.OBLASTIDColumn]));
                }
                set {
                    this[this.tableOBLAST_DW.OBLASTIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NAME {
                get {
                    return ((string)(this[this.tableOBLAST_DW.NAMEColumn]));
                }
                set {
                    this[this.tableOBLAST_DW.NAMEColumn] = value;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SETTLEMENT_TYPE_DWRow : System.Data.DataRow {
            
            private SETTLEMENT_TYPE_DWDataTable tableSETTLEMENT_TYPE_DW;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SETTLEMENT_TYPE_DWRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSETTLEMENT_TYPE_DW = ((SETTLEMENT_TYPE_DWDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableSETTLEMENT_TYPE_DW.IDColumn]));
                }
                set {
                    this[this.tableSETTLEMENT_TYPE_DW.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SETTLEMENTTYPEID {
                get {
                    return ((int)(this[this.tableSETTLEMENT_TYPE_DW.SETTLEMENTTYPEIDColumn]));
                }
                set {
                    this[this.tableSETTLEMENT_TYPE_DW.SETTLEMENTTYPEIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DESCR {
                get {
                    try {
                        return ((string)(this[this.tableSETTLEMENT_TYPE_DW.DESCRColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DESCR\' in table \'SETTLEMENT_TYPE_DW\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSETTLEMENT_TYPE_DW.DESCRColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDESCRNull() {
                return this.IsNull(this.tableSETTLEMENT_TYPE_DW.DESCRColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDESCRNull() {
                this[this.tableSETTLEMENT_TYPE_DW.DESCRColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CONSUMERRow : System.Data.DataRow {
            
            private CONSUMERDataTable tableCONSUMER;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CONSUMERRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCONSUMER = ((CONSUMERDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AZ_INDENT_ID {
                get {
                    return ((string)(this[this.tableCONSUMER.AZ_INDENT_IDColumn]));
                }
                set {
                    this[this.tableCONSUMER.AZ_INDENT_IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SOURCE {
                get {
                    return ((int)(this[this.tableCONSUMER.SOURCEColumn]));
                }
                set {
                    this[this.tableCONSUMER.SOURCEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int GLOBAL_BLOCKING {
                get {
                    return ((int)(this[this.tableCONSUMER.GLOBAL_BLOCKINGColumn]));
                }
                set {
                    this[this.tableCONSUMER.GLOBAL_BLOCKINGColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GENDER {
                get {
                    return ((string)(this[this.tableCONSUMER.GENDERColumn]));
                }
                set {
                    this[this.tableCONSUMER.GENDERColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FIRST_NAME {
                get {
                    return ((string)(this[this.tableCONSUMER.FIRST_NAMEColumn]));
                }
                set {
                    this[this.tableCONSUMER.FIRST_NAMEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MIDDLE_NAME {
                get {
                    return ((string)(this[this.tableCONSUMER.MIDDLE_NAMEColumn]));
                }
                set {
                    this[this.tableCONSUMER.MIDDLE_NAMEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LAST_NAME {
                get {
                    try {
                        return ((string)(this[this.tableCONSUMER.LAST_NAMEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'LAST_NAME\' in table \'CONSUMER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCONSUMER.LAST_NAMEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string COUNTRY_CODE {
                get {
                    return ((string)(this[this.tableCONSUMER.COUNTRY_CODEColumn]));
                }
                set {
                    this[this.tableCONSUMER.COUNTRY_CODEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TYPE_OF_ID_CARD {
                get {
                    try {
                        return ((int)(this[this.tableCONSUMER.TYPE_OF_ID_CARDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'TYPE_OF_ID_CARD\' in table \'CONSUMER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCONSUMER.TYPE_OF_ID_CARDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ID_CARD_NUMBER {
                get {
                    try {
                        return ((string)(this[this.tableCONSUMER.ID_CARD_NUMBERColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ID_CARD_NUMBER\' in table \'CONSUMER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCONSUMER.ID_CARD_NUMBERColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RNN {
                get {
                    try {
                        return ((string)(this[this.tableCONSUMER.RNNColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RNN\' in table \'CONSUMER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCONSUMER.RNNColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ADDITIONAL_INFORMATION {
                get {
                    try {
                        return ((string)(this[this.tableCONSUMER.ADDITIONAL_INFORMATIONColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ADDITIONAL_INFORMATION\' in table \'CONSUMER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCONSUMER.ADDITIONAL_INFORMATIONColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string POSTAL_CODE {
                get {
                    try {
                        return ((string)(this[this.tableCONSUMER.POSTAL_CODEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'POSTAL_CODE\' in table \'CONSUMER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCONSUMER.POSTAL_CODEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DATE_OF_BIRTH {
                get {
                    return ((System.DateTime)(this[this.tableCONSUMER.DATE_OF_BIRTHColumn]));
                }
                set {
                    this[this.tableCONSUMER.DATE_OF_BIRTHColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LANGUAGEID {
                get {
                    return ((int)(this[this.tableCONSUMER.LANGUAGEIDColumn]));
                }
                set {
                    this[this.tableCONSUMER.LANGUAGEIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ADDRES_BLOCKING {
                get {
                    try {
                        return ((int)(this[this.tableCONSUMER.ADDRES_BLOCKINGColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ADDRES_BLOCKING\' in table \'CONSUMER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCONSUMER.ADDRES_BLOCKINGColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PROMOTIONALID {
                get {
                    try {
                        return ((string)(this[this.tableCONSUMER.PROMOTIONALIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PROMOTIONALID\' in table \'CONSUMER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCONSUMER.PROMOTIONALIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EMAIL {
                get {
                    try {
                        return ((string)(this[this.tableCONSUMER.EMAILColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'EMAIL\' in table \'CONSUMER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCONSUMER.EMAILColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EMAIL_BLOCKING {
                get {
                    try {
                        return ((int)(this[this.tableCONSUMER.EMAIL_BLOCKINGColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'EMAIL_BLOCKING\' in table \'CONSUMER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCONSUMER.EMAIL_BLOCKINGColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PHONE_NUMBER {
                get {
                    try {
                        return ((string)(this[this.tableCONSUMER.PHONE_NUMBERColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PHONE_NUMBER\' in table \'CONSUMER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCONSUMER.PHONE_NUMBERColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PHONE_BLOCKING {
                get {
                    try {
                        return ((int)(this[this.tableCONSUMER.PHONE_BLOCKINGColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PHONE_BLOCKING\' in table \'CONSUMER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCONSUMER.PHONE_BLOCKINGColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MOBILE_NUMBER {
                get {
                    try {
                        return ((string)(this[this.tableCONSUMER.MOBILE_NUMBERColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'MOBILE_NUMBER\' in table \'CONSUMER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCONSUMER.MOBILE_NUMBERColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MOBILE_BLOCKING {
                get {
                    try {
                        return ((int)(this[this.tableCONSUMER.MOBILE_BLOCKINGColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'MOBILE_BLOCKING\' in table \'CONSUMER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCONSUMER.MOBILE_BLOCKINGColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MEDIA_CODE {
                get {
                    try {
                        return ((int)(this[this.tableCONSUMER.MEDIA_CODEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'MEDIA_CODE\' in table \'CONSUMER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCONSUMER.MEDIA_CODEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid ID {
                get {
                    return ((System.Guid)(this[this.tableCONSUMER.IDColumn]));
                }
                set {
                    this[this.tableCONSUMER.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OBLAST_ID {
                get {
                    try {
                        return ((int)(this[this.tableCONSUMER.OBLAST_IDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'OBLAST_ID\' in table \'CONSUMER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCONSUMER.OBLAST_IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int REGION_ID {
                get {
                    try {
                        return ((int)(this[this.tableCONSUMER.REGION_IDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'REGION_ID\' in table \'CONSUMER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCONSUMER.REGION_IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int POP_POINT_ID {
                get {
                    try {
                        return ((int)(this[this.tableCONSUMER.POP_POINT_IDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'POP_POINT_ID\' in table \'CONSUMER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCONSUMER.POP_POINT_IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SETTLEMENT_TYPE_ID {
                get {
                    try {
                        return ((int)(this[this.tableCONSUMER.SETTLEMENT_TYPE_IDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SETTLEMENT_TYPE_ID\' in table \'CONSUMER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCONSUMER.SETTLEMENT_TYPE_IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int STREET_TYPE {
                get {
                    try {
                        return ((int)(this[this.tableCONSUMER.STREET_TYPEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'STREET_TYPE\' in table \'CONSUMER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCONSUMER.STREET_TYPEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int STREET {
                get {
                    try {
                        return ((int)(this[this.tableCONSUMER.STREETColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'STREET\' in table \'CONSUMER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCONSUMER.STREETColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HOUSE_NUMBER {
                get {
                    try {
                        return ((string)(this[this.tableCONSUMER.HOUSE_NUMBERColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'HOUSE_NUMBER\' in table \'CONSUMER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCONSUMER.HOUSE_NUMBERColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string APARTMENT_NUMBER {
                get {
                    try {
                        return ((string)(this[this.tableCONSUMER.APARTMENT_NUMBERColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'APARTMENT_NUMBER\' in table \'CONSUMER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCONSUMER.APARTMENT_NUMBERColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MICRODISTRICT {
                get {
                    try {
                        return ((string)(this[this.tableCONSUMER.MICRODISTRICTColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'MICRODISTRICT\' in table \'CONSUMER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCONSUMER.MICRODISTRICTColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLAST_NAMENull() {
                return this.IsNull(this.tableCONSUMER.LAST_NAMEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLAST_NAMENull() {
                this[this.tableCONSUMER.LAST_NAMEColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTYPE_OF_ID_CARDNull() {
                return this.IsNull(this.tableCONSUMER.TYPE_OF_ID_CARDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTYPE_OF_ID_CARDNull() {
                this[this.tableCONSUMER.TYPE_OF_ID_CARDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsID_CARD_NUMBERNull() {
                return this.IsNull(this.tableCONSUMER.ID_CARD_NUMBERColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetID_CARD_NUMBERNull() {
                this[this.tableCONSUMER.ID_CARD_NUMBERColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRNNNull() {
                return this.IsNull(this.tableCONSUMER.RNNColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRNNNull() {
                this[this.tableCONSUMER.RNNColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsADDITIONAL_INFORMATIONNull() {
                return this.IsNull(this.tableCONSUMER.ADDITIONAL_INFORMATIONColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetADDITIONAL_INFORMATIONNull() {
                this[this.tableCONSUMER.ADDITIONAL_INFORMATIONColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPOSTAL_CODENull() {
                return this.IsNull(this.tableCONSUMER.POSTAL_CODEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPOSTAL_CODENull() {
                this[this.tableCONSUMER.POSTAL_CODEColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsADDRES_BLOCKINGNull() {
                return this.IsNull(this.tableCONSUMER.ADDRES_BLOCKINGColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetADDRES_BLOCKINGNull() {
                this[this.tableCONSUMER.ADDRES_BLOCKINGColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPROMOTIONALIDNull() {
                return this.IsNull(this.tableCONSUMER.PROMOTIONALIDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPROMOTIONALIDNull() {
                this[this.tableCONSUMER.PROMOTIONALIDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEMAILNull() {
                return this.IsNull(this.tableCONSUMER.EMAILColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEMAILNull() {
                this[this.tableCONSUMER.EMAILColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEMAIL_BLOCKINGNull() {
                return this.IsNull(this.tableCONSUMER.EMAIL_BLOCKINGColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEMAIL_BLOCKINGNull() {
                this[this.tableCONSUMER.EMAIL_BLOCKINGColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPHONE_NUMBERNull() {
                return this.IsNull(this.tableCONSUMER.PHONE_NUMBERColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPHONE_NUMBERNull() {
                this[this.tableCONSUMER.PHONE_NUMBERColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPHONE_BLOCKINGNull() {
                return this.IsNull(this.tableCONSUMER.PHONE_BLOCKINGColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPHONE_BLOCKINGNull() {
                this[this.tableCONSUMER.PHONE_BLOCKINGColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMOBILE_NUMBERNull() {
                return this.IsNull(this.tableCONSUMER.MOBILE_NUMBERColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMOBILE_NUMBERNull() {
                this[this.tableCONSUMER.MOBILE_NUMBERColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMOBILE_BLOCKINGNull() {
                return this.IsNull(this.tableCONSUMER.MOBILE_BLOCKINGColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMOBILE_BLOCKINGNull() {
                this[this.tableCONSUMER.MOBILE_BLOCKINGColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMEDIA_CODENull() {
                return this.IsNull(this.tableCONSUMER.MEDIA_CODEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMEDIA_CODENull() {
                this[this.tableCONSUMER.MEDIA_CODEColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOBLAST_IDNull() {
                return this.IsNull(this.tableCONSUMER.OBLAST_IDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOBLAST_IDNull() {
                this[this.tableCONSUMER.OBLAST_IDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsREGION_IDNull() {
                return this.IsNull(this.tableCONSUMER.REGION_IDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetREGION_IDNull() {
                this[this.tableCONSUMER.REGION_IDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPOP_POINT_IDNull() {
                return this.IsNull(this.tableCONSUMER.POP_POINT_IDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPOP_POINT_IDNull() {
                this[this.tableCONSUMER.POP_POINT_IDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSETTLEMENT_TYPE_IDNull() {
                return this.IsNull(this.tableCONSUMER.SETTLEMENT_TYPE_IDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSETTLEMENT_TYPE_IDNull() {
                this[this.tableCONSUMER.SETTLEMENT_TYPE_IDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSTREET_TYPENull() {
                return this.IsNull(this.tableCONSUMER.STREET_TYPEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSTREET_TYPENull() {
                this[this.tableCONSUMER.STREET_TYPEColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSTREETNull() {
                return this.IsNull(this.tableCONSUMER.STREETColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSTREETNull() {
                this[this.tableCONSUMER.STREETColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHOUSE_NUMBERNull() {
                return this.IsNull(this.tableCONSUMER.HOUSE_NUMBERColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHOUSE_NUMBERNull() {
                this[this.tableCONSUMER.HOUSE_NUMBERColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAPARTMENT_NUMBERNull() {
                return this.IsNull(this.tableCONSUMER.APARTMENT_NUMBERColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAPARTMENT_NUMBERNull() {
                this[this.tableCONSUMER.APARTMENT_NUMBERColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMICRODISTRICTNull() {
                return this.IsNull(this.tableCONSUMER.MICRODISTRICTColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMICRODISTRICTNull() {
                this[this.tableCONSUMER.MICRODISTRICTColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class RESPONCE_CHANELS_DWRow : System.Data.DataRow {
            
            private RESPONCE_CHANELS_DWDataTable tableRESPONCE_CHANELS_DW;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RESPONCE_CHANELS_DWRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRESPONCE_CHANELS_DW = ((RESPONCE_CHANELS_DWDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableRESPONCE_CHANELS_DW.IDColumn]));
                }
                set {
                    this[this.tableRESPONCE_CHANELS_DW.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NAME {
                get {
                    return ((string)(this[this.tableRESPONCE_CHANELS_DW.NAMEColumn]));
                }
                set {
                    this[this.tableRESPONCE_CHANELS_DW.NAMEColumn] = value;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MEDIA_CLUSTER_DWRow : System.Data.DataRow {
            
            private MEDIA_CLUSTER_DWDataTable tableMEDIA_CLUSTER_DW;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MEDIA_CLUSTER_DWRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMEDIA_CLUSTER_DW = ((MEDIA_CLUSTER_DWDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableMEDIA_CLUSTER_DW.IDColumn]));
                }
                set {
                    this[this.tableMEDIA_CLUSTER_DW.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NAME {
                get {
                    return ((string)(this[this.tableMEDIA_CLUSTER_DW.NAMEColumn]));
                }
                set {
                    this[this.tableMEDIA_CLUSTER_DW.NAMEColumn] = value;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MEDIA_DWRow : System.Data.DataRow {
            
            private MEDIA_DWDataTable tableMEDIA_DW;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MEDIA_DWRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMEDIA_DW = ((MEDIA_DWDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableMEDIA_DW.IDColumn]));
                }
                set {
                    this[this.tableMEDIA_DW.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NAME {
                get {
                    try {
                        return ((string)(this[this.tableMEDIA_DW.NAMEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'NAME\' in table \'MEDIA_DW\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMEDIA_DW.NAMEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNAMENull() {
                return this.IsNull(this.tableMEDIA_DW.NAMEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNAMENull() {
                this[this.tableMEDIA_DW.NAMEColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class BRAND_FAMILY_DWRow : System.Data.DataRow {
            
            private BRAND_FAMILY_DWDataTable tableBRAND_FAMILY_DW;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BRAND_FAMILY_DWRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableBRAND_FAMILY_DW = ((BRAND_FAMILY_DWDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableBRAND_FAMILY_DW.IDColumn]));
                }
                set {
                    this[this.tableBRAND_FAMILY_DW.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PMCODE {
                get {
                    return ((string)(this[this.tableBRAND_FAMILY_DW.PMCODEColumn]));
                }
                set {
                    this[this.tableBRAND_FAMILY_DW.PMCODEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DESCR {
                get {
                    try {
                        return ((string)(this[this.tableBRAND_FAMILY_DW.DESCRColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DESCR\' in table \'BRAND_FAMILY_DW\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBRAND_FAMILY_DW.DESCRColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDESCRNull() {
                return this.IsNull(this.tableBRAND_FAMILY_DW.DESCRColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDESCRNull() {
                this[this.tableBRAND_FAMILY_DW.DESCRColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class BRANDS_DWRow : System.Data.DataRow {
            
            private BRANDS_DWDataTable tableBRANDS_DW;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BRANDS_DWRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableBRANDS_DW = ((BRANDS_DWDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableBRANDS_DW.IDColumn]));
                }
                set {
                    this[this.tableBRANDS_DW.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MBLONGDESCR {
                get {
                    try {
                        return ((string)(this[this.tableBRANDS_DW.MBLONGDESCRColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'MBLONGDESCR\' in table \'BRANDS_DW\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBRANDS_DW.MBLONGDESCRColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMBLONGDESCRNull() {
                return this.IsNull(this.tableBRANDS_DW.MBLONGDESCRColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMBLONGDESCRNull() {
                this[this.tableBRANDS_DW.MBLONGDESCRColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class BRAND_FAMILY_DW1Row : System.Data.DataRow {
            
            private BRAND_FAMILY_DW1DataTable tableBRAND_FAMILY_DW1;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BRAND_FAMILY_DW1Row(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableBRAND_FAMILY_DW1 = ((BRAND_FAMILY_DW1DataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableBRAND_FAMILY_DW1.IDColumn]));
                }
                set {
                    this[this.tableBRAND_FAMILY_DW1.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PMCODE {
                get {
                    return ((string)(this[this.tableBRAND_FAMILY_DW1.PMCODEColumn]));
                }
                set {
                    this[this.tableBRAND_FAMILY_DW1.PMCODEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DESCR {
                get {
                    try {
                        return ((string)(this[this.tableBRAND_FAMILY_DW1.DESCRColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DESCR\' in table \'BRAND_FAMILY_DW1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBRAND_FAMILY_DW1.DESCRColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDESCRNull() {
                return this.IsNull(this.tableBRAND_FAMILY_DW1.DESCRColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDESCRNull() {
                this[this.tableBRAND_FAMILY_DW1.DESCRColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class BRANDS_DW1Row : System.Data.DataRow {
            
            private BRANDS_DW1DataTable tableBRANDS_DW1;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BRANDS_DW1Row(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableBRANDS_DW1 = ((BRANDS_DW1DataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableBRANDS_DW1.IDColumn]));
                }
                set {
                    this[this.tableBRANDS_DW1.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MBLONGDESCR {
                get {
                    try {
                        return ((string)(this[this.tableBRANDS_DW1.MBLONGDESCRColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'MBLONGDESCR\' in table \'BRANDS_DW1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBRANDS_DW1.MBLONGDESCRColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMBLONGDESCRNull() {
                return this.IsNull(this.tableBRANDS_DW1.MBLONGDESCRColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMBLONGDESCRNull() {
                this[this.tableBRANDS_DW1.MBLONGDESCRColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PRIZES_DWRow : System.Data.DataRow {
            
            private PRIZES_DWDataTable tablePRIZES_DW;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PRIZES_DWRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePRIZES_DW = ((PRIZES_DWDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tablePRIZES_DW.IDColumn]));
                }
                set {
                    this[this.tablePRIZES_DW.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NAME {
                get {
                    return ((string)(this[this.tablePRIZES_DW.NAMEColumn]));
                }
                set {
                    this[this.tablePRIZES_DW.NAMEColumn] = value;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PRIZES_DW1Row : System.Data.DataRow {
            
            private PRIZES_DW1DataTable tablePRIZES_DW1;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PRIZES_DW1Row(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePRIZES_DW1 = ((PRIZES_DW1DataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tablePRIZES_DW1.IDColumn]));
                }
                set {
                    this[this.tablePRIZES_DW1.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NAME {
                get {
                    return ((string)(this[this.tablePRIZES_DW1.NAMEColumn]));
                }
                set {
                    this[this.tablePRIZES_DW1.NAMEColumn] = value;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CONSUMER_QUESTION_FOR_COMPAIGNRow : System.Data.DataRow {
            
            private CONSUMER_QUESTION_FOR_COMPAIGNDataTable tableCONSUMER_QUESTION_FOR_COMPAIGN;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CONSUMER_QUESTION_FOR_COMPAIGNRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCONSUMER_QUESTION_FOR_COMPAIGN = ((CONSUMER_QUESTION_FOR_COMPAIGNDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid ID {
                get {
                    return ((System.Guid)(this[this.tableCONSUMER_QUESTION_FOR_COMPAIGN.IDColumn]));
                }
                set {
                    this[this.tableCONSUMER_QUESTION_FOR_COMPAIGN.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid GOMPAIGNID {
                get {
                    return ((System.Guid)(this[this.tableCONSUMER_QUESTION_FOR_COMPAIGN.GOMPAIGNIDColumn]));
                }
                set {
                    this[this.tableCONSUMER_QUESTION_FOR_COMPAIGN.GOMPAIGNIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int QUESTIONID {
                get {
                    return ((int)(this[this.tableCONSUMER_QUESTION_FOR_COMPAIGN.QUESTIONIDColumn]));
                }
                set {
                    this[this.tableCONSUMER_QUESTION_FOR_COMPAIGN.QUESTIONIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ANSWER {
                get {
                    try {
                        return ((int)(this[this.tableCONSUMER_QUESTION_FOR_COMPAIGN.ANSWERColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ANSWER\' in table \'CONSUMER_QUESTION_FOR_COMPAIGN\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableCONSUMER_QUESTION_FOR_COMPAIGN.ANSWERColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ALTANSWER {
                get {
                    try {
                        return ((string)(this[this.tableCONSUMER_QUESTION_FOR_COMPAIGN.ALTANSWERColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ALTANSWER\' in table \'CONSUMER_QUESTION_FOR_COMPAIGN\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableCONSUMER_QUESTION_FOR_COMPAIGN.ALTANSWERColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string QUESTIONNAME {
                get {
                    return ((string)(this[this.tableCONSUMER_QUESTION_FOR_COMPAIGN.QUESTIONNAMEColumn]));
                }
                set {
                    this[this.tableCONSUMER_QUESTION_FOR_COMPAIGN.QUESTIONNAMEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int QUESTIONTYPE {
                get {
                    return ((int)(this[this.tableCONSUMER_QUESTION_FOR_COMPAIGN.QUESTIONTYPEColumn]));
                }
                set {
                    this[this.tableCONSUMER_QUESTION_FOR_COMPAIGN.QUESTIONTYPEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ANSWERNAME {
                get {
                    try {
                        return ((string)(this[this.tableCONSUMER_QUESTION_FOR_COMPAIGN.ANSWERNAMEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ANSWERNAME\' in table \'CONSUMER_QUESTION_FOR_COMPAIGN\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableCONSUMER_QUESTION_FOR_COMPAIGN.ANSWERNAMEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string QUESTIONTYPENAME {
                get {
                    try {
                        return ((string)(this[this.tableCONSUMER_QUESTION_FOR_COMPAIGN.QUESTIONTYPENAMEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'QUESTIONTYPENAME\' in table \'CONSUMER_QUESTION_FOR_COMPAIGN\'" +
                                " is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCONSUMER_QUESTION_FOR_COMPAIGN.QUESTIONTYPENAMEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsANSWERNull() {
                return this.IsNull(this.tableCONSUMER_QUESTION_FOR_COMPAIGN.ANSWERColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetANSWERNull() {
                this[this.tableCONSUMER_QUESTION_FOR_COMPAIGN.ANSWERColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsALTANSWERNull() {
                return this.IsNull(this.tableCONSUMER_QUESTION_FOR_COMPAIGN.ALTANSWERColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetALTANSWERNull() {
                this[this.tableCONSUMER_QUESTION_FOR_COMPAIGN.ALTANSWERColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsANSWERNAMENull() {
                return this.IsNull(this.tableCONSUMER_QUESTION_FOR_COMPAIGN.ANSWERNAMEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetANSWERNAMENull() {
                this[this.tableCONSUMER_QUESTION_FOR_COMPAIGN.ANSWERNAMEColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQUESTIONTYPENAMENull() {
                return this.IsNull(this.tableCONSUMER_QUESTION_FOR_COMPAIGN.QUESTIONTYPENAMEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQUESTIONTYPENAMENull() {
                this[this.tableCONSUMER_QUESTION_FOR_COMPAIGN.QUESTIONTYPENAMEColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ANSWERS_DWRow : System.Data.DataRow {
            
            private ANSWERS_DWDataTable tableANSWERS_DW;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ANSWERS_DWRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableANSWERS_DW = ((ANSWERS_DWDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SID {
                get {
                    return ((int)(this[this.tableANSWERS_DW.SIDColumn]));
                }
                set {
                    this[this.tableANSWERS_DW.SIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ANSWER {
                get {
                    try {
                        return ((string)(this[this.tableANSWERS_DW.ANSWERColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ANSWER\' in table \'ANSWERS_DW\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableANSWERS_DW.ANSWERColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsANSWERNull() {
                return this.IsNull(this.tableANSWERS_DW.ANSWERColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetANSWERNull() {
                this[this.tableANSWERS_DW.ANSWERColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class RESPONCE_CHANELSRow : System.Data.DataRow {
            
            private RESPONCE_CHANELSDataTable tableRESPONCE_CHANELS;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RESPONCE_CHANELSRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRESPONCE_CHANELS = ((RESPONCE_CHANELSDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableRESPONCE_CHANELS.IDColumn]));
                }
                set {
                    this[this.tableRESPONCE_CHANELS.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NAME {
                get {
                    return ((string)(this[this.tableRESPONCE_CHANELS.NAMEColumn]));
                }
                set {
                    this[this.tableRESPONCE_CHANELS.NAMEColumn] = value;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MICRODISTRICTRow : System.Data.DataRow {
            
            private MICRODISTRICTDataTable tableMICRODISTRICT;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MICRODISTRICTRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMICRODISTRICT = ((MICRODISTRICTDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableMICRODISTRICT.IDColumn]));
                }
                set {
                    this[this.tableMICRODISTRICT.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NAME {
                get {
                    try {
                        return ((string)(this[this.tableMICRODISTRICT.NAMEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'NAME\' in table \'MICRODISTRICT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMICRODISTRICT.NAMEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNAMENull() {
                return this.IsNull(this.tableMICRODISTRICT.NAMEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNAMENull() {
                this[this.tableMICRODISTRICT.NAMEColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class BRANDSRowChangeEvent : System.EventArgs {
            
            private BRANDSRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BRANDSRowChangeEvent(BRANDSRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BRANDSRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class COMPANY_CODERowChangeEvent : System.EventArgs {
            
            private COMPANY_CODERow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public COMPANY_CODERowChangeEvent(COMPANY_CODERow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public COMPANY_CODERow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LENGTH_CATEGORYRowChangeEvent : System.EventArgs {
            
            private LENGTH_CATEGORYRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LENGTH_CATEGORYRowChangeEvent(LENGTH_CATEGORYRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LENGTH_CATEGORYRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PACK_TYPERowChangeEvent : System.EventArgs {
            
            private PACK_TYPERow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PACK_TYPERowChangeEvent(PACK_TYPERow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PACK_TYPERow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class BRAND_FAMILYRowChangeEvent : System.EventArgs {
            
            private BRAND_FAMILYRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BRAND_FAMILYRowChangeEvent(BRAND_FAMILYRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BRAND_FAMILYRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SPECIAL_FLAVOR_CODERowChangeEvent : System.EventArgs {
            
            private SPECIAL_FLAVOR_CODERow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPECIAL_FLAVOR_CODERowChangeEvent(SPECIAL_FLAVOR_CODERow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPECIAL_FLAVOR_CODERow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class THICKNESS_CATEGORYRowChangeEvent : System.EventArgs {
            
            private THICKNESS_CATEGORYRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public THICKNESS_CATEGORYRowChangeEvent(THICKNESS_CATEGORYRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public THICKNESS_CATEGORYRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SIGNATURE_TYPERowChangeEvent : System.EventArgs {
            
            private SIGNATURE_TYPERow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SIGNATURE_TYPERowChangeEvent(SIGNATURE_TYPERow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SIGNATURE_TYPERow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PASSPORT_TYPERowChangeEvent : System.EventArgs {
            
            private PASSPORT_TYPERow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PASSPORT_TYPERowChangeEvent(PASSPORT_TYPERow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PASSPORT_TYPERow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LOYALTYRowChangeEvent : System.EventArgs {
            
            private LOYALTYRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LOYALTYRowChangeEvent(LOYALTYRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LOYALTYRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LANGUAGERowChangeEvent : System.EventArgs {
            
            private LANGUAGERow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LANGUAGERowChangeEvent(LANGUAGERow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LANGUAGERow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class OBLASTRowChangeEvent : System.EventArgs {
            
            private OBLASTRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OBLASTRowChangeEvent(OBLASTRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OBLASTRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class REGIONRowChangeEvent : System.EventArgs {
            
            private REGIONRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public REGIONRowChangeEvent(REGIONRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public REGIONRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SETTLEMENT_TYPERowChangeEvent : System.EventArgs {
            
            private SETTLEMENT_TYPERow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SETTLEMENT_TYPERowChangeEvent(SETTLEMENT_TYPERow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SETTLEMENT_TYPERow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class STREETRowChangeEvent : System.EventArgs {
            
            private STREETRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STREETRowChangeEvent(STREETRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STREETRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class STREET_TYPERowChangeEvent : System.EventArgs {
            
            private STREET_TYPERow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STREET_TYPERowChangeEvent(STREET_TYPERow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STREET_TYPERow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class POPULATED_POINTSRowChangeEvent : System.EventArgs {
            
            private POPULATED_POINTSRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public POPULATED_POINTSRowChangeEvent(POPULATED_POINTSRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public POPULATED_POINTSRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class QUESTION_TYPESRowChangeEvent : System.EventArgs {
            
            private QUESTION_TYPESRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QUESTION_TYPESRowChangeEvent(QUESTION_TYPESRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QUESTION_TYPESRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ANSWERSRowChangeEvent : System.EventArgs {
            
            private ANSWERSRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ANSWERSRowChangeEvent(ANSWERSRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ANSWERSRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class QUESTIONSRowChangeEvent : System.EventArgs {
            
            private QUESTIONSRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QUESTIONSRowChangeEvent(QUESTIONSRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QUESTIONSRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PRIZESRowChangeEvent : System.EventArgs {
            
            private PRIZESRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PRIZESRowChangeEvent(PRIZESRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PRIZESRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MEDIA_CLUSTERRowChangeEvent : System.EventArgs {
            
            private MEDIA_CLUSTERRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MEDIA_CLUSTERRowChangeEvent(MEDIA_CLUSTERRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MEDIA_CLUSTERRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MEDIARowChangeEvent : System.EventArgs {
            
            private MEDIARow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MEDIARowChangeEvent(MEDIARow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MEDIARow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ADDRESS_BLOCKINGRowChangeEvent : System.EventArgs {
            
            private ADDRESS_BLOCKINGRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ADDRESS_BLOCKINGRowChangeEvent(ADDRESS_BLOCKINGRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ADDRESS_BLOCKINGRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class EMAIL_BLOCKINGRowChangeEvent : System.EventArgs {
            
            private EMAIL_BLOCKINGRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EMAIL_BLOCKINGRowChangeEvent(EMAIL_BLOCKINGRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EMAIL_BLOCKINGRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PHONE_BLOCKINGRowChangeEvent : System.EventArgs {
            
            private PHONE_BLOCKINGRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PHONE_BLOCKINGRowChangeEvent(PHONE_BLOCKINGRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PHONE_BLOCKINGRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MOBILE_PHONE_BLOCKINGRowChangeEvent : System.EventArgs {
            
            private MOBILE_PHONE_BLOCKINGRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MOBILE_PHONE_BLOCKINGRowChangeEvent(MOBILE_PHONE_BLOCKINGRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MOBILE_PHONE_BLOCKINGRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class USER_LISTRowChangeEvent : System.EventArgs {
            
            private USER_LISTRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public USER_LISTRowChangeEvent(USER_LISTRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public USER_LISTRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class COMPAIGN_MEDIARowChangeEvent : System.EventArgs {
            
            private COMPAIGN_MEDIARow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public COMPAIGN_MEDIARowChangeEvent(COMPAIGN_MEDIARow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public COMPAIGN_MEDIARow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class USER_COMPAIGNRowChangeEvent : System.EventArgs {
            
            private USER_COMPAIGNRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public USER_COMPAIGNRowChangeEvent(USER_COMPAIGNRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public USER_COMPAIGNRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class COMPAIGNRowChangeEvent : System.EventArgs {
            
            private COMPAIGNRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public COMPAIGNRowChangeEvent(COMPAIGNRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public COMPAIGNRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class COMPAIGN_PRIZESRowChangeEvent : System.EventArgs {
            
            private COMPAIGN_PRIZESRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public COMPAIGN_PRIZESRowChangeEvent(COMPAIGN_PRIZESRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public COMPAIGN_PRIZESRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class QUESTION_FOR_COMPAIGNRowChangeEvent : System.EventArgs {
            
            private QUESTION_FOR_COMPAIGNRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QUESTION_FOR_COMPAIGNRowChangeEvent(QUESTION_FOR_COMPAIGNRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QUESTION_FOR_COMPAIGNRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class COMPAIGN_POPULATED_POINTSRowChangeEvent : System.EventArgs {
            
            private COMPAIGN_POPULATED_POINTSRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public COMPAIGN_POPULATED_POINTSRowChangeEvent(COMPAIGN_POPULATED_POINTSRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public COMPAIGN_POPULATED_POINTSRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GLOBAL_BLOCKINGRowChangeEvent : System.EventArgs {
            
            private GLOBAL_BLOCKINGRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GLOBAL_BLOCKINGRowChangeEvent(GLOBAL_BLOCKINGRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GLOBAL_BLOCKINGRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class OBLAST_DWRowChangeEvent : System.EventArgs {
            
            private OBLAST_DWRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OBLAST_DWRowChangeEvent(OBLAST_DWRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OBLAST_DWRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SETTLEMENT_TYPE_DWRowChangeEvent : System.EventArgs {
            
            private SETTLEMENT_TYPE_DWRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SETTLEMENT_TYPE_DWRowChangeEvent(SETTLEMENT_TYPE_DWRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SETTLEMENT_TYPE_DWRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CONSUMERRowChangeEvent : System.EventArgs {
            
            private CONSUMERRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CONSUMERRowChangeEvent(CONSUMERRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CONSUMERRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class RESPONCE_CHANELS_DWRowChangeEvent : System.EventArgs {
            
            private RESPONCE_CHANELS_DWRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RESPONCE_CHANELS_DWRowChangeEvent(RESPONCE_CHANELS_DWRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RESPONCE_CHANELS_DWRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MEDIA_CLUSTER_DWRowChangeEvent : System.EventArgs {
            
            private MEDIA_CLUSTER_DWRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MEDIA_CLUSTER_DWRowChangeEvent(MEDIA_CLUSTER_DWRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MEDIA_CLUSTER_DWRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MEDIA_DWRowChangeEvent : System.EventArgs {
            
            private MEDIA_DWRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MEDIA_DWRowChangeEvent(MEDIA_DWRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MEDIA_DWRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class BRAND_FAMILY_DWRowChangeEvent : System.EventArgs {
            
            private BRAND_FAMILY_DWRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BRAND_FAMILY_DWRowChangeEvent(BRAND_FAMILY_DWRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BRAND_FAMILY_DWRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class BRANDS_DWRowChangeEvent : System.EventArgs {
            
            private BRANDS_DWRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BRANDS_DWRowChangeEvent(BRANDS_DWRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BRANDS_DWRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class BRAND_FAMILY_DW1RowChangeEvent : System.EventArgs {
            
            private BRAND_FAMILY_DW1Row eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BRAND_FAMILY_DW1RowChangeEvent(BRAND_FAMILY_DW1Row row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BRAND_FAMILY_DW1Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class BRANDS_DW1RowChangeEvent : System.EventArgs {
            
            private BRANDS_DW1Row eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BRANDS_DW1RowChangeEvent(BRANDS_DW1Row row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BRANDS_DW1Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PRIZES_DWRowChangeEvent : System.EventArgs {
            
            private PRIZES_DWRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PRIZES_DWRowChangeEvent(PRIZES_DWRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PRIZES_DWRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PRIZES_DW1RowChangeEvent : System.EventArgs {
            
            private PRIZES_DW1Row eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PRIZES_DW1RowChangeEvent(PRIZES_DW1Row row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PRIZES_DW1Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CONSUMER_QUESTION_FOR_COMPAIGNRowChangeEvent : System.EventArgs {
            
            private CONSUMER_QUESTION_FOR_COMPAIGNRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CONSUMER_QUESTION_FOR_COMPAIGNRowChangeEvent(CONSUMER_QUESTION_FOR_COMPAIGNRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CONSUMER_QUESTION_FOR_COMPAIGNRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ANSWERS_DWRowChangeEvent : System.EventArgs {
            
            private ANSWERS_DWRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ANSWERS_DWRowChangeEvent(ANSWERS_DWRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ANSWERS_DWRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class RESPONCE_CHANELSRowChangeEvent : System.EventArgs {
            
            private RESPONCE_CHANELSRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RESPONCE_CHANELSRowChangeEvent(RESPONCE_CHANELSRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RESPONCE_CHANELSRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MICRODISTRICTRowChangeEvent : System.EventArgs {
            
            private MICRODISTRICTRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MICRODISTRICTRowChangeEvent(MICRODISTRICTRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MICRODISTRICTRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace Workstation.phmkDataSetTableAdapters {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class BRANDSTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public BRANDSTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "BRANDS";
            tableMapping.ColumnMappings.Add("BRANDFAMILY", "BRANDFAMILY");
            tableMapping.ColumnMappings.Add("THICKCAT", "THICKCAT");
            tableMapping.ColumnMappings.Add("LENGTHCAT", "LENGTHCAT");
            tableMapping.ColumnMappings.Add("BRANDDIF", "BRANDDIF");
            tableMapping.ColumnMappings.Add("MENTHIND", "MENTHIND");
            tableMapping.ColumnMappings.Add("PACKTYPE", "PACKTYPE");
            tableMapping.ColumnMappings.Add("FILTIND", "FILTIND");
            tableMapping.ColumnMappings.Add("ITEMSPACK", "ITEMSPACK");
            tableMapping.ColumnMappings.Add("MARKBC", "MARKBC");
            tableMapping.ColumnMappings.Add("MBLONGDESCR", "MBLONGDESCR");
            tableMapping.ColumnMappings.Add("BLENDTC", "BLENDTC");
            tableMapping.ColumnMappings.Add("SPECFLAVC", "SPECFLAVC");
            tableMapping.ColumnMappings.Add("COMPANYCODE", "COMPANYCODE");
            tableMapping.ColumnMappings.Add("BRAND_FAMILY_DESCR", "BRAND_FAMILY_DESCR");
            tableMapping.ColumnMappings.Add("COMPANY_CODE_DESCRIPTION", "COMPANY_CODE_DESCRIPTION");
            tableMapping.ColumnMappings.Add("LENGTH_CATEGORY_DESCR", "LENGTH_CATEGORY_DESCR");
            tableMapping.ColumnMappings.Add("PACK_TYPE_DESCR", "PACK_TYPE_DESCR");
            tableMapping.ColumnMappings.Add("SPECIAL_FLAVOR_CODE_DESCR", "SPECIAL_FLAVOR_CODE_DESCR");
            tableMapping.ColumnMappings.Add("THICKNESS_CATEGORY_DESCR", "THICKNESS_CATEGORY_DESCR");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM BRANDS\r\nWHERE     (MARKBC = @Original_MARKBC)";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_MARKBC", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "MARKBC", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO BRANDS
                      (BRANDFAMILY, THICKCAT, LENGTHCAT, BRANDDIF, MENTHIND, PACKTYPE, FILTIND, ITEMSPACK, MARKBC, MBLONGDESCR, BLENDTC, 
                      SPECFLAVC, COMPANYCODE)
VALUES     (@BRANDFAMILY,@THICKCAT,@LENGTHCAT,@BRANDDIF,@MENTHIND,@PACKTYPE,@FILTIND,@ITEMSPACK,@MARKBC,@MBLONGDESCR,@BLENDTC,@SPECFLAVC,@COMPANYCODE);  
SELECT BRANDFAMILY, THICKCAT, LENGTHCAT, BRANDDIF, MENTHIND, PACKTYPE, FILTIND, ITEMSPACK, MARKBC, MBLONGDESCR, BLENDTC, SPECFLAVC, COMPANYCODE FROM BRANDS WHERE (MARKBC = @MARKBC)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@BRANDFAMILY", System.Data.SqlDbType.VarChar, 20, System.Data.ParameterDirection.Input, 0, 0, "BRANDFAMILY", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@THICKCAT", System.Data.SqlDbType.VarChar, 20, System.Data.ParameterDirection.Input, 0, 0, "THICKCAT", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LENGTHCAT", System.Data.SqlDbType.VarChar, 20, System.Data.ParameterDirection.Input, 0, 0, "LENGTHCAT", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@BRANDDIF", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "BRANDDIF", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MENTHIND", System.Data.SqlDbType.Bit, 1, System.Data.ParameterDirection.Input, 0, 0, "MENTHIND", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PACKTYPE", System.Data.SqlDbType.VarChar, 10, System.Data.ParameterDirection.Input, 0, 0, "PACKTYPE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FILTIND", System.Data.SqlDbType.Bit, 1, System.Data.ParameterDirection.Input, 0, 0, "FILTIND", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ITEMSPACK", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ITEMSPACK", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MARKBC", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "MARKBC", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MBLONGDESCR", System.Data.SqlDbType.VarChar, 100, System.Data.ParameterDirection.Input, 0, 0, "MBLONGDESCR", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@BLENDTC", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "BLENDTC", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SPECFLAVC", System.Data.SqlDbType.VarChar, 10, System.Data.ParameterDirection.Input, 0, 0, "SPECFLAVC", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@COMPANYCODE", System.Data.SqlDbType.VarChar, 20, System.Data.ParameterDirection.Input, 0, 0, "COMPANYCODE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE    BRANDS
SET              BRANDFAMILY = @BRANDFAMILY, THICKCAT = @THICKCAT, LENGTHCAT = @LENGTHCAT, BRANDDIF = @BRANDDIF, MENTHIND = @MENTHIND, 
                      PACKTYPE = @PACKTYPE, FILTIND = @FILTIND, ITEMSPACK = @ITEMSPACK, MARKBC = @MARKBC, MBLONGDESCR = @MBLONGDESCR, 
                      BLENDTC = @BLENDTC, SPECFLAVC = @SPECFLAVC, COMPANYCODE = @COMPANYCODE
WHERE     (MARKBC = @Original_MARKBC);     
SELECT BRANDFAMILY, THICKCAT, LENGTHCAT, BRANDDIF, MENTHIND, PACKTYPE, FILTIND, ITEMSPACK, MARKBC, MBLONGDESCR, BLENDTC, SPECFLAVC, COMPANYCODE FROM BRANDS WHERE (MARKBC = @MARKBC)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@BRANDFAMILY", System.Data.SqlDbType.VarChar, 20, System.Data.ParameterDirection.Input, 0, 0, "BRANDFAMILY", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@THICKCAT", System.Data.SqlDbType.VarChar, 20, System.Data.ParameterDirection.Input, 0, 0, "THICKCAT", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LENGTHCAT", System.Data.SqlDbType.VarChar, 20, System.Data.ParameterDirection.Input, 0, 0, "LENGTHCAT", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@BRANDDIF", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "BRANDDIF", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MENTHIND", System.Data.SqlDbType.Bit, 1, System.Data.ParameterDirection.Input, 0, 0, "MENTHIND", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PACKTYPE", System.Data.SqlDbType.VarChar, 10, System.Data.ParameterDirection.Input, 0, 0, "PACKTYPE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FILTIND", System.Data.SqlDbType.Bit, 1, System.Data.ParameterDirection.Input, 0, 0, "FILTIND", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ITEMSPACK", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ITEMSPACK", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MARKBC", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "MARKBC", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MBLONGDESCR", System.Data.SqlDbType.VarChar, 100, System.Data.ParameterDirection.Input, 0, 0, "MBLONGDESCR", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@BLENDTC", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "BLENDTC", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SPECFLAVC", System.Data.SqlDbType.VarChar, 10, System.Data.ParameterDirection.Input, 0, 0, "SPECFLAVC", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@COMPANYCODE", System.Data.SqlDbType.VarChar, 20, System.Data.ParameterDirection.Input, 0, 0, "COMPANYCODE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_MARKBC", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "MARKBC", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Workstation.Properties.Settings.Default.phmkConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT     BRANDS.BRANDFAMILY, BRANDS.THICKCAT, BRANDS.LENGTHCAT, BRANDS.BRANDDIF, BRANDS.MENTHIND, BRANDS.PACKTYPE, 
                      BRANDS.FILTIND, BRANDS.ITEMSPACK, BRANDS.MARKBC, BRANDS.MBLONGDESCR, BRANDS.BLENDTC, BRANDS.SPECFLAVC, 
                      BRANDS.COMPANYCODE, BRAND_FAMILY.DESCR AS BRAND_FAMILY_DESCR, COMPANY_CODE.DESCRIPTION AS COMPANY_CODE_DESCRIPTION, 
                      LENGTH_CATEGORY.DESCR AS LENGTH_CATEGORY_DESCR, PACK_TYPE.DESCR AS PACK_TYPE_DESCR, 
                      SPECIAL_FLAVOR_CODE.DESCR AS SPECIAL_FLAVOR_CODE_DESCR, THICKNESS_CATEGORY.DESCR AS THICKNESS_CATEGORY_DESCR
FROM         BRANDS INNER JOIN
                      BRAND_FAMILY ON BRANDS.BRANDFAMILY = BRAND_FAMILY.PMCODE INNER JOIN
                      COMPANY_CODE ON BRANDS.COMPANYCODE = COMPANY_CODE.PMCODE INNER JOIN
                      LENGTH_CATEGORY ON BRANDS.LENGTHCAT = LENGTH_CATEGORY.CATEGORY INNER JOIN
                      PACK_TYPE ON BRANDS.PACKTYPE = PACK_TYPE.TYPE INNER JOIN
                      THICKNESS_CATEGORY ON BRANDS.THICKCAT = THICKNESS_CATEGORY.CATEGORY INNER JOIN
                      SPECIAL_FLAVOR_CODE ON BRANDS.SPECFLAVC = SPECIAL_FLAVOR_CODE.CODE";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(phmkDataSet.BRANDSDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual phmkDataSet.BRANDSDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            phmkDataSet.BRANDSDataTable dataTable = new phmkDataSet.BRANDSDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(phmkDataSet.BRANDSDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(phmkDataSet dataSet) {
            return this.Adapter.Update(dataSet, "BRANDS");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_MARKBC) {
            if ((Original_MARKBC == null)) {
                throw new System.ArgumentNullException("Original_MARKBC");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_MARKBC));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string BRANDFAMILY, string THICKCAT, string LENGTHCAT, string BRANDDIF, System.Nullable<bool> MENTHIND, string PACKTYPE, System.Nullable<bool> FILTIND, System.Nullable<int> ITEMSPACK, string MARKBC, string MBLONGDESCR, string BLENDTC, string SPECFLAVC, string COMPANYCODE) {
            if ((BRANDFAMILY == null)) {
                throw new System.ArgumentNullException("BRANDFAMILY");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(BRANDFAMILY));
            }
            if ((THICKCAT == null)) {
                throw new System.ArgumentNullException("THICKCAT");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(THICKCAT));
            }
            if ((LENGTHCAT == null)) {
                throw new System.ArgumentNullException("LENGTHCAT");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(LENGTHCAT));
            }
            if ((BRANDDIF == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(BRANDDIF));
            }
            if ((MENTHIND.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((bool)(MENTHIND.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = System.DBNull.Value;
            }
            if ((PACKTYPE == null)) {
                throw new System.ArgumentNullException("PACKTYPE");
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(PACKTYPE));
            }
            if ((FILTIND.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((bool)(FILTIND.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = System.DBNull.Value;
            }
            if ((ITEMSPACK.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((int)(ITEMSPACK.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = System.DBNull.Value;
            }
            if ((MARKBC == null)) {
                throw new System.ArgumentNullException("MARKBC");
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(MARKBC));
            }
            if ((MBLONGDESCR == null)) {
                this.Adapter.InsertCommand.Parameters[9].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(MBLONGDESCR));
            }
            if ((BLENDTC == null)) {
                this.Adapter.InsertCommand.Parameters[10].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(BLENDTC));
            }
            if ((SPECFLAVC == null)) {
                throw new System.ArgumentNullException("SPECFLAVC");
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = ((string)(SPECFLAVC));
            }
            if ((COMPANYCODE == null)) {
                throw new System.ArgumentNullException("COMPANYCODE");
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = ((string)(COMPANYCODE));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string BRANDFAMILY, string THICKCAT, string LENGTHCAT, string BRANDDIF, System.Nullable<bool> MENTHIND, string PACKTYPE, System.Nullable<bool> FILTIND, System.Nullable<int> ITEMSPACK, string MARKBC, string MBLONGDESCR, string BLENDTC, string SPECFLAVC, string COMPANYCODE, string Original_MARKBC) {
            if ((BRANDFAMILY == null)) {
                throw new System.ArgumentNullException("BRANDFAMILY");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(BRANDFAMILY));
            }
            if ((THICKCAT == null)) {
                throw new System.ArgumentNullException("THICKCAT");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(THICKCAT));
            }
            if ((LENGTHCAT == null)) {
                throw new System.ArgumentNullException("LENGTHCAT");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(LENGTHCAT));
            }
            if ((BRANDDIF == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(BRANDDIF));
            }
            if ((MENTHIND.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((bool)(MENTHIND.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = System.DBNull.Value;
            }
            if ((PACKTYPE == null)) {
                throw new System.ArgumentNullException("PACKTYPE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(PACKTYPE));
            }
            if ((FILTIND.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((bool)(FILTIND.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = System.DBNull.Value;
            }
            if ((ITEMSPACK.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(ITEMSPACK.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = System.DBNull.Value;
            }
            if ((MARKBC == null)) {
                throw new System.ArgumentNullException("MARKBC");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(MARKBC));
            }
            if ((MBLONGDESCR == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(MBLONGDESCR));
            }
            if ((BLENDTC == null)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(BLENDTC));
            }
            if ((SPECFLAVC == null)) {
                throw new System.ArgumentNullException("SPECFLAVC");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(SPECFLAVC));
            }
            if ((COMPANYCODE == null)) {
                throw new System.ArgumentNullException("COMPANYCODE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(COMPANYCODE));
            }
            if ((Original_MARKBC == null)) {
                throw new System.ArgumentNullException("Original_MARKBC");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Original_MARKBC));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class COMPANY_CODETableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public COMPANY_CODETableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "COMPANY_CODE";
            tableMapping.ColumnMappings.Add("PMCODE", "PMCODE");
            tableMapping.ColumnMappings.Add("DESCRIPTION", "DESCRIPTION");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM COMPANY_CODE\r\nWHERE     (PMCODE = @Original_PMCODE)";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_PMCODE", System.Data.SqlDbType.VarChar, 20, System.Data.ParameterDirection.Input, 0, 0, "PMCODE", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO COMPANY_CODE\r\n                      (PMCODE, DESCRIPTION)\r\nVALUES    " +
                " (@PMCODE,@DESCRIPTION); \r\nSELECT PMCODE, DESCRIPTION FROM COMPANY_CODE WHERE (P" +
                "MCODE = @PMCODE)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PMCODE", System.Data.SqlDbType.VarChar, 20, System.Data.ParameterDirection.Input, 0, 0, "PMCODE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DESCRIPTION", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "DESCRIPTION", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE    COMPANY_CODE\r\nSET              PMCODE = @PMCODE, DESCRIPTION = @DESCRIP" +
                "TION\r\nWHERE     (PMCODE = @Original_PMCODE); \r\nSELECT PMCODE, DESCRIPTION FROM C" +
                "OMPANY_CODE WHERE (PMCODE = @PMCODE)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PMCODE", System.Data.SqlDbType.VarChar, 20, System.Data.ParameterDirection.Input, 0, 0, "PMCODE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DESCRIPTION", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "DESCRIPTION", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_PMCODE", System.Data.SqlDbType.VarChar, 20, System.Data.ParameterDirection.Input, 0, 0, "PMCODE", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Workstation.Properties.Settings.Default.phmkConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     PMCODE, DESCRIPTION\r\nFROM         COMPANY_CODE";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(phmkDataSet.COMPANY_CODEDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual phmkDataSet.COMPANY_CODEDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            phmkDataSet.COMPANY_CODEDataTable dataTable = new phmkDataSet.COMPANY_CODEDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(phmkDataSet.COMPANY_CODEDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(phmkDataSet dataSet) {
            return this.Adapter.Update(dataSet, "COMPANY_CODE");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_PMCODE) {
            if ((Original_PMCODE == null)) {
                throw new System.ArgumentNullException("Original_PMCODE");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_PMCODE));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string PMCODE, string DESCRIPTION) {
            if ((PMCODE == null)) {
                throw new System.ArgumentNullException("PMCODE");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(PMCODE));
            }
            if ((DESCRIPTION == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(DESCRIPTION));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string PMCODE, string DESCRIPTION, string Original_PMCODE) {
            if ((PMCODE == null)) {
                throw new System.ArgumentNullException("PMCODE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(PMCODE));
            }
            if ((DESCRIPTION == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(DESCRIPTION));
            }
            if ((Original_PMCODE == null)) {
                throw new System.ArgumentNullException("Original_PMCODE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Original_PMCODE));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class LENGTH_CATEGORYTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public LENGTH_CATEGORYTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "LENGTH_CATEGORY";
            tableMapping.ColumnMappings.Add("CATEGORY", "CATEGORY");
            tableMapping.ColumnMappings.Add("DESCR", "DESCR");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM LENGTH_CATEGORY\r\nWHERE     (CATEGORY = @Original_CATEGORY)";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CATEGORY", System.Data.SqlDbType.VarChar, 20, System.Data.ParameterDirection.Input, 0, 0, "CATEGORY", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [LENGTH_CATEGORY] ([CATEGORY], [DESCR]) VALUES (@CATEGORY, @DESCR);\r\n" +
                "SELECT CATEGORY, DESCR FROM LENGTH_CATEGORY WHERE (CATEGORY = @CATEGORY)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CATEGORY", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CATEGORY", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DESCR", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "DESCR", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE    LENGTH_CATEGORY\r\nSET              CATEGORY = @CATEGORY, DESCR = @DESCR\r" +
                "\nWHERE     (CATEGORY = @Original_CATEGORY);  \r\nSELECT CATEGORY, DESCR FROM LENGT" +
                "H_CATEGORY WHERE (CATEGORY = @CATEGORY)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CATEGORY", System.Data.SqlDbType.VarChar, 20, System.Data.ParameterDirection.Input, 0, 0, "CATEGORY", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DESCR", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "DESCR", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CATEGORY", System.Data.SqlDbType.VarChar, 20, System.Data.ParameterDirection.Input, 0, 0, "CATEGORY", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Workstation.Properties.Settings.Default.phmkConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     CATEGORY, DESCR\r\nFROM         LENGTH_CATEGORY";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(phmkDataSet.LENGTH_CATEGORYDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual phmkDataSet.LENGTH_CATEGORYDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            phmkDataSet.LENGTH_CATEGORYDataTable dataTable = new phmkDataSet.LENGTH_CATEGORYDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(phmkDataSet.LENGTH_CATEGORYDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(phmkDataSet dataSet) {
            return this.Adapter.Update(dataSet, "LENGTH_CATEGORY");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_CATEGORY) {
            if ((Original_CATEGORY == null)) {
                throw new System.ArgumentNullException("Original_CATEGORY");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_CATEGORY));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string CATEGORY, string DESCR) {
            if ((CATEGORY == null)) {
                throw new System.ArgumentNullException("CATEGORY");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(CATEGORY));
            }
            if ((DESCR == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(DESCR));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string CATEGORY, string DESCR, string Original_CATEGORY) {
            if ((CATEGORY == null)) {
                throw new System.ArgumentNullException("CATEGORY");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(CATEGORY));
            }
            if ((DESCR == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(DESCR));
            }
            if ((Original_CATEGORY == null)) {
                throw new System.ArgumentNullException("Original_CATEGORY");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Original_CATEGORY));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class PACK_TYPETableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public PACK_TYPETableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "PACK_TYPE";
            tableMapping.ColumnMappings.Add("TYPE", "TYPE");
            tableMapping.ColumnMappings.Add("DESCR", "DESCR");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM PACK_TYPE\r\nWHERE     (TYPE = @Original_TYPE)";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_TYPE", System.Data.SqlDbType.VarChar, 10, System.Data.ParameterDirection.Input, 0, 0, "TYPE", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [PACK_TYPE] ([TYPE], [DESCR]) VALUES (@TYPE, @DESCR);\r\nSELECT TYPE, D" +
                "ESCR FROM PACK_TYPE WHERE (TYPE = @TYPE)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@TYPE", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "TYPE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DESCR", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "DESCR", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE    PACK_TYPE\r\nSET              TYPE = @TYPE, DESCR = @DESCR\r\nWHERE     (TY" +
                "PE = @Original_TYPE);  \r\nSELECT TYPE, DESCR FROM PACK_TYPE WHERE (TYPE = @TYPE)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@TYPE", System.Data.SqlDbType.VarChar, 10, System.Data.ParameterDirection.Input, 0, 0, "TYPE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DESCR", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "DESCR", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_TYPE", System.Data.SqlDbType.VarChar, 10, System.Data.ParameterDirection.Input, 0, 0, "TYPE", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Workstation.Properties.Settings.Default.phmkConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     TYPE, DESCR\r\nFROM         PACK_TYPE";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(phmkDataSet.PACK_TYPEDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual phmkDataSet.PACK_TYPEDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            phmkDataSet.PACK_TYPEDataTable dataTable = new phmkDataSet.PACK_TYPEDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(phmkDataSet.PACK_TYPEDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(phmkDataSet dataSet) {
            return this.Adapter.Update(dataSet, "PACK_TYPE");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_TYPE) {
            if ((Original_TYPE == null)) {
                throw new System.ArgumentNullException("Original_TYPE");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_TYPE));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string TYPE, string DESCR) {
            if ((TYPE == null)) {
                throw new System.ArgumentNullException("TYPE");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(TYPE));
            }
            if ((DESCR == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(DESCR));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string TYPE, string DESCR, string Original_TYPE) {
            if ((TYPE == null)) {
                throw new System.ArgumentNullException("TYPE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(TYPE));
            }
            if ((DESCR == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(DESCR));
            }
            if ((Original_TYPE == null)) {
                throw new System.ArgumentNullException("Original_TYPE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Original_TYPE));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class BRAND_FAMILYTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public BRAND_FAMILYTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "BRAND_FAMILY";
            tableMapping.ColumnMappings.Add("PMCODE", "PMCODE");
            tableMapping.ColumnMappings.Add("DESCR", "DESCR");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM BRAND_FAMILY\r\nWHERE     (PMCODE = @Original_PMCODE)";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_PMCODE", System.Data.SqlDbType.VarChar, 20, System.Data.ParameterDirection.Input, 0, 0, "PMCODE", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO BRAND_FAMILY\r\n                      (PMCODE, DESCR)\r\nVALUES     (@PMC" +
                "ODE,@DESCR); \r\nSELECT PMCODE, DESCR FROM BRAND_FAMILY WHERE (PMCODE = @PMCODE)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PMCODE", System.Data.SqlDbType.VarChar, 20, System.Data.ParameterDirection.Input, 0, 0, "PMCODE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DESCR", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "DESCR", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE    BRAND_FAMILY\r\nSET              PMCODE = @PMCODE, DESCR = @DESCR\r\nWHERE " +
                "    (PMCODE = @Original_PMCODE); \r\nSELECT PMCODE, DESCR FROM BRAND_FAMILY WHERE " +
                "(PMCODE = @PMCODE)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PMCODE", System.Data.SqlDbType.VarChar, 20, System.Data.ParameterDirection.Input, 0, 0, "PMCODE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DESCR", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "DESCR", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_PMCODE", System.Data.SqlDbType.VarChar, 20, System.Data.ParameterDirection.Input, 0, 0, "PMCODE", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Workstation.Properties.Settings.Default.phmkConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     PMCODE, DESCR\r\nFROM         BRAND_FAMILY";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(phmkDataSet.BRAND_FAMILYDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual phmkDataSet.BRAND_FAMILYDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            phmkDataSet.BRAND_FAMILYDataTable dataTable = new phmkDataSet.BRAND_FAMILYDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(phmkDataSet.BRAND_FAMILYDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(phmkDataSet dataSet) {
            return this.Adapter.Update(dataSet, "BRAND_FAMILY");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_PMCODE) {
            if ((Original_PMCODE == null)) {
                throw new System.ArgumentNullException("Original_PMCODE");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_PMCODE));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string PMCODE, string DESCR) {
            if ((PMCODE == null)) {
                throw new System.ArgumentNullException("PMCODE");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(PMCODE));
            }
            if ((DESCR == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(DESCR));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string PMCODE, string DESCR, string Original_PMCODE) {
            if ((PMCODE == null)) {
                throw new System.ArgumentNullException("PMCODE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(PMCODE));
            }
            if ((DESCR == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(DESCR));
            }
            if ((Original_PMCODE == null)) {
                throw new System.ArgumentNullException("Original_PMCODE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Original_PMCODE));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class SPECIAL_FLAVOR_CODETableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SPECIAL_FLAVOR_CODETableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "SPECIAL_FLAVOR_CODE";
            tableMapping.ColumnMappings.Add("CODE", "CODE");
            tableMapping.ColumnMappings.Add("DESCR", "DESCR");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM SPECIAL_FLAVOR_CODE\r\nWHERE     (CODE = @Original_CODE)";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CODE", System.Data.SqlDbType.VarChar, 10, System.Data.ParameterDirection.Input, 0, 0, "CODE", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [SPECIAL_FLAVOR_CODE] ([CODE], [DESCR]) VALUES (@CODE, @DESCR);\r\nSELE" +
                "CT CODE, DESCR FROM SPECIAL_FLAVOR_CODE WHERE (CODE = @CODE)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CODE", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CODE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DESCR", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "DESCR", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE    SPECIAL_FLAVOR_CODE\r\nSET              CODE = @CODE, DESCR = @DESCR\r\nWHE" +
                "RE     (CODE = @Original_CODE); \r\nSELECT CODE, DESCR FROM SPECIAL_FLAVOR_CODE WH" +
                "ERE (CODE = @CODE)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CODE", System.Data.SqlDbType.VarChar, 10, System.Data.ParameterDirection.Input, 0, 0, "CODE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DESCR", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "DESCR", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CODE", System.Data.SqlDbType.VarChar, 10, System.Data.ParameterDirection.Input, 0, 0, "CODE", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Workstation.Properties.Settings.Default.phmkConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     CODE, DESCR\r\nFROM         SPECIAL_FLAVOR_CODE";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(phmkDataSet.SPECIAL_FLAVOR_CODEDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual phmkDataSet.SPECIAL_FLAVOR_CODEDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            phmkDataSet.SPECIAL_FLAVOR_CODEDataTable dataTable = new phmkDataSet.SPECIAL_FLAVOR_CODEDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(phmkDataSet.SPECIAL_FLAVOR_CODEDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(phmkDataSet dataSet) {
            return this.Adapter.Update(dataSet, "SPECIAL_FLAVOR_CODE");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_CODE) {
            if ((Original_CODE == null)) {
                throw new System.ArgumentNullException("Original_CODE");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_CODE));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string CODE, string DESCR) {
            if ((CODE == null)) {
                throw new System.ArgumentNullException("CODE");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(CODE));
            }
            if ((DESCR == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(DESCR));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string CODE, string DESCR, string Original_CODE) {
            if ((CODE == null)) {
                throw new System.ArgumentNullException("CODE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(CODE));
            }
            if ((DESCR == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(DESCR));
            }
            if ((Original_CODE == null)) {
                throw new System.ArgumentNullException("Original_CODE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Original_CODE));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class THICKNESS_CATEGORYTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public THICKNESS_CATEGORYTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "THICKNESS_CATEGORY";
            tableMapping.ColumnMappings.Add("CATEGORY", "CATEGORY");
            tableMapping.ColumnMappings.Add("DESCR", "DESCR");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM THICKNESS_CATEGORY\r\nWHERE     (CATEGORY = @Original_CATEGORY)";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CATEGORY", System.Data.SqlDbType.VarChar, 20, System.Data.ParameterDirection.Input, 0, 0, "CATEGORY", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO THICKNESS_CATEGORY\r\n                      (CATEGORY, DESCR)\r\nVALUES  " +
                "   (@CATEGORY,@DESCR); \r\nSELECT CATEGORY, DESCR FROM THICKNESS_CATEGORY WHERE (C" +
                "ATEGORY = @CATEGORY)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CATEGORY", System.Data.SqlDbType.VarChar, 20, System.Data.ParameterDirection.Input, 0, 0, "CATEGORY", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DESCR", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "DESCR", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE    THICKNESS_CATEGORY\r\nSET              CATEGORY = @CATEGORY, DESCR = @DES" +
                "CR\r\nWHERE     (CATEGORY = @Original_CATEGORY); \r\nSELECT CATEGORY, DESCR FROM THI" +
                "CKNESS_CATEGORY WHERE (CATEGORY = @CATEGORY)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CATEGORY", System.Data.SqlDbType.VarChar, 20, System.Data.ParameterDirection.Input, 0, 0, "CATEGORY", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DESCR", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "DESCR", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CATEGORY", System.Data.SqlDbType.VarChar, 20, System.Data.ParameterDirection.Input, 0, 0, "CATEGORY", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Workstation.Properties.Settings.Default.phmkConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     CATEGORY, DESCR\r\nFROM         THICKNESS_CATEGORY";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(phmkDataSet.THICKNESS_CATEGORYDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual phmkDataSet.THICKNESS_CATEGORYDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            phmkDataSet.THICKNESS_CATEGORYDataTable dataTable = new phmkDataSet.THICKNESS_CATEGORYDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(phmkDataSet.THICKNESS_CATEGORYDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(phmkDataSet dataSet) {
            return this.Adapter.Update(dataSet, "THICKNESS_CATEGORY");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_CATEGORY) {
            if ((Original_CATEGORY == null)) {
                throw new System.ArgumentNullException("Original_CATEGORY");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_CATEGORY));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string CATEGORY, string DESCR) {
            if ((CATEGORY == null)) {
                throw new System.ArgumentNullException("CATEGORY");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(CATEGORY));
            }
            if ((DESCR == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(DESCR));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string CATEGORY, string DESCR, string Original_CATEGORY) {
            if ((CATEGORY == null)) {
                throw new System.ArgumentNullException("CATEGORY");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(CATEGORY));
            }
            if ((DESCR == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(DESCR));
            }
            if ((Original_CATEGORY == null)) {
                throw new System.ArgumentNullException("Original_CATEGORY");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Original_CATEGORY));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class SIGNATURE_TYPETableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SIGNATURE_TYPETableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "SIGNATURE_TYPE";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("DESCR", "DESCR");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM SIGNATURE_TYPE\r\nWHERE     (ID = @Original_ID)";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO SIGNATURE_TYPE\r\n                      (ID, DESCR)\r\nVALUES     (@ID,@D" +
                "ESCR); \r\nSELECT ID, DESCR FROM SIGNATURE_TYPE WHERE (ID = @ID)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DESCR", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "DESCR", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE    SIGNATURE_TYPE\r\nSET              ID = @ID, DESCR = @DESCR\r\nWHERE     (I" +
                "D = @Original_ID);  \r\nSELECT ID, DESCR FROM SIGNATURE_TYPE WHERE (ID = @ID)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DESCR", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "DESCR", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Workstation.Properties.Settings.Default.phmkConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ID, DESCR FROM dbo.SIGNATURE_TYPE";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(phmkDataSet.SIGNATURE_TYPEDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual phmkDataSet.SIGNATURE_TYPEDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            phmkDataSet.SIGNATURE_TYPEDataTable dataTable = new phmkDataSet.SIGNATURE_TYPEDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(phmkDataSet.SIGNATURE_TYPEDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(phmkDataSet dataSet) {
            return this.Adapter.Update(dataSet, "SIGNATURE_TYPE");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ID) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ID));
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int ID, string DESCR) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(ID));
            if ((DESCR == null)) {
                throw new System.ArgumentNullException("DESCR");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(DESCR));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int ID, string DESCR, int Original_ID) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(ID));
            if ((DESCR == null)) {
                throw new System.ArgumentNullException("DESCR");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(DESCR));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_ID));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class PASSPORT_TYPETableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public PASSPORT_TYPETableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "PASSPORT_TYPE";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("NAME", "NAME");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM PASSPORT_TYPE\r\nWHERE     (ID = @Original_ID)";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[PASSPORT_TYPE] ([ID], [NAME]) VALUES (@ID, @NAME);\r\nSELECT ID," +
                " NAME FROM PASSPORT_TYPE WHERE (ID = @ID)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NAME", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "NAME", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE    PASSPORT_TYPE\r\nSET              ID = @ID, NAME = @NAME\r\nWHERE     (ID =" +
                " @Original_ID); \r\nSELECT ID, NAME FROM PASSPORT_TYPE WHERE (ID = @ID)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NAME", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "NAME", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Workstation.Properties.Settings.Default.phmkConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ID, NAME FROM dbo.PASSPORT_TYPE";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(phmkDataSet.PASSPORT_TYPEDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual phmkDataSet.PASSPORT_TYPEDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            phmkDataSet.PASSPORT_TYPEDataTable dataTable = new phmkDataSet.PASSPORT_TYPEDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(phmkDataSet.PASSPORT_TYPEDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(phmkDataSet dataSet) {
            return this.Adapter.Update(dataSet, "PASSPORT_TYPE");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ID) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ID));
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int ID, string NAME) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(ID));
            if ((NAME == null)) {
                throw new System.ArgumentNullException("NAME");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(NAME));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int ID, string NAME, int Original_ID) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(ID));
            if ((NAME == null)) {
                throw new System.ArgumentNullException("NAME");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(NAME));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_ID));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class LOYALTYTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public LOYALTYTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "LOYALTY";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("DESCR", "DESCR");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM LOYALTY\r\nWHERE     (ID = @Original_ID)";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[LOYALTY] ([ID], [DESCR]) VALUES (@ID, @DESCR);\r\nSELECT ID, DES" +
                "CR FROM LOYALTY WHERE (ID = @ID)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DESCR", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "DESCR", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE    LOYALTY\r\nSET              ID = @ID, DESCR = @DESCR\r\nWHERE     (ID = @Or" +
                "iginal_ID); \r\nSELECT ID, DESCR FROM LOYALTY WHERE (ID = @ID)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DESCR", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "DESCR", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Workstation.Properties.Settings.Default.phmkConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ID, DESCR FROM dbo.LOYALTY";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(phmkDataSet.LOYALTYDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual phmkDataSet.LOYALTYDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            phmkDataSet.LOYALTYDataTable dataTable = new phmkDataSet.LOYALTYDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(phmkDataSet.LOYALTYDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(phmkDataSet dataSet) {
            return this.Adapter.Update(dataSet, "LOYALTY");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ID) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ID));
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int ID, string DESCR) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(ID));
            if ((DESCR == null)) {
                throw new System.ArgumentNullException("DESCR");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(DESCR));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int ID, string DESCR, int Original_ID) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(ID));
            if ((DESCR == null)) {
                throw new System.ArgumentNullException("DESCR");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(DESCR));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_ID));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class LANGUAGETableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public LANGUAGETableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "LANGUAGE";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("LANGUAGECODE", "LANGUAGECODE");
            tableMapping.ColumnMappings.Add("NAME", "NAME");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM LANGUAGE\r\nWHERE     (ID = @Original_ID)";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[LANGUAGE] ([ID], [LANGUAGECODE], [NAME]) VALUES (@ID, @LANGUAG" +
                "ECODE, @NAME);\r\nSELECT ID, LANGUAGECODE, NAME FROM LANGUAGE WHERE (ID = @ID)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LANGUAGECODE", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "LANGUAGECODE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NAME", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "NAME", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE    LANGUAGE\r\nSET              ID = @ID, LANGUAGECODE = @LANGUAGECODE, NAME" +
                " = @NAME\r\nWHERE     (ID = @Original_ID); \r\nSELECT ID, LANGUAGECODE, NAME FROM LA" +
                "NGUAGE WHERE (ID = @ID)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LANGUAGECODE", System.Data.SqlDbType.VarChar, 3, System.Data.ParameterDirection.Input, 0, 0, "LANGUAGECODE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NAME", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "NAME", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Workstation.Properties.Settings.Default.phmkConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ID, LANGUAGECODE, NAME FROM dbo.LANGUAGE";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(phmkDataSet.LANGUAGEDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual phmkDataSet.LANGUAGEDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            phmkDataSet.LANGUAGEDataTable dataTable = new phmkDataSet.LANGUAGEDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(phmkDataSet.LANGUAGEDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(phmkDataSet dataSet) {
            return this.Adapter.Update(dataSet, "LANGUAGE");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ID) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ID));
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int ID, string LANGUAGECODE, string NAME) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(ID));
            if ((LANGUAGECODE == null)) {
                throw new System.ArgumentNullException("LANGUAGECODE");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(LANGUAGECODE));
            }
            if ((NAME == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(NAME));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int ID, string LANGUAGECODE, string NAME, int Original_ID) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(ID));
            if ((LANGUAGECODE == null)) {
                throw new System.ArgumentNullException("LANGUAGECODE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(LANGUAGECODE));
            }
            if ((NAME == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(NAME));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Original_ID));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class OBLASTTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public OBLASTTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "OBLAST";
            tableMapping.ColumnMappings.Add("OBLASTID", "OBLASTID");
            tableMapping.ColumnMappings.Add("NAME", "NAME");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM OBLAST\r\nWHERE     (OBLASTID = @Original_OBLASTID)";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_OBLASTID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "OBLASTID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO OBLAST\r\n                      (NAME)\r\nVALUES     (@NAME);  \r\nSELECT @" +
                "@IDENTITY AS OBLASTID FROM OBLAST";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NAME", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "NAME", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE    OBLAST\r\nSET              NAME = @NAME\r\nWHERE     (OBLASTID = @Original_" +
                "OBLASTID);  \r\nSELECT OBLASTID, NAME FROM OBLAST WHERE (OBLASTID = @OBLASTID)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NAME", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "NAME", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_OBLASTID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "OBLASTID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@OBLASTID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "OBLASTID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Workstation.Properties.Settings.Default.phmkConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT OBLASTID, NAME FROM dbo.OBLAST";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(phmkDataSet.OBLASTDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual phmkDataSet.OBLASTDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            phmkDataSet.OBLASTDataTable dataTable = new phmkDataSet.OBLASTDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(phmkDataSet.OBLASTDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(phmkDataSet dataSet) {
            return this.Adapter.Update(dataSet, "OBLAST");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(System.Nullable<int> Original_OBLASTID) {
            if ((Original_OBLASTID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_OBLASTID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string NAME) {
            if ((NAME == null)) {
                throw new System.ArgumentNullException("NAME");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(NAME));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string NAME, System.Nullable<int> Original_OBLASTID, System.Nullable<int> OBLASTID) {
            if ((NAME == null)) {
                throw new System.ArgumentNullException("NAME");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(NAME));
            }
            if ((Original_OBLASTID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(Original_OBLASTID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((OBLASTID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(OBLASTID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class REGIONTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public REGIONTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "REGION";
            tableMapping.ColumnMappings.Add("REGIONID", "REGIONID");
            tableMapping.ColumnMappings.Add("OBLASTID", "OBLASTID");
            tableMapping.ColumnMappings.Add("NAME", "NAME");
            tableMapping.ColumnMappings.Add("OBLNAME", "OBLNAME");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM REGION\r\nWHERE     (REGIONID = @Original_REGIONID)";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_REGIONID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "REGIONID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO REGION\r\n                      (OBLASTID, NAME)\r\nVALUES     (@OBLASTID" +
                ",@NAME);\r\nSELECT @@IDENTITY AS REGIONID FROM REGION;";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@OBLASTID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "OBLASTID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NAME", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "NAME", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE    REGION\r\nSET              NAME = @NAME, OBLASTID = @OBLASTID\r\nWHERE     " +
                "(REGIONID = @Original_REGIONID)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NAME", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "NAME", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@OBLASTID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "OBLASTID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_REGIONID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "REGIONID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Workstation.Properties.Settings.Default.phmkConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     REGION.REGIONID, REGION.OBLASTID, REGION.NAME, OBLAST.NAME AS OBLNAME\r" +
                "\nFROM         REGION LEFT OUTER JOIN\r\n                      OBLAST ON REGION.OBL" +
                "ASTID = OBLAST.OBLASTID";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "SELECT     REGION.REGIONID, REGION.NAME, REGION.OBLASTID, OBLAST.NAME AS OBLNAME\r" +
                "\nFROM         REGION INNER JOIN\r\n                      OBLAST ON REGION.OBLASTID" +
                " = OBLAST.OBLASTID\r\nWHERE     (REGION.OBLASTID = @OBLASTID)";
            this._commandCollection[1].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@OBLASTID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "OBLASTID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(phmkDataSet.REGIONDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual phmkDataSet.REGIONDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            phmkDataSet.REGIONDataTable dataTable = new phmkDataSet.REGIONDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillBy(phmkDataSet.REGIONDataTable dataTable, System.Nullable<int> OBLASTID) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((OBLASTID.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((int)(OBLASTID.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual phmkDataSet.REGIONDataTable GetDataBy(System.Nullable<int> OBLASTID) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((OBLASTID.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((int)(OBLASTID.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = System.DBNull.Value;
            }
            phmkDataSet.REGIONDataTable dataTable = new phmkDataSet.REGIONDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(phmkDataSet.REGIONDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(phmkDataSet dataSet) {
            return this.Adapter.Update(dataSet, "REGION");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class SETTLEMENT_TYPETableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SETTLEMENT_TYPETableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "SETTLEMENT_TYPE";
            tableMapping.ColumnMappings.Add("SETTLEMENTTYPEID", "SETTLEMENTTYPEID");
            tableMapping.ColumnMappings.Add("DESCR", "DESCR");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM SETTLEMENT_TYPE\r\nWHERE     (SETTLEMENTTYPEID = @Original_SETTLEMENTTY" +
                "PEID)";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_SETTLEMENTTYPEID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "SETTLEMENTTYPEID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[SETTLEMENT_TYPE] ([SETTLEMENTTYPEID], [DESCR]) VALUES (@SETTLE" +
                "MENTTYPEID, @DESCR);\r\nSELECT SETTLEMENTTYPEID, DESCR FROM SETTLEMENT_TYPE WHERE " +
                "(SETTLEMENTTYPEID = @SETTLEMENTTYPEID)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SETTLEMENTTYPEID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SETTLEMENTTYPEID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DESCR", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "DESCR", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE    SETTLEMENT_TYPE\r\nSET              SETTLEMENTTYPEID = @SETTLEMENTTYPEID," +
                " DESCR = @DESCR\r\nWHERE     (SETTLEMENTTYPEID = @Original_SETTLEMENTTYPEID); \r\nSE" +
                "LECT SETTLEMENTTYPEID, DESCR FROM SETTLEMENT_TYPE WHERE (SETTLEMENTTYPEID = @SET" +
                "TLEMENTTYPEID)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SETTLEMENTTYPEID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "SETTLEMENTTYPEID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DESCR", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "DESCR", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_SETTLEMENTTYPEID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "SETTLEMENTTYPEID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Workstation.Properties.Settings.Default.phmkConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT SETTLEMENTTYPEID, DESCR FROM dbo.SETTLEMENT_TYPE";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(phmkDataSet.SETTLEMENT_TYPEDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual phmkDataSet.SETTLEMENT_TYPEDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            phmkDataSet.SETTLEMENT_TYPEDataTable dataTable = new phmkDataSet.SETTLEMENT_TYPEDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(phmkDataSet.SETTLEMENT_TYPEDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(phmkDataSet dataSet) {
            return this.Adapter.Update(dataSet, "SETTLEMENT_TYPE");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_SETTLEMENTTYPEID) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_SETTLEMENTTYPEID));
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int SETTLEMENTTYPEID, string DESCR) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(SETTLEMENTTYPEID));
            if ((DESCR == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(DESCR));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int SETTLEMENTTYPEID, string DESCR, int Original_SETTLEMENTTYPEID) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(SETTLEMENTTYPEID));
            if ((DESCR == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(DESCR));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_SETTLEMENTTYPEID));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class STREETTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public STREETTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "STREET";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("STREET_TYPEID", "STREET_TYPEID");
            tableMapping.ColumnMappings.Add("NAME", "NAME");
            tableMapping.ColumnMappings.Add("STREETTYPENAME", "STREETTYPENAME");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM STREET\r\nWHERE     (ID = @Original_ID)";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO STREET\r\n                      (STREET_TYPEID, NAME)\r\nVALUES     (@STR" +
                "EET_TYPEID,@NAME);\r\nSELECT     @@IDENTITY AS ID FROM STREET;";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@STREET_TYPEID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "STREET_TYPEID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NAME", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "NAME", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE    STREET\r\nSET              STREET_TYPEID = @STREET_TYPEID, NAME = @NAME\r\n" +
                "WHERE     (ID = @Original_ID);    \r\nSELECT ID, STREET_TYPEID, NAME FROM STREET W" +
                "HERE (ID = @ID)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@STREET_TYPEID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "STREET_TYPEID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NAME", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "NAME", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Workstation.Properties.Settings.Default.phmkConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     STREET.ID, STREET.STREET_TYPEID, STREET.NAME, STREET_TYPE.STREETTYPENA" +
                "ME\r\nFROM         STREET INNER JOIN\r\n                      STREET_TYPE ON STREET." +
                "STREET_TYPEID = STREET_TYPE.STREETTYPEID";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "SELECT     STREET.ID, STREET.STREET_TYPEID, STREET.NAME, STREET_TYPE.STREETTYPENA" +
                "ME\r\nFROM         STREET INNER JOIN\r\n                      STREET_TYPE ON STREET." +
                "STREET_TYPEID = STREET_TYPE.STREETTYPEID\r\nWHERE     (STREET.STREET_TYPEID = @STR" +
                "EET_TYPEID)";
            this._commandCollection[1].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@STREET_TYPEID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "STREET_TYPEID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(phmkDataSet.STREETDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual phmkDataSet.STREETDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            phmkDataSet.STREETDataTable dataTable = new phmkDataSet.STREETDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillBy(phmkDataSet.STREETDataTable dataTable, int STREET_TYPEID) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(STREET_TYPEID));
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual phmkDataSet.STREETDataTable GetDataBy(int STREET_TYPEID) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(STREET_TYPEID));
            phmkDataSet.STREETDataTable dataTable = new phmkDataSet.STREETDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(phmkDataSet.STREETDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(phmkDataSet dataSet) {
            return this.Adapter.Update(dataSet, "STREET");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(System.Nullable<int> Original_ID) {
            if ((Original_ID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int STREET_TYPEID, string NAME) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(STREET_TYPEID));
            if ((NAME == null)) {
                throw new System.ArgumentNullException("NAME");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(NAME));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int STREET_TYPEID, string NAME, System.Nullable<int> Original_ID, System.Nullable<int> ID) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(STREET_TYPEID));
            if ((NAME == null)) {
                throw new System.ArgumentNullException("NAME");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(NAME));
            }
            if ((Original_ID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_ID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((ID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(ID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class STREET_TYPETableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public STREET_TYPETableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "STREET_TYPE";
            tableMapping.ColumnMappings.Add("STREETTYPEID", "STREETTYPEID");
            tableMapping.ColumnMappings.Add("STREETTYPENAME", "STREETTYPENAME");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM STREET_TYPE\r\nWHERE     (STREETTYPEID = @Original_STREETTYPEID)";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_STREETTYPEID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "STREETTYPEID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[STREET_TYPE] ([STREETTYPEID], [STREETTYPENAME]) VALUES (@STREE" +
                "TTYPEID, @STREETTYPENAME);\r\nSELECT STREETTYPEID, STREETTYPENAME FROM STREET_TYPE" +
                " WHERE (STREETTYPEID = @STREETTYPEID)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@STREETTYPEID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "STREETTYPEID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@STREETTYPENAME", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "STREETTYPENAME", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE    STREET_TYPE\r\nSET              STREETTYPEID = @STREETTYPEID, STREETTYPEN" +
                "AME = @STREETTYPENAME\r\nWHERE     (STREETTYPEID = @Original_STREETTYPEID);  \r\nSEL" +
                "ECT STREETTYPEID, STREETTYPENAME FROM STREET_TYPE WHERE (STREETTYPEID = @STREETT" +
                "YPEID)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@STREETTYPEID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "STREETTYPEID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@STREETTYPENAME", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "STREETTYPENAME", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_STREETTYPEID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "STREETTYPEID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Workstation.Properties.Settings.Default.phmkConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     STREETTYPEID, STREETTYPENAME\r\nFROM         STREET_TYPE";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(phmkDataSet.STREET_TYPEDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual phmkDataSet.STREET_TYPEDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            phmkDataSet.STREET_TYPEDataTable dataTable = new phmkDataSet.STREET_TYPEDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(phmkDataSet.STREET_TYPEDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(phmkDataSet dataSet) {
            return this.Adapter.Update(dataSet, "STREET_TYPE");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_STREETTYPEID) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_STREETTYPEID));
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int STREETTYPEID, string STREETTYPENAME) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(STREETTYPEID));
            if ((STREETTYPENAME == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(STREETTYPENAME));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int STREETTYPEID, string STREETTYPENAME, int Original_STREETTYPEID) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(STREETTYPEID));
            if ((STREETTYPENAME == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(STREETTYPENAME));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_STREETTYPEID));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class POPULATED_POINTSTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public POPULATED_POINTSTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "POPULATED_POINTS";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("REGIONID", "REGIONID");
            tableMapping.ColumnMappings.Add("SETTLEMENTTYPEID", "SETTLEMENTTYPEID");
            tableMapping.ColumnMappings.Add("NAME", "NAME");
            tableMapping.ColumnMappings.Add("DESCR", "DESCR");
            tableMapping.ColumnMappings.Add("REGIONNAME", "REGIONNAME");
            tableMapping.ColumnMappings.Add("SETTLEMENTTYPENAME", "SETTLEMENTTYPENAME");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM POPULATED_POINTS\r\nWHERE     (ID = @Original_ID)";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO POPULATED_POINTS\r\n                      (REGIONID, SETTLEMENTTYPEID, " +
                "NAME, DESCR)\r\nVALUES     (@REGIONID,@SETTLEMENTTYPEID,@NAME,@DESCR);\r\nSELECT @@I" +
                "DENTITY AS ID FROM POPULATED_POINTS;";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@REGIONID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "REGIONID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SETTLEMENTTYPEID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "SETTLEMENTTYPEID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NAME", System.Data.SqlDbType.VarChar, 30, System.Data.ParameterDirection.Input, 0, 0, "NAME", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DESCR", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "DESCR", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE    POPULATED_POINTS\r\nSET              REGIONID = @REGIONID, SETTLEMENTTYPE" +
                "ID = @SETTLEMENTTYPEID, NAME = @NAME, DESCR = @DESCR\r\nWHERE     (ID = @Original_" +
                "ID)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@REGIONID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "REGIONID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SETTLEMENTTYPEID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "SETTLEMENTTYPEID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NAME", System.Data.SqlDbType.VarChar, 30, System.Data.ParameterDirection.Input, 0, 0, "NAME", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DESCR", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "DESCR", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Workstation.Properties.Settings.Default.phmkConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[5];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT     POPULATED_POINTS.ID, POPULATED_POINTS.REGIONID, POPULATED_POINTS.SETTLEMENTTYPEID, POPULATED_POINTS.NAME, 
                      POPULATED_POINTS.DESCR, REGION.NAME AS REGIONNAME, SETTLEMENT_TYPE.DESCR AS SETTLEMENTTYPENAME
FROM         POPULATED_POINTS INNER JOIN
                      REGION ON POPULATED_POINTS.REGIONID = REGION.REGIONID INNER JOIN
                      OBLAST ON REGION.OBLASTID = OBLAST.OBLASTID INNER JOIN
                      SETTLEMENT_TYPE ON POPULATED_POINTS.SETTLEMENTTYPEID = SETTLEMENT_TYPE.SETTLEMENTTYPEID
WHERE     (OBLAST.OBLASTID = @Original_OBLASTID)
ORDER BY POPULATED_POINTS.NAME";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_OBLASTID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "OBLASTID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = @"SELECT     POPULATED_POINTS.ID, POPULATED_POINTS.REGIONID, POPULATED_POINTS.SETTLEMENTTYPEID, POPULATED_POINTS.NAME, 
                      POPULATED_POINTS.DESCR, REGION.NAME AS REGIONNAME, SETTLEMENT_TYPE.DESCR AS SETTLEMENTTYPENAME
FROM         POPULATED_POINTS INNER JOIN
                      REGION ON POPULATED_POINTS.REGIONID = REGION.REGIONID INNER JOIN
                      OBLAST ON REGION.OBLASTID = OBLAST.OBLASTID INNER JOIN
                      SETTLEMENT_TYPE ON POPULATED_POINTS.SETTLEMENTTYPEID = SETTLEMENT_TYPE.SETTLEMENTTYPEID
WHERE     (POPULATED_POINTS.REGIONID = @REGIONID)
ORDER BY POPULATED_POINTS.NAME";
            this._commandCollection[1].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@REGIONID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "REGIONID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = @"SELECT     POPULATED_POINTS.ID, POPULATED_POINTS.REGIONID, POPULATED_POINTS.SETTLEMENTTYPEID, POPULATED_POINTS.NAME, 
                      POPULATED_POINTS.DESCR, REGION.NAME AS REGIONNAME, SETTLEMENT_TYPE.DESCR AS SETTLEMENTTYPENAME
FROM         POPULATED_POINTS INNER JOIN
                      REGION ON POPULATED_POINTS.REGIONID = REGION.REGIONID INNER JOIN
                      SETTLEMENT_TYPE ON POPULATED_POINTS.SETTLEMENTTYPEID = SETTLEMENT_TYPE.SETTLEMENTTYPEID
WHERE     (POPULATED_POINTS.REGIONID = @REGIONID) AND (SETTLEMENT_TYPE.ID = @SETTLEMENTTYPE_ID)
ORDER BY POPULATED_POINTS.NAME";
            this._commandCollection[2].CommandType = System.Data.CommandType.Text;
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@REGIONID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "REGIONID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@SETTLEMENTTYPE_ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[3].Connection = this.Connection;
            this._commandCollection[3].CommandText = @"SELECT     POPULATED_POINTS.ID, POPULATED_POINTS.REGIONID, POPULATED_POINTS.SETTLEMENTTYPEID, POPULATED_POINTS.NAME, 
                      POPULATED_POINTS.DESCR, REGION.NAME AS REGIONNAME, SETTLEMENT_TYPE.DESCR AS SETTLEMENTTYPENAME
FROM         POPULATED_POINTS LEFT OUTER JOIN
                      REGION ON POPULATED_POINTS.REGIONID = REGION.REGIONID LEFT OUTER JOIN
                      SETTLEMENT_TYPE ON POPULATED_POINTS.SETTLEMENTTYPEID = SETTLEMENT_TYPE.SETTLEMENTTYPEID
ORDER BY POPULATED_POINTS.NAME";
            this._commandCollection[3].CommandType = System.Data.CommandType.Text;
            this._commandCollection[4] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[4].Connection = this.Connection;
            this._commandCollection[4].CommandText = @"SELECT     POPULATED_POINTS.ID, POPULATED_POINTS.REGIONID, POPULATED_POINTS.SETTLEMENTTYPEID, POPULATED_POINTS.NAME, 
                      POPULATED_POINTS.DESCR, REGION.NAME AS REGIONNAME, SETTLEMENT_TYPE.DESCR AS SETTLEMENTTYPENAME
FROM         POPULATED_POINTS INNER JOIN
                      REGION ON POPULATED_POINTS.REGIONID = REGION.REGIONID INNER JOIN
                      SETTLEMENT_TYPE ON POPULATED_POINTS.SETTLEMENTTYPEID = SETTLEMENT_TYPE.SETTLEMENTTYPEID
WHERE     (SETTLEMENT_TYPE.ID = @SETTLEMENTTYPE_ID)
ORDER BY POPULATED_POINTS.NAME";
            this._commandCollection[4].CommandType = System.Data.CommandType.Text;
            this._commandCollection[4].Parameters.Add(new System.Data.SqlClient.SqlParameter("@SETTLEMENTTYPE_ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(phmkDataSet.POPULATED_POINTSDataTable dataTable, int Original_OBLASTID) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(Original_OBLASTID));
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual phmkDataSet.POPULATED_POINTSDataTable GetData(int Original_OBLASTID) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(Original_OBLASTID));
            phmkDataSet.POPULATED_POINTSDataTable dataTable = new phmkDataSet.POPULATED_POINTSDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillBy(phmkDataSet.POPULATED_POINTSDataTable dataTable, System.Nullable<int> REGIONID) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((REGIONID.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((int)(REGIONID.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual phmkDataSet.POPULATED_POINTSDataTable GetDataBy(System.Nullable<int> REGIONID) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((REGIONID.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((int)(REGIONID.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = System.DBNull.Value;
            }
            phmkDataSet.POPULATED_POINTSDataTable dataTable = new phmkDataSet.POPULATED_POINTSDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillBy1(phmkDataSet.POPULATED_POINTSDataTable dataTable, System.Nullable<int> REGIONID, System.Nullable<int> SETTLEMENTTYPE_ID) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((REGIONID.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((int)(REGIONID.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = System.DBNull.Value;
            }
            if ((SETTLEMENTTYPE_ID.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(SETTLEMENTTYPE_ID.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual phmkDataSet.POPULATED_POINTSDataTable GetDataBy1(System.Nullable<int> REGIONID, System.Nullable<int> SETTLEMENTTYPE_ID) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((REGIONID.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((int)(REGIONID.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = System.DBNull.Value;
            }
            if ((SETTLEMENTTYPE_ID.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(SETTLEMENTTYPE_ID.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            phmkDataSet.POPULATED_POINTSDataTable dataTable = new phmkDataSet.POPULATED_POINTSDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByAll(phmkDataSet.POPULATED_POINTSDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[3];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual phmkDataSet.POPULATED_POINTSDataTable GetDataByAll() {
            this.Adapter.SelectCommand = this.CommandCollection[3];
            phmkDataSet.POPULATED_POINTSDataTable dataTable = new phmkDataSet.POPULATED_POINTSDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillBySETTLEMENT_TYPE(phmkDataSet.POPULATED_POINTSDataTable dataTable, System.Nullable<int> SETTLEMENTTYPE_ID) {
            this.Adapter.SelectCommand = this.CommandCollection[4];
            if ((SETTLEMENTTYPE_ID.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((int)(SETTLEMENTTYPE_ID.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual phmkDataSet.POPULATED_POINTSDataTable GetDataBySETTLEMENT_TYPE(System.Nullable<int> SETTLEMENTTYPE_ID) {
            this.Adapter.SelectCommand = this.CommandCollection[4];
            if ((SETTLEMENTTYPE_ID.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((int)(SETTLEMENTTYPE_ID.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = System.DBNull.Value;
            }
            phmkDataSet.POPULATED_POINTSDataTable dataTable = new phmkDataSet.POPULATED_POINTSDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(phmkDataSet.POPULATED_POINTSDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(phmkDataSet dataSet) {
            return this.Adapter.Update(dataSet, "POPULATED_POINTS");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class QUESTION_TYPESTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public QUESTION_TYPESTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "QUESTION_TYPES";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("NAME", "NAME");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM QUESTION_TYPES\r\nWHERE     (ID = @Original_ID)";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[QUESTION_TYPES] ([ID], [NAME]) VALUES (@ID, @NAME);\r\nSELECT ID" +
                ", NAME FROM QUESTION_TYPES WHERE (ID = @ID)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NAME", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "NAME", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE    QUESTION_TYPES\r\nSET              ID = @ID, NAME = @NAME\r\nWHERE     (ID " +
                "= @Original_ID); \r\nSELECT ID, NAME FROM QUESTION_TYPES WHERE (ID = @ID)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NAME", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "NAME", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Workstation.Properties.Settings.Default.phmkConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ID, NAME FROM dbo.QUESTION_TYPES";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(phmkDataSet.QUESTION_TYPESDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual phmkDataSet.QUESTION_TYPESDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            phmkDataSet.QUESTION_TYPESDataTable dataTable = new phmkDataSet.QUESTION_TYPESDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(phmkDataSet.QUESTION_TYPESDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(phmkDataSet dataSet) {
            return this.Adapter.Update(dataSet, "QUESTION_TYPES");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ID) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ID));
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int ID, string NAME) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(ID));
            if ((NAME == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(NAME));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int ID, string NAME, int Original_ID) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(ID));
            if ((NAME == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(NAME));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_ID));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ANSWERSTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ANSWERSTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ANSWERS";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("QUESTIONID", "QUESTIONID");
            tableMapping.ColumnMappings.Add("ANSWER", "ANSWER");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM ANSWERS\r\nWHERE     (ID = @Original_ID) AND (QUESTIONID = @Original_QU" +
                "ESTIONID)";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_QUESTIONID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "QUESTIONID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[ANSWERS] ([ID], [QUESTIONID], [ANSWER]) VALUES (@ID, @QUESTION" +
                "ID, @ANSWER);\r\nSELECT ID, QUESTIONID, ANSWER FROM ANSWERS WHERE (ID = @ID) AND (" +
                "QUESTIONID = @QUESTIONID)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@QUESTIONID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "QUESTIONID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ANSWER", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ANSWER", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE    ANSWERS
SET              ID = @ID, QUESTIONID = @QUESTIONID, ANSWER = @ANSWER
WHERE     (ID = @Original_ID) AND (QUESTIONID = @Original_QUESTIONID);    
SELECT ID, QUESTIONID, ANSWER FROM ANSWERS WHERE (ID = @ID) AND (QUESTIONID = @QUESTIONID)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@QUESTIONID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "QUESTIONID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ANSWER", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "ANSWER", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_QUESTIONID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "QUESTIONID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Workstation.Properties.Settings.Default.phmkConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     ID, QUESTIONID, ANSWER\r\nFROM         ANSWERS\r\nWHERE     (QUESTIONID = " +
                "@QUESTIONID)";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@QUESTIONID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "QUESTIONID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(phmkDataSet.ANSWERSDataTable dataTable, int QUESTIONID) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(QUESTIONID));
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual phmkDataSet.ANSWERSDataTable GetData(int QUESTIONID) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(QUESTIONID));
            phmkDataSet.ANSWERSDataTable dataTable = new phmkDataSet.ANSWERSDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(phmkDataSet.ANSWERSDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(phmkDataSet dataSet) {
            return this.Adapter.Update(dataSet, "ANSWERS");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ID, int Original_QUESTIONID) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ID));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_QUESTIONID));
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int ID, System.Nullable<int> QUESTIONID, string ANSWER) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(ID));
            if ((QUESTIONID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((int)(QUESTIONID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((ANSWER == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(ANSWER));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int ID, int QUESTIONID, string ANSWER, int Original_ID, int Original_QUESTIONID) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(ID));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(QUESTIONID));
            if ((ANSWER == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(ANSWER));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Original_ID));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Original_QUESTIONID));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class QUESTIONSTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public QUESTIONSTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "QUESTIONS";
            tableMapping.ColumnMappings.Add("QUESTIONID", "QUESTIONID");
            tableMapping.ColumnMappings.Add("QUESTIONNAME", "QUESTIONNAME");
            tableMapping.ColumnMappings.Add("QUESTIONTYPE", "QUESTIONTYPE");
            tableMapping.ColumnMappings.Add("QUESTIONISNULL", "QUESTIONISNULL");
            tableMapping.ColumnMappings.Add("ISDEFAULT", "ISDEFAULT");
            tableMapping.ColumnMappings.Add("QUESTIONTYPENAME", "QUESTIONTYPENAME");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM QUESTIONS\r\nWHERE     (QUESTIONID = @Original_QUESTIONID)";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_QUESTIONID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "QUESTIONID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[QUESTIONS] ([QUESTIONID], [QUESTIONNAME], [QUESTIONTYPE], [QUESTIONISNULL], [ISDEFAULT]) VALUES (@QUESTIONID, @QUESTIONNAME, @QUESTIONTYPE, @QUESTIONISNULL, @ISDEFAULT);
SELECT QUESTIONID, QUESTIONNAME, QUESTIONTYPE, QUESTIONISNULL, ISDEFAULT FROM QUESTIONS WHERE (QUESTIONID = @QUESTIONID)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@QUESTIONID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "QUESTIONID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@QUESTIONNAME", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "QUESTIONNAME", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@QUESTIONTYPE", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "QUESTIONTYPE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@QUESTIONISNULL", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "QUESTIONISNULL", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ISDEFAULT", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "ISDEFAULT", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE    QUESTIONS
SET              QUESTIONID = @QUESTIONID, QUESTIONNAME = @QUESTIONNAME, QUESTIONTYPE = @QUESTIONTYPE, 
                      QUESTIONISNULL = @QUESTIONISNULL, ISDEFAULT = @ISDEFAULT
WHERE     (QUESTIONID = @Original_QUESTIONID); 
SELECT QUESTIONID, QUESTIONNAME, QUESTIONTYPE, QUESTIONISNULL, ISDEFAULT FROM QUESTIONS WHERE (QUESTIONID = @QUESTIONID)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@QUESTIONID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "QUESTIONID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@QUESTIONNAME", System.Data.SqlDbType.VarChar, 400, System.Data.ParameterDirection.Input, 0, 0, "QUESTIONNAME", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@QUESTIONTYPE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "QUESTIONTYPE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@QUESTIONISNULL", System.Data.SqlDbType.Bit, 1, System.Data.ParameterDirection.Input, 0, 0, "QUESTIONISNULL", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ISDEFAULT", System.Data.SqlDbType.Bit, 1, System.Data.ParameterDirection.Input, 0, 0, "ISDEFAULT", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_QUESTIONID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "QUESTIONID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Workstation.Properties.Settings.Default.phmkConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT     QUESTIONS.QUESTIONID, QUESTIONS.QUESTIONNAME, QUESTIONS.QUESTIONTYPE, QUESTIONS.QUESTIONISNULL, QUESTIONS.ISDEFAULT, 
                      QUESTION_TYPES.NAME AS QUESTIONTYPENAME
FROM         QUESTIONS INNER JOIN
                      QUESTION_TYPES ON QUESTIONS.QUESTIONTYPE = QUESTION_TYPES.ID";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(phmkDataSet.QUESTIONSDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual phmkDataSet.QUESTIONSDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            phmkDataSet.QUESTIONSDataTable dataTable = new phmkDataSet.QUESTIONSDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(phmkDataSet.QUESTIONSDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(phmkDataSet dataSet) {
            return this.Adapter.Update(dataSet, "QUESTIONS");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_QUESTIONID) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_QUESTIONID));
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int QUESTIONID, string QUESTIONNAME, int QUESTIONTYPE, bool QUESTIONISNULL, bool ISDEFAULT) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(QUESTIONID));
            if ((QUESTIONNAME == null)) {
                throw new System.ArgumentNullException("QUESTIONNAME");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(QUESTIONNAME));
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(QUESTIONTYPE));
            this.Adapter.InsertCommand.Parameters[3].Value = ((bool)(QUESTIONISNULL));
            this.Adapter.InsertCommand.Parameters[4].Value = ((bool)(ISDEFAULT));
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int QUESTIONID, string QUESTIONNAME, int QUESTIONTYPE, bool QUESTIONISNULL, bool ISDEFAULT, int Original_QUESTIONID) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(QUESTIONID));
            if ((QUESTIONNAME == null)) {
                throw new System.ArgumentNullException("QUESTIONNAME");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(QUESTIONNAME));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(QUESTIONTYPE));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((bool)(QUESTIONISNULL));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((bool)(ISDEFAULT));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(Original_QUESTIONID));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class PRIZESTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public PRIZESTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "PRIZES";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("NAME", "NAME");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM PRIZES\r\nWHERE     (ID = @Original_ID)";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[PRIZES] ([ID], [NAME]) VALUES (@ID, @NAME);\r\nSELECT ID, NAME F" +
                "ROM PRIZES WHERE (ID = @ID)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NAME", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "NAME", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE    PRIZES\r\nSET              ID = @ID, NAME = @NAME\r\nWHERE     (ID = @Origi" +
                "nal_ID); \r\nSELECT ID, NAME FROM PRIZES WHERE (ID = @ID)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NAME", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "NAME", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Workstation.Properties.Settings.Default.phmkConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ID, NAME FROM dbo.PRIZES";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(phmkDataSet.PRIZESDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual phmkDataSet.PRIZESDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            phmkDataSet.PRIZESDataTable dataTable = new phmkDataSet.PRIZESDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(phmkDataSet.PRIZESDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(phmkDataSet dataSet) {
            return this.Adapter.Update(dataSet, "PRIZES");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ID) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ID));
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int ID, string NAME) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(ID));
            if ((NAME == null)) {
                throw new System.ArgumentNullException("NAME");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(NAME));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int ID, string NAME, int Original_ID) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(ID));
            if ((NAME == null)) {
                throw new System.ArgumentNullException("NAME");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(NAME));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_ID));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class MEDIA_CLUSTERTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public MEDIA_CLUSTERTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "MEDIA_CLUSTER";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("NAME", "NAME");
            tableMapping.ColumnMappings.Add("DESCR", "DESCR");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM MEDIA_CLUSTER\r\nWHERE     (ID = @Original_ID)";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO MEDIA_CLUSTER\r\n                      (NAME, DESCR)\r\nVALUES     (@NAME" +
                ",@DESCR);\r\nSELECT @@IDENTITY AS ID FROM MEDIA_CLUSTER;";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NAME", System.Data.SqlDbType.VarChar, 30, System.Data.ParameterDirection.Input, 0, 0, "NAME", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DESCR", System.Data.SqlDbType.VarChar, 100, System.Data.ParameterDirection.Input, 0, 0, "DESCR", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE    MEDIA_CLUSTER\r\nSET              NAME = @NAME, DESCR = @DESCR\r\nWHERE    " +
                " (ID = @Original_ID);  \r\nSELECT ID, NAME, DESCR FROM MEDIA_CLUSTER WHERE (ID = @" +
                "ID)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NAME", System.Data.SqlDbType.VarChar, 30, System.Data.ParameterDirection.Input, 0, 0, "NAME", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DESCR", System.Data.SqlDbType.VarChar, 100, System.Data.ParameterDirection.Input, 0, 0, "DESCR", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Workstation.Properties.Settings.Default.phmkConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ID, NAME, DESCR FROM dbo.MEDIA_CLUSTER";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(phmkDataSet.MEDIA_CLUSTERDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual phmkDataSet.MEDIA_CLUSTERDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            phmkDataSet.MEDIA_CLUSTERDataTable dataTable = new phmkDataSet.MEDIA_CLUSTERDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(phmkDataSet.MEDIA_CLUSTERDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(phmkDataSet dataSet) {
            return this.Adapter.Update(dataSet, "MEDIA_CLUSTER");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(System.Nullable<int> Original_ID) {
            if ((Original_ID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string NAME, string DESCR) {
            if ((NAME == null)) {
                throw new System.ArgumentNullException("NAME");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(NAME));
            }
            if ((DESCR == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(DESCR));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string NAME, string DESCR, int Original_ID, int ID) {
            if ((NAME == null)) {
                throw new System.ArgumentNullException("NAME");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(NAME));
            }
            if ((DESCR == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(DESCR));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_ID));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(ID));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class MEDIATableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public MEDIATableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "MEDIA";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("NAME", "NAME");
            tableMapping.ColumnMappings.Add("MEDIA_CLUSTERID", "MEDIA_CLUSTERID");
            tableMapping.ColumnMappings.Add("MEDIA_CLUSTERNAME", "MEDIA_CLUSTERNAME");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM MEDIA\r\nWHERE     (ID = @Original_ID)";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO MEDIA\r\n                      (NAME, MEDIA_CLUSTERID)\r\nVALUES     (@NA" +
                "ME,@MEDIA_CLUSTERID);\r\nSELECT @@IDENTITY AS ID FROM MEDIA;";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NAME", System.Data.SqlDbType.VarChar, 100, System.Data.ParameterDirection.Input, 0, 0, "NAME", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MEDIA_CLUSTERID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "MEDIA_CLUSTERID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE    MEDIA\r\nSET              NAME = @NAME, MEDIA_CLUSTERID = @MEDIA_CLUSTERI" +
                "D\r\nWHERE     (ID = @Original_ID)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NAME", System.Data.SqlDbType.VarChar, 100, System.Data.ParameterDirection.Input, 0, 0, "NAME", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MEDIA_CLUSTERID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "MEDIA_CLUSTERID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Workstation.Properties.Settings.Default.phmkConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     MEDIA.ID, MEDIA.NAME, MEDIA.MEDIA_CLUSTERID, MEDIA_CLUSTER.NAME AS MED" +
                "IA_CLUSTERNAME\r\nFROM         MEDIA INNER JOIN\r\n                      MEDIA_CLUST" +
                "ER ON MEDIA.MEDIA_CLUSTERID = MEDIA_CLUSTER.ID";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(phmkDataSet.MEDIADataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual phmkDataSet.MEDIADataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            phmkDataSet.MEDIADataTable dataTable = new phmkDataSet.MEDIADataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(phmkDataSet.MEDIADataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(phmkDataSet dataSet) {
            return this.Adapter.Update(dataSet, "MEDIA");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ADDRESS_BLOCKINGTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ADDRESS_BLOCKINGTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ADDRESS_BLOCKING";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("NAME", "NAME");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM ADDRESS_BLOCKING\r\nWHERE     (ID = @Original_ID)";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[ADDRESS_BLOCKING] ([ID], [NAME]) VALUES (@ID, @NAME);\r\nSELECT " +
                "ID, NAME FROM ADDRESS_BLOCKING WHERE (ID = @ID)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NAME", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "NAME", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE    ADDRESS_BLOCKING\r\nSET              ID = @ID, NAME = @NAME\r\nWHERE     (I" +
                "D = @Original_ID); \r\nSELECT ID, NAME FROM ADDRESS_BLOCKING WHERE (ID = @ID)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NAME", System.Data.SqlDbType.VarChar, 250, System.Data.ParameterDirection.Input, 0, 0, "NAME", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Workstation.Properties.Settings.Default.phmkConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ID, NAME FROM dbo.ADDRESS_BLOCKING";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(phmkDataSet.ADDRESS_BLOCKINGDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual phmkDataSet.ADDRESS_BLOCKINGDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            phmkDataSet.ADDRESS_BLOCKINGDataTable dataTable = new phmkDataSet.ADDRESS_BLOCKINGDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(phmkDataSet.ADDRESS_BLOCKINGDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(phmkDataSet dataSet) {
            return this.Adapter.Update(dataSet, "ADDRESS_BLOCKING");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ID) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ID));
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int ID, string NAME) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(ID));
            if ((NAME == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(NAME));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int ID, string NAME, int Original_ID) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(ID));
            if ((NAME == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(NAME));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_ID));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class EMAIL_BLOCKINGTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public EMAIL_BLOCKINGTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "EMAIL_BLOCKING";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("NAME", "NAME");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[EMAIL_BLOCKING] WHERE (([ID] = @Original_ID) AND ([NAME] = @Or" +
                "iginal_NAME))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_NAME", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "NAME", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[EMAIL_BLOCKING] ([ID], [NAME]) VALUES (@ID, @NAME);\r\nSELECT ID" +
                ", NAME FROM EMAIL_BLOCKING WHERE (ID = @ID)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NAME", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "NAME", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[EMAIL_BLOCKING] SET [ID] = @ID, [NAME] = @NAME WHERE (([ID] = @Orig" +
                "inal_ID) AND ([NAME] = @Original_NAME));\r\nSELECT ID, NAME FROM EMAIL_BLOCKING WH" +
                "ERE (ID = @ID)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NAME", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "NAME", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_NAME", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "NAME", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Workstation.Properties.Settings.Default.phmkConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ID, NAME FROM dbo.EMAIL_BLOCKING";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(phmkDataSet.EMAIL_BLOCKINGDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual phmkDataSet.EMAIL_BLOCKINGDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            phmkDataSet.EMAIL_BLOCKINGDataTable dataTable = new phmkDataSet.EMAIL_BLOCKINGDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(phmkDataSet.EMAIL_BLOCKINGDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(phmkDataSet dataSet) {
            return this.Adapter.Update(dataSet, "EMAIL_BLOCKING");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ID, string Original_NAME) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ID));
            if ((Original_NAME == null)) {
                throw new System.ArgumentNullException("Original_NAME");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_NAME));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int ID, string NAME) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(ID));
            if ((NAME == null)) {
                throw new System.ArgumentNullException("NAME");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(NAME));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int ID, string NAME, int Original_ID, string Original_NAME) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(ID));
            if ((NAME == null)) {
                throw new System.ArgumentNullException("NAME");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(NAME));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_ID));
            if ((Original_NAME == null)) {
                throw new System.ArgumentNullException("Original_NAME");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_NAME));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class PHONE_BLOCKINGTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public PHONE_BLOCKINGTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "PHONE_BLOCKING";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("NAME", "NAME");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[PHONE_BLOCKING] WHERE (([ID] = @Original_ID) AND ([NAME] = @Or" +
                "iginal_NAME))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_NAME", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "NAME", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[PHONE_BLOCKING] ([ID], [NAME]) VALUES (@ID, @NAME);\r\nSELECT ID" +
                ", NAME FROM PHONE_BLOCKING WHERE (ID = @ID)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NAME", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "NAME", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[PHONE_BLOCKING] SET [ID] = @ID, [NAME] = @NAME WHERE (([ID] = @Orig" +
                "inal_ID) AND ([NAME] = @Original_NAME));\r\nSELECT ID, NAME FROM PHONE_BLOCKING WH" +
                "ERE (ID = @ID)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NAME", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "NAME", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_NAME", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "NAME", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Workstation.Properties.Settings.Default.phmkConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ID, NAME FROM dbo.PHONE_BLOCKING";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(phmkDataSet.PHONE_BLOCKINGDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual phmkDataSet.PHONE_BLOCKINGDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            phmkDataSet.PHONE_BLOCKINGDataTable dataTable = new phmkDataSet.PHONE_BLOCKINGDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(phmkDataSet.PHONE_BLOCKINGDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(phmkDataSet dataSet) {
            return this.Adapter.Update(dataSet, "PHONE_BLOCKING");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ID, string Original_NAME) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ID));
            if ((Original_NAME == null)) {
                throw new System.ArgumentNullException("Original_NAME");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_NAME));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int ID, string NAME) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(ID));
            if ((NAME == null)) {
                throw new System.ArgumentNullException("NAME");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(NAME));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int ID, string NAME, int Original_ID, string Original_NAME) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(ID));
            if ((NAME == null)) {
                throw new System.ArgumentNullException("NAME");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(NAME));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_ID));
            if ((Original_NAME == null)) {
                throw new System.ArgumentNullException("Original_NAME");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_NAME));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class MOBILE_PHONE_BLOCKINGTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public MOBILE_PHONE_BLOCKINGTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "MOBILE_PHONE_BLOCKING";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("NAME", "NAME");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[MOBILE_PHONE_BLOCKING] WHERE (([ID] = @Original_ID) AND ([NAME" +
                "] = @Original_NAME))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_NAME", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "NAME", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[MOBILE_PHONE_BLOCKING] ([ID], [NAME]) VALUES (@ID, @NAME);\r\nSE" +
                "LECT ID, NAME FROM MOBILE_PHONE_BLOCKING WHERE (ID = @ID)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NAME", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "NAME", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[MOBILE_PHONE_BLOCKING] SET [ID] = @ID, [NAME] = @NAME WHERE (([ID] " +
                "= @Original_ID) AND ([NAME] = @Original_NAME));\r\nSELECT ID, NAME FROM MOBILE_PHO" +
                "NE_BLOCKING WHERE (ID = @ID)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NAME", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "NAME", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_NAME", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "NAME", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Workstation.Properties.Settings.Default.phmkConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ID, NAME FROM dbo.MOBILE_PHONE_BLOCKING";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(phmkDataSet.MOBILE_PHONE_BLOCKINGDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual phmkDataSet.MOBILE_PHONE_BLOCKINGDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            phmkDataSet.MOBILE_PHONE_BLOCKINGDataTable dataTable = new phmkDataSet.MOBILE_PHONE_BLOCKINGDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(phmkDataSet.MOBILE_PHONE_BLOCKINGDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(phmkDataSet dataSet) {
            return this.Adapter.Update(dataSet, "MOBILE_PHONE_BLOCKING");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ID, string Original_NAME) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ID));
            if ((Original_NAME == null)) {
                throw new System.ArgumentNullException("Original_NAME");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_NAME));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int ID, string NAME) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(ID));
            if ((NAME == null)) {
                throw new System.ArgumentNullException("NAME");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(NAME));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int ID, string NAME, int Original_ID, string Original_NAME) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(ID));
            if ((NAME == null)) {
                throw new System.ArgumentNullException("NAME");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(NAME));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_ID));
            if ((Original_NAME == null)) {
                throw new System.ArgumentNullException("Original_NAME");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_NAME));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class USER_LISTTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public USER_LISTTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "USER_LIST";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("LOGIN", "LOGIN");
            tableMapping.ColumnMappings.Add("PASSWORD", "PASSWORD");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[USER_LIST] WHERE (([ID] = @Original_ID) AND ([LOGIN] = @Origin" +
                "al_LOGIN) AND ((@IsNull_PASSWORD = 1 AND [PASSWORD] IS NULL) OR ([PASSWORD] = @O" +
                "riginal_PASSWORD)))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_LOGIN", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "LOGIN", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_PASSWORD", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PASSWORD", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_PASSWORD", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PASSWORD", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[USER_LIST] ([ID], [LOGIN], [PASSWORD]) VALUES (@ID, @LOGIN, @P" +
                "ASSWORD);\r\nSELECT ID, LOGIN, PASSWORD FROM USER_LIST WHERE (ID = @ID)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LOGIN", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "LOGIN", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PASSWORD", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PASSWORD", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[USER_LIST] SET [ID] = @ID, [LOGIN] = @LOGIN, [PASSWORD] = @PASSWORD WHERE (([ID] = @Original_ID) AND ([LOGIN] = @Original_LOGIN) AND ((@IsNull_PASSWORD = 1 AND [PASSWORD] IS NULL) OR ([PASSWORD] = @Original_PASSWORD)));
SELECT ID, LOGIN, PASSWORD FROM USER_LIST WHERE (ID = @ID)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LOGIN", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "LOGIN", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PASSWORD", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PASSWORD", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_LOGIN", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "LOGIN", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_PASSWORD", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PASSWORD", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_PASSWORD", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PASSWORD", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Workstation.Properties.Settings.Default.phmkConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ID, LOGIN, PASSWORD FROM dbo.USER_LIST";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(phmkDataSet.USER_LISTDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual phmkDataSet.USER_LISTDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            phmkDataSet.USER_LISTDataTable dataTable = new phmkDataSet.USER_LISTDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(phmkDataSet.USER_LISTDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(phmkDataSet dataSet) {
            return this.Adapter.Update(dataSet, "USER_LIST");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ID, string Original_LOGIN, string Original_PASSWORD) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ID));
            if ((Original_LOGIN == null)) {
                throw new System.ArgumentNullException("Original_LOGIN");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_LOGIN));
            }
            if ((Original_PASSWORD == null)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_PASSWORD));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int ID, string LOGIN, string PASSWORD) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(ID));
            if ((LOGIN == null)) {
                throw new System.ArgumentNullException("LOGIN");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(LOGIN));
            }
            if ((PASSWORD == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(PASSWORD));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int ID, string LOGIN, string PASSWORD, int Original_ID, string Original_LOGIN, string Original_PASSWORD) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(ID));
            if ((LOGIN == null)) {
                throw new System.ArgumentNullException("LOGIN");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(LOGIN));
            }
            if ((PASSWORD == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(PASSWORD));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Original_ID));
            if ((Original_LOGIN == null)) {
                throw new System.ArgumentNullException("Original_LOGIN");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Original_LOGIN));
            }
            if ((Original_PASSWORD == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Original_PASSWORD));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class COMPAIGN_MEDIATableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public COMPAIGN_MEDIATableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "COMPAIGN_MEDIA";
            tableMapping.ColumnMappings.Add("MEDIAID", "MEDIAID");
            tableMapping.ColumnMappings.Add("COMPAIGNID", "COMPAIGNID");
            tableMapping.ColumnMappings.Add("NAME", "NAME");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM COMPAIGN_MEDIA\r\nWHERE     (MEDIAID = @Original_MEDIAID) AND (COMPAIGN" +
                "ID = @Original_COMPAIGNID)";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_MEDIAID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "MEDIAID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_COMPAIGNID", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, "COMPAIGNID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO COMPAIGN_MEDIA
                      (MEDIAID, COMPAIGNID)
VALUES     (@MEDIAID,@COMPAIGNID);
SELECT     COMPAIGN_MEDIA.MEDIAID, COMPAIGN_MEDIA.COMPAIGNID, MEDIA.NAME
FROM         COMPAIGN_MEDIA INNER JOIN
                      MEDIA ON COMPAIGN_MEDIA.MEDIAID = MEDIA.ID
WHERE     (COMPAIGN_MEDIA.COMPAIGNID = @COMPAIGNID) AND (COMPAIGN_MEDIA.MEDIAID=@MEDIAID)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MEDIAID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "MEDIAID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@COMPAIGNID", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, "COMPAIGNID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Workstation.Properties.Settings.Default.phmkConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     COMPAIGN_MEDIA.MEDIAID, COMPAIGN_MEDIA.COMPAIGNID, MEDIA.NAME\r\nFROM   " +
                "      COMPAIGN_MEDIA INNER JOIN\r\n                      MEDIA ON COMPAIGN_MEDIA.M" +
                "EDIAID = MEDIA.ID\r\nWHERE     (COMPAIGN_MEDIA.COMPAIGNID = @COMPAIGNID)";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@COMPAIGNID", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, "COMPAIGNID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(phmkDataSet.COMPAIGN_MEDIADataTable dataTable, System.Guid COMPAIGNID) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((System.Guid)(COMPAIGNID));
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual phmkDataSet.COMPAIGN_MEDIADataTable GetData(System.Guid COMPAIGNID) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((System.Guid)(COMPAIGNID));
            phmkDataSet.COMPAIGN_MEDIADataTable dataTable = new phmkDataSet.COMPAIGN_MEDIADataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(phmkDataSet.COMPAIGN_MEDIADataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(phmkDataSet dataSet) {
            return this.Adapter.Update(dataSet, "COMPAIGN_MEDIA");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class USER_COMPAIGNTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public USER_COMPAIGNTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "USER_COMPAIGN";
            tableMapping.ColumnMappings.Add("USERID", "USERID");
            tableMapping.ColumnMappings.Add("COMPAIGNID", "COMPAIGNID");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[USER_COMPAIGN] WHERE (([USERID] = @Original_USERID) AND ([COMP" +
                "AIGNID] = @Original_COMPAIGNID))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_USERID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "USERID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_COMPAIGNID", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "COMPAIGNID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[USER_COMPAIGN] ([USERID], [COMPAIGNID]) VALUES (@USERID, @COMP" +
                "AIGNID);\r\nSELECT USERID, COMPAIGNID FROM USER_COMPAIGN WHERE (COMPAIGNID = @COMP" +
                "AIGNID) AND (USERID = @USERID)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@USERID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "USERID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@COMPAIGNID", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "COMPAIGNID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[USER_COMPAIGN] SET [USERID] = @USERID, [COMPAIGNID] = @COMPAIGNID WHERE (([USERID] = @Original_USERID) AND ([COMPAIGNID] = @Original_COMPAIGNID));
SELECT USERID, COMPAIGNID FROM USER_COMPAIGN WHERE (COMPAIGNID = @COMPAIGNID) AND (USERID = @USERID)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@USERID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "USERID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@COMPAIGNID", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "COMPAIGNID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_USERID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "USERID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_COMPAIGNID", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "COMPAIGNID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Workstation.Properties.Settings.Default.phmkConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT USERID, COMPAIGNID FROM dbo.USER_COMPAIGN";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(phmkDataSet.USER_COMPAIGNDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual phmkDataSet.USER_COMPAIGNDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            phmkDataSet.USER_COMPAIGNDataTable dataTable = new phmkDataSet.USER_COMPAIGNDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(phmkDataSet.USER_COMPAIGNDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(phmkDataSet dataSet) {
            return this.Adapter.Update(dataSet, "USER_COMPAIGN");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_USERID, string Original_COMPAIGNID) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_USERID));
            if ((Original_COMPAIGNID == null)) {
                throw new System.ArgumentNullException("Original_COMPAIGNID");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_COMPAIGNID));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int USERID, string COMPAIGNID) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(USERID));
            if ((COMPAIGNID == null)) {
                throw new System.ArgumentNullException("COMPAIGNID");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(COMPAIGNID));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int USERID, string COMPAIGNID, int Original_USERID, string Original_COMPAIGNID) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(USERID));
            if ((COMPAIGNID == null)) {
                throw new System.ArgumentNullException("COMPAIGNID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(COMPAIGNID));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_USERID));
            if ((Original_COMPAIGNID == null)) {
                throw new System.ArgumentNullException("Original_COMPAIGNID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_COMPAIGNID));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class COMPAIGNTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public COMPAIGNTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "COMPAIGN";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("DESCRIPTION", "DESCRIPTION");
            tableMapping.ColumnMappings.Add("STARTDATE", "STARTDATE");
            tableMapping.ColumnMappings.Add("ENDDATE", "ENDDATE");
            tableMapping.ColumnMappings.Add("CAMPAIGNCODE", "CAMPAIGNCODE");
            tableMapping.ColumnMappings.Add("CAMPAIGNNAME", "CAMPAIGNNAME");
            tableMapping.ColumnMappings.Add("CAMPAIGNID", "CAMPAIGNID");
            tableMapping.ColumnMappings.Add("ACTIONID", "ACTIONID");
            tableMapping.ColumnMappings.Add("VARIANTID", "VARIANTID");
            tableMapping.ColumnMappings.Add("TARGETGROUPID", "TARGETGROUPID");
            tableMapping.ColumnMappings.Add("ACTIONNAME", "ACTIONNAME");
            tableMapping.ColumnMappings.Add("VARIANT", "VARIANT");
            tableMapping.ColumnMappings.Add("TARGETGROUP", "TARGETGROUP");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM COMPAIGN\r\nWHERE     (ID = @Original_ID)";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO COMPAIGN
                      (DESCRIPTION, STARTDATE, ENDDATE, CAMPAIGNCODE, CAMPAIGNNAME, CAMPAIGNID, ACTIONID, VARIANTID, TARGETGROUPID, ACTIONNAME, 
                      VARIANT, TARGETGROUP, ID)
VALUES     (@DESCRIPTION,@STARTDATE,@ENDDATE,@CAMPAIGNCODE,@CAMPAIGNNAME,@CAMPAIGNID,@ACTIONID,@VARIANTID,@TARGETGROUPID,@ACTIONNAME,@VARIANT,@TARGETGROUP,@ID)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DESCRIPTION", System.Data.SqlDbType.VarChar, 255, System.Data.ParameterDirection.Input, 0, 0, "DESCRIPTION", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@STARTDATE", System.Data.SqlDbType.DateTime, 8, System.Data.ParameterDirection.Input, 0, 0, "STARTDATE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ENDDATE", System.Data.SqlDbType.DateTime, 8, System.Data.ParameterDirection.Input, 0, 0, "ENDDATE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CAMPAIGNCODE", System.Data.SqlDbType.VarChar, 10, System.Data.ParameterDirection.Input, 0, 0, "CAMPAIGNCODE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CAMPAIGNNAME", System.Data.SqlDbType.VarChar, 100, System.Data.ParameterDirection.Input, 0, 0, "CAMPAIGNNAME", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CAMPAIGNID", System.Data.SqlDbType.VarChar, 3, System.Data.ParameterDirection.Input, 0, 0, "CAMPAIGNID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ACTIONID", System.Data.SqlDbType.VarChar, 3, System.Data.ParameterDirection.Input, 0, 0, "ACTIONID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@VARIANTID", System.Data.SqlDbType.VarChar, 3, System.Data.ParameterDirection.Input, 0, 0, "VARIANTID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@TARGETGROUPID", System.Data.SqlDbType.VarChar, 3, System.Data.ParameterDirection.Input, 0, 0, "TARGETGROUPID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ACTIONNAME", System.Data.SqlDbType.VarChar, 100, System.Data.ParameterDirection.Input, 0, 0, "ACTIONNAME", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@VARIANT", System.Data.SqlDbType.VarChar, 100, System.Data.ParameterDirection.Input, 0, 0, "VARIANT", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@TARGETGROUP", System.Data.SqlDbType.VarChar, 100, System.Data.ParameterDirection.Input, 0, 0, "TARGETGROUP", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE    COMPAIGN
SET              STARTDATE = @STARTDATE, ENDDATE = @ENDDATE, CAMPAIGNCODE = @CAMPAIGNCODE, CAMPAIGNNAME = @CAMPAIGNNAME, 
                      CAMPAIGNID = @CAMPAIGNID, ACTIONID = @ACTIONID, VARIANTID = @VARIANTID, TARGETGROUPID = @TARGETGROUPID, 
                      ACTIONNAME = @ACTIONNAME, VARIANT = @VARIANT, TARGETGROUP = @TARGETGROUP, DESCRIPTION = @DESCRIPTION
WHERE     (ID = @Original_ID)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@STARTDATE", System.Data.SqlDbType.DateTime, 8, System.Data.ParameterDirection.Input, 0, 0, "STARTDATE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ENDDATE", System.Data.SqlDbType.DateTime, 8, System.Data.ParameterDirection.Input, 0, 0, "ENDDATE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CAMPAIGNCODE", System.Data.SqlDbType.VarChar, 10, System.Data.ParameterDirection.Input, 0, 0, "CAMPAIGNCODE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CAMPAIGNNAME", System.Data.SqlDbType.VarChar, 100, System.Data.ParameterDirection.Input, 0, 0, "CAMPAIGNNAME", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CAMPAIGNID", System.Data.SqlDbType.VarChar, 3, System.Data.ParameterDirection.Input, 0, 0, "CAMPAIGNID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ACTIONID", System.Data.SqlDbType.VarChar, 3, System.Data.ParameterDirection.Input, 0, 0, "ACTIONID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@VARIANTID", System.Data.SqlDbType.VarChar, 3, System.Data.ParameterDirection.Input, 0, 0, "VARIANTID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@TARGETGROUPID", System.Data.SqlDbType.VarChar, 3, System.Data.ParameterDirection.Input, 0, 0, "TARGETGROUPID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ACTIONNAME", System.Data.SqlDbType.VarChar, 100, System.Data.ParameterDirection.Input, 0, 0, "ACTIONNAME", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@VARIANT", System.Data.SqlDbType.VarChar, 100, System.Data.ParameterDirection.Input, 0, 0, "VARIANT", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@TARGETGROUP", System.Data.SqlDbType.VarChar, 100, System.Data.ParameterDirection.Input, 0, 0, "TARGETGROUP", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DESCRIPTION", System.Data.SqlDbType.VarChar, 255, System.Data.ParameterDirection.Input, 0, 0, "DESCRIPTION", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Workstation.Properties.Settings.Default.phmkConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     DESCRIPTION, STARTDATE, ENDDATE, CAMPAIGNCODE, CAMPAIGNNAME, CAMPAIGNI" +
                "D, ACTIONID, VARIANTID, TARGETGROUPID, ACTIONNAME, \r\n                      VARIA" +
                "NT, TARGETGROUP, ID\r\nFROM         COMPAIGN";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(phmkDataSet.COMPAIGNDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual phmkDataSet.COMPAIGNDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            phmkDataSet.COMPAIGNDataTable dataTable = new phmkDataSet.COMPAIGNDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(phmkDataSet.COMPAIGNDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(phmkDataSet dataSet) {
            return this.Adapter.Update(dataSet, "COMPAIGN");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(System.Guid Original_ID) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((System.Guid)(Original_ID));
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string DESCRIPTION, System.DateTime STARTDATE, System.DateTime ENDDATE, string CAMPAIGNCODE, string CAMPAIGNNAME, string CAMPAIGNID, string ACTIONID, string VARIANTID, string TARGETGROUPID, string ACTIONNAME, string VARIANT, string TARGETGROUP, System.Guid ID) {
            if ((DESCRIPTION == null)) {
                this.Adapter.InsertCommand.Parameters[0].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(DESCRIPTION));
            }
            this.Adapter.InsertCommand.Parameters[1].Value = ((System.DateTime)(STARTDATE));
            this.Adapter.InsertCommand.Parameters[2].Value = ((System.DateTime)(ENDDATE));
            if ((CAMPAIGNCODE == null)) {
                throw new System.ArgumentNullException("CAMPAIGNCODE");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(CAMPAIGNCODE));
            }
            if ((CAMPAIGNNAME == null)) {
                throw new System.ArgumentNullException("CAMPAIGNNAME");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(CAMPAIGNNAME));
            }
            if ((CAMPAIGNID == null)) {
                throw new System.ArgumentNullException("CAMPAIGNID");
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(CAMPAIGNID));
            }
            if ((ACTIONID == null)) {
                throw new System.ArgumentNullException("ACTIONID");
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(ACTIONID));
            }
            if ((VARIANTID == null)) {
                throw new System.ArgumentNullException("VARIANTID");
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(VARIANTID));
            }
            if ((TARGETGROUPID == null)) {
                throw new System.ArgumentNullException("TARGETGROUPID");
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(TARGETGROUPID));
            }
            if ((ACTIONNAME == null)) {
                this.Adapter.InsertCommand.Parameters[9].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(ACTIONNAME));
            }
            if ((VARIANT == null)) {
                this.Adapter.InsertCommand.Parameters[10].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(VARIANT));
            }
            if ((TARGETGROUP == null)) {
                this.Adapter.InsertCommand.Parameters[11].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = ((string)(TARGETGROUP));
            }
            this.Adapter.InsertCommand.Parameters[12].Value = ((System.Guid)(ID));
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(System.DateTime STARTDATE, System.DateTime ENDDATE, string CAMPAIGNCODE, string CAMPAIGNNAME, string CAMPAIGNID, string ACTIONID, string VARIANTID, string TARGETGROUPID, string ACTIONNAME, string VARIANT, string TARGETGROUP, string DESCRIPTION, System.Guid Original_ID) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((System.DateTime)(STARTDATE));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((System.DateTime)(ENDDATE));
            if ((CAMPAIGNCODE == null)) {
                throw new System.ArgumentNullException("CAMPAIGNCODE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(CAMPAIGNCODE));
            }
            if ((CAMPAIGNNAME == null)) {
                throw new System.ArgumentNullException("CAMPAIGNNAME");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(CAMPAIGNNAME));
            }
            if ((CAMPAIGNID == null)) {
                throw new System.ArgumentNullException("CAMPAIGNID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(CAMPAIGNID));
            }
            if ((ACTIONID == null)) {
                throw new System.ArgumentNullException("ACTIONID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(ACTIONID));
            }
            if ((VARIANTID == null)) {
                throw new System.ArgumentNullException("VARIANTID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(VARIANTID));
            }
            if ((TARGETGROUPID == null)) {
                throw new System.ArgumentNullException("TARGETGROUPID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(TARGETGROUPID));
            }
            if ((ACTIONNAME == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(ACTIONNAME));
            }
            if ((VARIANT == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(VARIANT));
            }
            if ((TARGETGROUP == null)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(TARGETGROUP));
            }
            if ((DESCRIPTION == null)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(DESCRIPTION));
            }
            this.Adapter.UpdateCommand.Parameters[12].Value = ((System.Guid)(Original_ID));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class COMPAIGN_PRIZESTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public COMPAIGN_PRIZESTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "COMPAIGN_PRIZES";
            tableMapping.ColumnMappings.Add("COMPAIGNID", "COMPAIGNID");
            tableMapping.ColumnMappings.Add("PRIZESID", "PRIZESID");
            tableMapping.ColumnMappings.Add("NAME", "NAME");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM COMPAIGN_PRIZES\r\nWHERE     (COMPAIGNID = @Original_COMPAIGNID) AND (P" +
                "RIZESID = @Original_PRIZESID)";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_COMPAIGNID", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, "COMPAIGNID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_PRIZESID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "PRIZESID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO COMPAIGN_PRIZES
                      (COMPAIGNID, PRIZESID)
VALUES     (@COMPAIGNID,@PRIZESID);
SELECT     COMPAIGN_PRIZES.COMPAIGNID, COMPAIGN_PRIZES.PRIZESID, PRIZES.NAME
FROM         COMPAIGN_PRIZES INNER JOIN
                      PRIZES ON COMPAIGN_PRIZES.PRIZESID = PRIZES.ID
WHERE     (COMPAIGN_PRIZES.COMPAIGNID = @COMPAIGNID) AND (COMPAIGN_PRIZES.PRIZESID=@PRIZESID);";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@COMPAIGNID", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, "COMPAIGNID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PRIZESID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "PRIZESID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Workstation.Properties.Settings.Default.phmkConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     COMPAIGN_PRIZES.COMPAIGNID, COMPAIGN_PRIZES.PRIZESID, PRIZES.NAME\r\nFRO" +
                "M         COMPAIGN_PRIZES INNER JOIN\r\n                      PRIZES ON COMPAIGN_P" +
                "RIZES.PRIZESID = PRIZES.ID\r\nWHERE     (COMPAIGN_PRIZES.COMPAIGNID = @COMPAIGNID)" +
                "";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@COMPAIGNID", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, "COMPAIGNID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(phmkDataSet.COMPAIGN_PRIZESDataTable dataTable, System.Guid COMPAIGNID) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((System.Guid)(COMPAIGNID));
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual phmkDataSet.COMPAIGN_PRIZESDataTable GetData(System.Guid COMPAIGNID) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((System.Guid)(COMPAIGNID));
            phmkDataSet.COMPAIGN_PRIZESDataTable dataTable = new phmkDataSet.COMPAIGN_PRIZESDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(phmkDataSet.COMPAIGN_PRIZESDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(phmkDataSet dataSet) {
            return this.Adapter.Update(dataSet, "COMPAIGN_PRIZES");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class QUESTION_FOR_COMPAIGNTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public QUESTION_FOR_COMPAIGNTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "QUESTION_FOR_COMPAIGN";
            tableMapping.ColumnMappings.Add("GOMPAIGNID", "GOMPAIGNID");
            tableMapping.ColumnMappings.Add("QUESTIONID", "QUESTIONID");
            tableMapping.ColumnMappings.Add("QUESTIONNAME", "QUESTIONNAME");
            tableMapping.ColumnMappings.Add("QUESTIONTYPE", "QUESTIONTYPE");
            tableMapping.ColumnMappings.Add("ISDEFAULT", "ISDEFAULT");
            tableMapping.ColumnMappings.Add("QUESTIONTYPE_NAME", "QUESTIONTYPE_NAME");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM QUESTION_FOR_COMPAIGN\r\nWHERE     (QUESTIONID = @Original_QUESTIONID) " +
                "AND (GOMPAIGNID = @Original_GOMPAIGNID)";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_QUESTIONID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "QUESTIONID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_GOMPAIGNID", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, "GOMPAIGNID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO QUESTION_FOR_COMPAIGN
                      (QUESTIONID, GOMPAIGNID)
VALUES     (@QUESTIONID,@GOMPAIGNID);
SELECT     QUESTION_FOR_COMPAIGN.GOMPAIGNID, QUESTION_FOR_COMPAIGN.QUESTIONID, QUESTIONS.QUESTIONNAME, QUESTIONS.QUESTIONTYPE, 
                      QUESTIONS.ISDEFAULT, QUESTION_TYPES.NAME AS QUESTIONTYPE_NAME
FROM         QUESTION_FOR_COMPAIGN INNER JOIN
                      QUESTIONS ON QUESTION_FOR_COMPAIGN.QUESTIONID = QUESTIONS.QUESTIONID INNER JOIN
                      QUESTION_TYPES ON QUESTIONS.QUESTIONTYPE = QUESTION_TYPES.ID
WHERE     (QUESTION_FOR_COMPAIGN.GOMPAIGNID = @GOMPAIGNID) AND (QUESTION_FOR_COMPAIGN.QUESTIONID=@QUESTIONID);";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@QUESTIONID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "QUESTIONID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@GOMPAIGNID", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, "GOMPAIGNID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Workstation.Properties.Settings.Default.phmkConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT     QUESTION_FOR_COMPAIGN.GOMPAIGNID, QUESTION_FOR_COMPAIGN.QUESTIONID, QUESTIONS.QUESTIONNAME, QUESTIONS.QUESTIONTYPE, 
                      QUESTIONS.ISDEFAULT, QUESTION_TYPES.NAME AS QUESTIONTYPE_NAME
FROM         QUESTION_FOR_COMPAIGN INNER JOIN
                      QUESTIONS ON QUESTION_FOR_COMPAIGN.QUESTIONID = QUESTIONS.QUESTIONID INNER JOIN
                      QUESTION_TYPES ON QUESTIONS.QUESTIONTYPE = QUESTION_TYPES.ID
WHERE     (QUESTION_FOR_COMPAIGN.GOMPAIGNID = @GOMPAIGNID)
ORDER BY QUESTIONS.ISDEFAULT, QUESTIONS.QUESTIONTYPE";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@GOMPAIGNID", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, "GOMPAIGNID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(phmkDataSet.QUESTION_FOR_COMPAIGNDataTable dataTable, System.Guid GOMPAIGNID) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((System.Guid)(GOMPAIGNID));
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual phmkDataSet.QUESTION_FOR_COMPAIGNDataTable GetData(System.Guid GOMPAIGNID) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((System.Guid)(GOMPAIGNID));
            phmkDataSet.QUESTION_FOR_COMPAIGNDataTable dataTable = new phmkDataSet.QUESTION_FOR_COMPAIGNDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(phmkDataSet.QUESTION_FOR_COMPAIGNDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(phmkDataSet dataSet) {
            return this.Adapter.Update(dataSet, "QUESTION_FOR_COMPAIGN");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class COMPAIGN_POPULATED_POINTSTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public COMPAIGN_POPULATED_POINTSTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "COMPAIGN_POPULATED_POINTS";
            tableMapping.ColumnMappings.Add("COMPAIGNID", "COMPAIGNID");
            tableMapping.ColumnMappings.Add("POPULATED_POINTID", "POPULATED_POINTID");
            tableMapping.ColumnMappings.Add("POPULATED_POINT_NAME", "POPULATED_POINT_NAME");
            tableMapping.ColumnMappings.Add("REGION_NAME", "REGION_NAME");
            tableMapping.ColumnMappings.Add("REGIONID", "REGIONID");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM COMPAIGN_POPULATED_POINTS\r\nWHERE     (COMPAIGNID = @COMPAIGNID) AND (" +
                "POPULATED_POINTID = @POPULATED_POINTID)";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@COMPAIGNID", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, "COMPAIGNID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@POPULATED_POINTID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "POPULATED_POINTID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO COMPAIGN_POPULATED_POINTS
                      (COMPAIGNID, POPULATED_POINTID)
VALUES     (@COMPAIGNID,@POPULATED_POINTID);
SELECT     COMPAIGN_POPULATED_POINTS.COMPAIGNID, COMPAIGN_POPULATED_POINTS.POPULATED_POINTID, 
                      POPULATED_POINTS.NAME AS POPULATED_POINT_NAME, REGION.REGIONID, REGION.NAME AS REGION_NAME
FROM         COMPAIGN_POPULATED_POINTS INNER JOIN
                      POPULATED_POINTS ON COMPAIGN_POPULATED_POINTS.POPULATED_POINTID = POPULATED_POINTS.ID INNER JOIN
                      REGION ON POPULATED_POINTS.REGIONID = REGION.REGIONID
WHERE     (COMPAIGN_POPULATED_POINTS.COMPAIGNID = @COMPAIGNID) AND (COMPAIGN_POPULATED_POINTS.POPULATED_POINTID = @POPULATED_POINTID) ;";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@COMPAIGNID", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, "COMPAIGNID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@POPULATED_POINTID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "POPULATED_POINTID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE    COMPAIGN_POPULATED_POINTS\r\nSET              COMPAIGNID = @COMPAIGNID, P" +
                "OPULATED_POINTID = @POPULATED_POINTID";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@COMPAIGNID", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, "COMPAIGNID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@POPULATED_POINTID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "POPULATED_POINTID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Workstation.Properties.Settings.Default.phmkConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT     COMPAIGN_POPULATED_POINTS.COMPAIGNID, COMPAIGN_POPULATED_POINTS.POPULATED_POINTID, 
                      POPULATED_POINTS.NAME AS POPULATED_POINT_NAME, REGION.REGIONID, REGION.NAME AS REGION_NAME
FROM         COMPAIGN_POPULATED_POINTS INNER JOIN
                      POPULATED_POINTS ON COMPAIGN_POPULATED_POINTS.POPULATED_POINTID = POPULATED_POINTS.ID INNER JOIN
                      REGION ON POPULATED_POINTS.REGIONID = REGION.REGIONID
WHERE     (COMPAIGN_POPULATED_POINTS.COMPAIGNID = @COMPAIGNID)";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@COMPAIGNID", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, "COMPAIGNID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(phmkDataSet.COMPAIGN_POPULATED_POINTSDataTable dataTable, System.Guid COMPAIGNID) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((System.Guid)(COMPAIGNID));
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual phmkDataSet.COMPAIGN_POPULATED_POINTSDataTable GetData(System.Guid COMPAIGNID) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((System.Guid)(COMPAIGNID));
            phmkDataSet.COMPAIGN_POPULATED_POINTSDataTable dataTable = new phmkDataSet.COMPAIGN_POPULATED_POINTSDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(phmkDataSet.COMPAIGN_POPULATED_POINTSDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(phmkDataSet dataSet) {
            return this.Adapter.Update(dataSet, "COMPAIGN_POPULATED_POINTS");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class GLOBAL_BLOCKINGTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public GLOBAL_BLOCKINGTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "GLOBAL_BLOCKING";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("NAME", "NAME");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM GLOBAL_BLOCKING\r\nWHERE     (ID = @Original_ID)";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO GLOBAL_BLOCKING\r\n                      (ID, NAME)\r\nVALUES     (@ID,@N" +
                "AME); \r\nSELECT ID, NAME FROM GLOBAL_BLOCKING WHERE (ID = @ID)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NAME", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "NAME", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE    GLOBAL_BLOCKING\r\nSET              ID = @ID, NAME = @NAME\r\nWHERE     (ID" +
                " = @Original_ID); \r\nSELECT ID, NAME FROM GLOBAL_BLOCKING WHERE (ID = @ID)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NAME", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "NAME", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Workstation.Properties.Settings.Default.phmkConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ID, NAME FROM dbo.GLOBAL_BLOCKING";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(phmkDataSet.GLOBAL_BLOCKINGDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual phmkDataSet.GLOBAL_BLOCKINGDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            phmkDataSet.GLOBAL_BLOCKINGDataTable dataTable = new phmkDataSet.GLOBAL_BLOCKINGDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(phmkDataSet.GLOBAL_BLOCKINGDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(phmkDataSet dataSet) {
            return this.Adapter.Update(dataSet, "GLOBAL_BLOCKING");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ID) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ID));
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int ID, string NAME) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(ID));
            if ((NAME == null)) {
                throw new System.ArgumentNullException("NAME");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(NAME));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int ID, string NAME, int Original_ID) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(ID));
            if ((NAME == null)) {
                throw new System.ArgumentNullException("NAME");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(NAME));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_ID));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class OBLAST_DWTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public OBLAST_DWTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "OBLAST_DW";
            tableMapping.ColumnMappings.Add("OBLASTID", "OBLASTID");
            tableMapping.ColumnMappings.Add("NAME", "NAME");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [OBLAST] WHERE (([OBLASTID] = @Original_OBLASTID))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_OBLASTID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "OBLASTID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [OBLAST] ([NAME]) VALUES (@NAME);\r\nSELECT OBLASTID, NAME FROM OBLAST " +
                "WHERE (OBLASTID = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NAME", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "NAME", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [OBLAST] SET [NAME] = @NAME WHERE (([OBLASTID] = @Original_OBLASTID));\r\nSE" +
                "LECT OBLASTID, NAME FROM OBLAST WHERE (OBLASTID = @OBLASTID)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NAME", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "NAME", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_OBLASTID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "OBLASTID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@OBLASTID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "OBLASTID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Workstation.Properties.Settings.Default.phmkConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     OBLASTID, NAME\r\nFROM         OBLAST\r\nORDER BY NAME";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(phmkDataSet.OBLAST_DWDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual phmkDataSet.OBLAST_DWDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            phmkDataSet.OBLAST_DWDataTable dataTable = new phmkDataSet.OBLAST_DWDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(phmkDataSet.OBLAST_DWDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(phmkDataSet dataSet) {
            return this.Adapter.Update(dataSet, "OBLAST_DW");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class SETTLEMENT_TYPE_DWTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SETTLEMENT_TYPE_DWTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "SETTLEMENT_TYPE_DW";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("SETTLEMENTTYPEID", "SETTLEMENTTYPEID");
            tableMapping.ColumnMappings.Add("DESCR", "DESCR");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Workstation.Properties.Settings.Default.phmkConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     ID, SETTLEMENTTYPEID, DESCR\r\nFROM         SETTLEMENT_TYPE\r\nORDER BY DE" +
                "SCR";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(phmkDataSet.SETTLEMENT_TYPE_DWDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual phmkDataSet.SETTLEMENT_TYPE_DWDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            phmkDataSet.SETTLEMENT_TYPE_DWDataTable dataTable = new phmkDataSet.SETTLEMENT_TYPE_DWDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class CONSUMERTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CONSUMERTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "CONSUMER";
            tableMapping.ColumnMappings.Add("AZ_INDENT_ID", "AZ_INDENT_ID");
            tableMapping.ColumnMappings.Add("SOURCE", "SOURCE");
            tableMapping.ColumnMappings.Add("GLOBAL_BLOCKING", "GLOBAL_BLOCKING");
            tableMapping.ColumnMappings.Add("GENDER", "GENDER");
            tableMapping.ColumnMappings.Add("FIRST_NAME", "FIRST_NAME");
            tableMapping.ColumnMappings.Add("MIDDLE_NAME", "MIDDLE_NAME");
            tableMapping.ColumnMappings.Add("LAST_NAME", "LAST_NAME");
            tableMapping.ColumnMappings.Add("COUNTRY_CODE", "COUNTRY_CODE");
            tableMapping.ColumnMappings.Add("TYPE_OF_ID_CARD", "TYPE_OF_ID_CARD");
            tableMapping.ColumnMappings.Add("ID_CARD_NUMBER", "ID_CARD_NUMBER");
            tableMapping.ColumnMappings.Add("RNN", "RNN");
            tableMapping.ColumnMappings.Add("ADDITIONAL_INFORMATION", "ADDITIONAL_INFORMATION");
            tableMapping.ColumnMappings.Add("POSTAL_CODE", "POSTAL_CODE");
            tableMapping.ColumnMappings.Add("DATE_OF_BIRTH", "DATE_OF_BIRTH");
            tableMapping.ColumnMappings.Add("LANGUAGEID", "LANGUAGEID");
            tableMapping.ColumnMappings.Add("ADDRES_BLOCKING", "ADDRES_BLOCKING");
            tableMapping.ColumnMappings.Add("PROMOTIONALID", "PROMOTIONALID");
            tableMapping.ColumnMappings.Add("EMAIL", "EMAIL");
            tableMapping.ColumnMappings.Add("EMAIL_BLOCKING", "EMAIL_BLOCKING");
            tableMapping.ColumnMappings.Add("PHONE_NUMBER", "PHONE_NUMBER");
            tableMapping.ColumnMappings.Add("PHONE_BLOCKING", "PHONE_BLOCKING");
            tableMapping.ColumnMappings.Add("MOBILE_NUMBER", "MOBILE_NUMBER");
            tableMapping.ColumnMappings.Add("MOBILE_BLOCKING", "MOBILE_BLOCKING");
            tableMapping.ColumnMappings.Add("MEDIA_CODE", "MEDIA_CODE");
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("OBLAST_ID", "OBLAST_ID");
            tableMapping.ColumnMappings.Add("REGION_ID", "REGION_ID");
            tableMapping.ColumnMappings.Add("POP_POINT_ID", "POP_POINT_ID");
            tableMapping.ColumnMappings.Add("SETTLEMENT_TYPE_ID", "SETTLEMENT_TYPE_ID");
            tableMapping.ColumnMappings.Add("STREET_TYPE", "STREET_TYPE");
            tableMapping.ColumnMappings.Add("STREET", "STREET");
            tableMapping.ColumnMappings.Add("HOUSE_NUMBER", "HOUSE_NUMBER");
            tableMapping.ColumnMappings.Add("APARTMENT_NUMBER", "APARTMENT_NUMBER");
            tableMapping.ColumnMappings.Add("MICRODISTRICT", "MICRODISTRICT");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[CONSUMER] WHERE (([AZ_INDENT_ID] = @Original_AZ_INDENT_ID) AND" +
                " ([SOURCE] = @Original_SOURCE) AND ([GLOBAL_BLOCKING] = @Original_GLOBAL_BLOCKIN" +
                "G) AND ([GENDER] = @Original_GENDER) AND ([FIRST_NAME] = @Original_FIRST_NAME) A" +
                "ND ([MIDDLE_NAME] = @Original_MIDDLE_NAME) AND ([LAST_NAME] = @Original_LAST_NAM" +
                "E) AND ([COUNTRY_CODE] = @Original_COUNTRY_CODE) AND ([TYPE_OF_ID_CARD] = @Origi" +
                "nal_TYPE_OF_ID_CARD) AND ((@IsNull_ID_CARD_NUMBER = 1 AND [ID_CARD_NUMBER] IS NU" +
                "LL) OR ([ID_CARD_NUMBER] = @Original_ID_CARD_NUMBER)) AND ((@IsNull_RNN = 1 AND " +
                "[RNN] IS NULL) OR ([RNN] = @Original_RNN)) AND ((@IsNull_ADDITIONAL_INFORMATION " +
                "= 1 AND [ADDITIONAL_INFORMATION] IS NULL) OR ([ADDITIONAL_INFORMATION] = @Origin" +
                "al_ADDITIONAL_INFORMATION)) AND ((@IsNull_POSTAL_CODE = 1 AND [POSTAL_CODE] IS N" +
                "ULL) OR ([POSTAL_CODE] = @Original_POSTAL_CODE)) AND ([DATE_OF_BIRTH] = @Origina" +
                "l_DATE_OF_BIRTH) AND ([LANGUAGEID] = @Original_LANGUAGEID) AND ((@IsNull_ADDRES_" +
                "BLOCKING = 1 AND [ADDRES_BLOCKING] IS NULL) OR ([ADDRES_BLOCKING] = @Original_AD" +
                "DRES_BLOCKING)) AND ((@IsNull_PROMOTIONALID = 1 AND [PROMOTIONALID] IS NULL) OR " +
                "([PROMOTIONALID] = @Original_PROMOTIONALID)) AND ((@IsNull_EMAIL = 1 AND [EMAIL]" +
                " IS NULL) OR ([EMAIL] = @Original_EMAIL)) AND ((@IsNull_EMAIL_BLOCKING = 1 AND [" +
                "EMAIL_BLOCKING] IS NULL) OR ([EMAIL_BLOCKING] = @Original_EMAIL_BLOCKING)) AND (" +
                "(@IsNull_PHONE_NUMBER = 1 AND [PHONE_NUMBER] IS NULL) OR ([PHONE_NUMBER] = @Orig" +
                "inal_PHONE_NUMBER)) AND ((@IsNull_PHONE_BLOCKING = 1 AND [PHONE_BLOCKING] IS NUL" +
                "L) OR ([PHONE_BLOCKING] = @Original_PHONE_BLOCKING)) AND ((@IsNull_MOBILE_NUMBER" +
                " = 1 AND [MOBILE_NUMBER] IS NULL) OR ([MOBILE_NUMBER] = @Original_MOBILE_NUMBER)" +
                ") AND ((@IsNull_MOBILE_BLOCKING = 1 AND [MOBILE_BLOCKING] IS NULL) OR ([MOBILE_B" +
                "LOCKING] = @Original_MOBILE_BLOCKING)) AND ((@IsNull_MEDIA_CODE = 1 AND [MEDIA_C" +
                "ODE] IS NULL) OR ([MEDIA_CODE] = @Original_MEDIA_CODE)) AND ([ID] = @Original_ID" +
                ") AND ((@IsNull_OBLAST_ID = 1 AND [OBLAST_ID] IS NULL) OR ([OBLAST_ID] = @Origin" +
                "al_OBLAST_ID)) AND ((@IsNull_REGION_ID = 1 AND [REGION_ID] IS NULL) OR ([REGION_" +
                "ID] = @Original_REGION_ID)) AND ((@IsNull_POP_POINT_ID = 1 AND [POP_POINT_ID] IS" +
                " NULL) OR ([POP_POINT_ID] = @Original_POP_POINT_ID)) AND ((@IsNull_SETTLEMENT_TY" +
                "PE_ID = 1 AND [SETTLEMENT_TYPE_ID] IS NULL) OR ([SETTLEMENT_TYPE_ID] = @Original" +
                "_SETTLEMENT_TYPE_ID)) AND ((@IsNull_STREET_TYPE = 1 AND [STREET_TYPE] IS NULL) O" +
                "R ([STREET_TYPE] = @Original_STREET_TYPE)) AND ((@IsNull_STREET = 1 AND [STREET]" +
                " IS NULL) OR ([STREET] = @Original_STREET)) AND ((@IsNull_HOUSE_NUMBER = 1 AND [" +
                "HOUSE_NUMBER] IS NULL) OR ([HOUSE_NUMBER] = @Original_HOUSE_NUMBER)) AND ((@IsNu" +
                "ll_APARTMENT_NUMBER = 1 AND [APARTMENT_NUMBER] IS NULL) OR ([APARTMENT_NUMBER] =" +
                " @Original_APARTMENT_NUMBER)) AND ((@IsNull_MICRODISTRICT = 1 AND [MICRODISTRICT" +
                "] IS NULL) OR ([MICRODISTRICT] = @Original_MICRODISTRICT)))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_AZ_INDENT_ID", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "AZ_INDENT_ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_SOURCE", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SOURCE", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_GLOBAL_BLOCKING", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "GLOBAL_BLOCKING", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_GENDER", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "GENDER", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_FIRST_NAME", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FIRST_NAME", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_MIDDLE_NAME", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "MIDDLE_NAME", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_LAST_NAME", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "LAST_NAME", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_COUNTRY_CODE", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "COUNTRY_CODE", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_TYPE_OF_ID_CARD", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "TYPE_OF_ID_CARD", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_ID_CARD_NUMBER", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID_CARD_NUMBER", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID_CARD_NUMBER", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ID_CARD_NUMBER", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_RNN", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "RNN", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RNN", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "RNN", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_ADDITIONAL_INFORMATION", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ADDITIONAL_INFORMATION", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ADDITIONAL_INFORMATION", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ADDITIONAL_INFORMATION", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_POSTAL_CODE", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "POSTAL_CODE", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_POSTAL_CODE", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "POSTAL_CODE", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DATE_OF_BIRTH", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DATE_OF_BIRTH", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_LANGUAGEID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "LANGUAGEID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_ADDRES_BLOCKING", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ADDRES_BLOCKING", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ADDRES_BLOCKING", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ADDRES_BLOCKING", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_PROMOTIONALID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PROMOTIONALID", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_PROMOTIONALID", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PROMOTIONALID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_EMAIL", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "EMAIL", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_EMAIL", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "EMAIL", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_EMAIL_BLOCKING", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "EMAIL_BLOCKING", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_EMAIL_BLOCKING", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "EMAIL_BLOCKING", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_PHONE_NUMBER", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PHONE_NUMBER", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_PHONE_NUMBER", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PHONE_NUMBER", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_PHONE_BLOCKING", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PHONE_BLOCKING", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_PHONE_BLOCKING", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PHONE_BLOCKING", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_MOBILE_NUMBER", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MOBILE_NUMBER", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_MOBILE_NUMBER", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "MOBILE_NUMBER", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_MOBILE_BLOCKING", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MOBILE_BLOCKING", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_MOBILE_BLOCKING", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MOBILE_BLOCKING", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_MEDIA_CODE", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MEDIA_CODE", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_MEDIA_CODE", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MEDIA_CODE", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_OBLAST_ID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "OBLAST_ID", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_OBLAST_ID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "OBLAST_ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_REGION_ID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "REGION_ID", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_REGION_ID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "REGION_ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_POP_POINT_ID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "POP_POINT_ID", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_POP_POINT_ID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "POP_POINT_ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_SETTLEMENT_TYPE_ID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SETTLEMENT_TYPE_ID", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_SETTLEMENT_TYPE_ID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SETTLEMENT_TYPE_ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_STREET_TYPE", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "STREET_TYPE", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_STREET_TYPE", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "STREET_TYPE", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_STREET", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "STREET", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_STREET", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "STREET", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_HOUSE_NUMBER", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "HOUSE_NUMBER", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_HOUSE_NUMBER", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "HOUSE_NUMBER", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_APARTMENT_NUMBER", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "APARTMENT_NUMBER", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_APARTMENT_NUMBER", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "APARTMENT_NUMBER", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_MICRODISTRICT", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MICRODISTRICT", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_MICRODISTRICT", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "MICRODISTRICT", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[CONSUMER] ([AZ_INDENT_ID], [SOURCE], [GLOBAL_BLOCKING], [GENDE" +
                "R], [FIRST_NAME], [MIDDLE_NAME], [LAST_NAME], [COUNTRY_CODE], [TYPE_OF_ID_CARD]," +
                " [ID_CARD_NUMBER], [RNN], [ADDITIONAL_INFORMATION], [POSTAL_CODE], [DATE_OF_BIRT" +
                "H], [LANGUAGEID], [ADDRES_BLOCKING], [PROMOTIONALID], [EMAIL], [EMAIL_BLOCKING]," +
                " [PHONE_NUMBER], [PHONE_BLOCKING], [MOBILE_NUMBER], [MOBILE_BLOCKING], [MEDIA_CO" +
                "DE], [ID], [OBLAST_ID], [REGION_ID], [POP_POINT_ID], [SETTLEMENT_TYPE_ID], [STRE" +
                "ET_TYPE], [STREET], [HOUSE_NUMBER], [APARTMENT_NUMBER], [MICRODISTRICT]) VALUES " +
                "(@AZ_INDENT_ID, @SOURCE, @GLOBAL_BLOCKING, @GENDER, @FIRST_NAME, @MIDDLE_NAME, @" +
                "LAST_NAME, @COUNTRY_CODE, @TYPE_OF_ID_CARD, @ID_CARD_NUMBER, @RNN, @ADDITIONAL_I" +
                "NFORMATION, @POSTAL_CODE, @DATE_OF_BIRTH, @LANGUAGEID, @ADDRES_BLOCKING, @PROMOT" +
                "IONALID, @EMAIL, @EMAIL_BLOCKING, @PHONE_NUMBER, @PHONE_BLOCKING, @MOBILE_NUMBER" +
                ", @MOBILE_BLOCKING, @MEDIA_CODE, @ID, @OBLAST_ID, @REGION_ID, @POP_POINT_ID, @SE" +
                "TTLEMENT_TYPE_ID, @STREET_TYPE, @STREET, @HOUSE_NUMBER, @APARTMENT_NUMBER, @MICR" +
                "ODISTRICT);\r\nSELECT AZ_INDENT_ID, SOURCE, GLOBAL_BLOCKING, GENDER, FIRST_NAME, M" +
                "IDDLE_NAME, LAST_NAME, COUNTRY_CODE, TYPE_OF_ID_CARD, ID_CARD_NUMBER, RNN, ADDIT" +
                "IONAL_INFORMATION, POSTAL_CODE, DATE_OF_BIRTH, LANGUAGEID, ADDRES_BLOCKING, PROM" +
                "OTIONALID, EMAIL, EMAIL_BLOCKING, PHONE_NUMBER, PHONE_BLOCKING, MOBILE_NUMBER, M" +
                "OBILE_BLOCKING, MEDIA_CODE, ID, OBLAST_ID, REGION_ID, POP_POINT_ID, SETTLEMENT_T" +
                "YPE_ID, STREET_TYPE, STREET, HOUSE_NUMBER, APARTMENT_NUMBER, MICRODISTRICT FROM " +
                "CONSUMER WHERE (ID = @ID)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AZ_INDENT_ID", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "AZ_INDENT_ID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SOURCE", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SOURCE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@GLOBAL_BLOCKING", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "GLOBAL_BLOCKING", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@GENDER", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "GENDER", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FIRST_NAME", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FIRST_NAME", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MIDDLE_NAME", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "MIDDLE_NAME", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LAST_NAME", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "LAST_NAME", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@COUNTRY_CODE", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "COUNTRY_CODE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@TYPE_OF_ID_CARD", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "TYPE_OF_ID_CARD", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_CARD_NUMBER", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ID_CARD_NUMBER", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RNN", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "RNN", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ADDITIONAL_INFORMATION", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ADDITIONAL_INFORMATION", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@POSTAL_CODE", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "POSTAL_CODE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DATE_OF_BIRTH", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DATE_OF_BIRTH", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LANGUAGEID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "LANGUAGEID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ADDRES_BLOCKING", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ADDRES_BLOCKING", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PROMOTIONALID", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PROMOTIONALID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@EMAIL", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "EMAIL", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@EMAIL_BLOCKING", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "EMAIL_BLOCKING", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PHONE_NUMBER", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PHONE_NUMBER", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PHONE_BLOCKING", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PHONE_BLOCKING", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MOBILE_NUMBER", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "MOBILE_NUMBER", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MOBILE_BLOCKING", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MOBILE_BLOCKING", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MEDIA_CODE", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MEDIA_CODE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@OBLAST_ID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "OBLAST_ID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@REGION_ID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "REGION_ID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@POP_POINT_ID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "POP_POINT_ID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SETTLEMENT_TYPE_ID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SETTLEMENT_TYPE_ID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@STREET_TYPE", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "STREET_TYPE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@STREET", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "STREET", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@HOUSE_NUMBER", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "HOUSE_NUMBER", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@APARTMENT_NUMBER", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "APARTMENT_NUMBER", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MICRODISTRICT", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "MICRODISTRICT", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[CONSUMER] SET [AZ_INDENT_ID] = @AZ_INDENT_ID, [SOURCE] = @SOURCE, [" +
                "GLOBAL_BLOCKING] = @GLOBAL_BLOCKING, [GENDER] = @GENDER, [FIRST_NAME] = @FIRST_N" +
                "AME, [MIDDLE_NAME] = @MIDDLE_NAME, [LAST_NAME] = @LAST_NAME, [COUNTRY_CODE] = @C" +
                "OUNTRY_CODE, [TYPE_OF_ID_CARD] = @TYPE_OF_ID_CARD, [ID_CARD_NUMBER] = @ID_CARD_N" +
                "UMBER, [RNN] = @RNN, [ADDITIONAL_INFORMATION] = @ADDITIONAL_INFORMATION, [POSTAL" +
                "_CODE] = @POSTAL_CODE, [DATE_OF_BIRTH] = @DATE_OF_BIRTH, [LANGUAGEID] = @LANGUAG" +
                "EID, [ADDRES_BLOCKING] = @ADDRES_BLOCKING, [PROMOTIONALID] = @PROMOTIONALID, [EM" +
                "AIL] = @EMAIL, [EMAIL_BLOCKING] = @EMAIL_BLOCKING, [PHONE_NUMBER] = @PHONE_NUMBE" +
                "R, [PHONE_BLOCKING] = @PHONE_BLOCKING, [MOBILE_NUMBER] = @MOBILE_NUMBER, [MOBILE" +
                "_BLOCKING] = @MOBILE_BLOCKING, [MEDIA_CODE] = @MEDIA_CODE, [ID] = @ID, [OBLAST_I" +
                "D] = @OBLAST_ID, [REGION_ID] = @REGION_ID, [POP_POINT_ID] = @POP_POINT_ID, [SETT" +
                "LEMENT_TYPE_ID] = @SETTLEMENT_TYPE_ID, [STREET_TYPE] = @STREET_TYPE, [STREET] = " +
                "@STREET, [HOUSE_NUMBER] = @HOUSE_NUMBER, [APARTMENT_NUMBER] = @APARTMENT_NUMBER," +
                " [MICRODISTRICT] = @MICRODISTRICT WHERE (([AZ_INDENT_ID] = @Original_AZ_INDENT_I" +
                "D) AND ([SOURCE] = @Original_SOURCE) AND ([GLOBAL_BLOCKING] = @Original_GLOBAL_B" +
                "LOCKING) AND ([GENDER] = @Original_GENDER) AND ([FIRST_NAME] = @Original_FIRST_N" +
                "AME) AND ([MIDDLE_NAME] = @Original_MIDDLE_NAME) AND ([LAST_NAME] = @Original_LA" +
                "ST_NAME) AND ([COUNTRY_CODE] = @Original_COUNTRY_CODE) AND ([TYPE_OF_ID_CARD] = " +
                "@Original_TYPE_OF_ID_CARD) AND ((@IsNull_ID_CARD_NUMBER = 1 AND [ID_CARD_NUMBER]" +
                " IS NULL) OR ([ID_CARD_NUMBER] = @Original_ID_CARD_NUMBER)) AND ((@IsNull_RNN = " +
                "1 AND [RNN] IS NULL) OR ([RNN] = @Original_RNN)) AND ((@IsNull_ADDITIONAL_INFORM" +
                "ATION = 1 AND [ADDITIONAL_INFORMATION] IS NULL) OR ([ADDITIONAL_INFORMATION] = @" +
                "Original_ADDITIONAL_INFORMATION)) AND ((@IsNull_POSTAL_CODE = 1 AND [POSTAL_CODE" +
                "] IS NULL) OR ([POSTAL_CODE] = @Original_POSTAL_CODE)) AND ([DATE_OF_BIRTH] = @O" +
                "riginal_DATE_OF_BIRTH) AND ([LANGUAGEID] = @Original_LANGUAGEID) AND ((@IsNull_A" +
                "DDRES_BLOCKING = 1 AND [ADDRES_BLOCKING] IS NULL) OR ([ADDRES_BLOCKING] = @Origi" +
                "nal_ADDRES_BLOCKING)) AND ((@IsNull_PROMOTIONALID = 1 AND [PROMOTIONALID] IS NUL" +
                "L) OR ([PROMOTIONALID] = @Original_PROMOTIONALID)) AND ((@IsNull_EMAIL = 1 AND [" +
                "EMAIL] IS NULL) OR ([EMAIL] = @Original_EMAIL)) AND ((@IsNull_EMAIL_BLOCKING = 1" +
                " AND [EMAIL_BLOCKING] IS NULL) OR ([EMAIL_BLOCKING] = @Original_EMAIL_BLOCKING))" +
                " AND ((@IsNull_PHONE_NUMBER = 1 AND [PHONE_NUMBER] IS NULL) OR ([PHONE_NUMBER] =" +
                " @Original_PHONE_NUMBER)) AND ((@IsNull_PHONE_BLOCKING = 1 AND [PHONE_BLOCKING] " +
                "IS NULL) OR ([PHONE_BLOCKING] = @Original_PHONE_BLOCKING)) AND ((@IsNull_MOBILE_" +
                "NUMBER = 1 AND [MOBILE_NUMBER] IS NULL) OR ([MOBILE_NUMBER] = @Original_MOBILE_N" +
                "UMBER)) AND ((@IsNull_MOBILE_BLOCKING = 1 AND [MOBILE_BLOCKING] IS NULL) OR ([MO" +
                "BILE_BLOCKING] = @Original_MOBILE_BLOCKING)) AND ((@IsNull_MEDIA_CODE = 1 AND [M" +
                "EDIA_CODE] IS NULL) OR ([MEDIA_CODE] = @Original_MEDIA_CODE)) AND ([ID] = @Origi" +
                "nal_ID) AND ((@IsNull_OBLAST_ID = 1 AND [OBLAST_ID] IS NULL) OR ([OBLAST_ID] = @" +
                "Original_OBLAST_ID)) AND ((@IsNull_REGION_ID = 1 AND [REGION_ID] IS NULL) OR ([R" +
                "EGION_ID] = @Original_REGION_ID)) AND ((@IsNull_POP_POINT_ID = 1 AND [POP_POINT_" +
                "ID] IS NULL) OR ([POP_POINT_ID] = @Original_POP_POINT_ID)) AND ((@IsNull_SETTLEM" +
                "ENT_TYPE_ID = 1 AND [SETTLEMENT_TYPE_ID] IS NULL) OR ([SETTLEMENT_TYPE_ID] = @Or" +
                "iginal_SETTLEMENT_TYPE_ID)) AND ((@IsNull_STREET_TYPE = 1 AND [STREET_TYPE] IS N" +
                "ULL) OR ([STREET_TYPE] = @Original_STREET_TYPE)) AND ((@IsNull_STREET = 1 AND [S" +
                "TREET] IS NULL) OR ([STREET] = @Original_STREET)) AND ((@IsNull_HOUSE_NUMBER = 1" +
                " AND [HOUSE_NUMBER] IS NULL) OR ([HOUSE_NUMBER] = @Original_HOUSE_NUMBER)) AND (" +
                "(@IsNull_APARTMENT_NUMBER = 1 AND [APARTMENT_NUMBER] IS NULL) OR ([APARTMENT_NUM" +
                "BER] = @Original_APARTMENT_NUMBER)) AND ((@IsNull_MICRODISTRICT = 1 AND [MICRODI" +
                "STRICT] IS NULL) OR ([MICRODISTRICT] = @Original_MICRODISTRICT)));\r\nSELECT AZ_IN" +
                "DENT_ID, SOURCE, GLOBAL_BLOCKING, GENDER, FIRST_NAME, MIDDLE_NAME, LAST_NAME, CO" +
                "UNTRY_CODE, TYPE_OF_ID_CARD, ID_CARD_NUMBER, RNN, ADDITIONAL_INFORMATION, POSTAL" +
                "_CODE, DATE_OF_BIRTH, LANGUAGEID, ADDRES_BLOCKING, PROMOTIONALID, EMAIL, EMAIL_B" +
                "LOCKING, PHONE_NUMBER, PHONE_BLOCKING, MOBILE_NUMBER, MOBILE_BLOCKING, MEDIA_COD" +
                "E, ID, OBLAST_ID, REGION_ID, POP_POINT_ID, SETTLEMENT_TYPE_ID, STREET_TYPE, STRE" +
                "ET, HOUSE_NUMBER, APARTMENT_NUMBER, MICRODISTRICT FROM CONSUMER WHERE (ID = @ID)" +
                "";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AZ_INDENT_ID", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "AZ_INDENT_ID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SOURCE", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SOURCE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@GLOBAL_BLOCKING", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "GLOBAL_BLOCKING", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@GENDER", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "GENDER", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FIRST_NAME", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FIRST_NAME", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MIDDLE_NAME", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "MIDDLE_NAME", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LAST_NAME", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "LAST_NAME", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@COUNTRY_CODE", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "COUNTRY_CODE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@TYPE_OF_ID_CARD", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "TYPE_OF_ID_CARD", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_CARD_NUMBER", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ID_CARD_NUMBER", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RNN", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "RNN", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ADDITIONAL_INFORMATION", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ADDITIONAL_INFORMATION", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@POSTAL_CODE", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "POSTAL_CODE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DATE_OF_BIRTH", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DATE_OF_BIRTH", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LANGUAGEID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "LANGUAGEID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ADDRES_BLOCKING", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ADDRES_BLOCKING", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PROMOTIONALID", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PROMOTIONALID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@EMAIL", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "EMAIL", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@EMAIL_BLOCKING", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "EMAIL_BLOCKING", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PHONE_NUMBER", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PHONE_NUMBER", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PHONE_BLOCKING", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PHONE_BLOCKING", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MOBILE_NUMBER", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "MOBILE_NUMBER", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MOBILE_BLOCKING", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MOBILE_BLOCKING", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MEDIA_CODE", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MEDIA_CODE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@OBLAST_ID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "OBLAST_ID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@REGION_ID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "REGION_ID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@POP_POINT_ID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "POP_POINT_ID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SETTLEMENT_TYPE_ID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SETTLEMENT_TYPE_ID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@STREET_TYPE", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "STREET_TYPE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@STREET", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "STREET", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@HOUSE_NUMBER", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "HOUSE_NUMBER", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@APARTMENT_NUMBER", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "APARTMENT_NUMBER", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MICRODISTRICT", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "MICRODISTRICT", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_AZ_INDENT_ID", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "AZ_INDENT_ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_SOURCE", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SOURCE", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_GLOBAL_BLOCKING", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "GLOBAL_BLOCKING", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_GENDER", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "GENDER", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_FIRST_NAME", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FIRST_NAME", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_MIDDLE_NAME", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "MIDDLE_NAME", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_LAST_NAME", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "LAST_NAME", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_COUNTRY_CODE", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "COUNTRY_CODE", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_TYPE_OF_ID_CARD", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "TYPE_OF_ID_CARD", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_ID_CARD_NUMBER", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID_CARD_NUMBER", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID_CARD_NUMBER", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ID_CARD_NUMBER", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_RNN", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "RNN", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RNN", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "RNN", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_ADDITIONAL_INFORMATION", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ADDITIONAL_INFORMATION", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ADDITIONAL_INFORMATION", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ADDITIONAL_INFORMATION", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_POSTAL_CODE", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "POSTAL_CODE", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_POSTAL_CODE", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "POSTAL_CODE", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DATE_OF_BIRTH", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DATE_OF_BIRTH", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_LANGUAGEID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "LANGUAGEID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_ADDRES_BLOCKING", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ADDRES_BLOCKING", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ADDRES_BLOCKING", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ADDRES_BLOCKING", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_PROMOTIONALID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PROMOTIONALID", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_PROMOTIONALID", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PROMOTIONALID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_EMAIL", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "EMAIL", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_EMAIL", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "EMAIL", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_EMAIL_BLOCKING", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "EMAIL_BLOCKING", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_EMAIL_BLOCKING", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "EMAIL_BLOCKING", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_PHONE_NUMBER", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PHONE_NUMBER", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_PHONE_NUMBER", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PHONE_NUMBER", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_PHONE_BLOCKING", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PHONE_BLOCKING", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_PHONE_BLOCKING", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PHONE_BLOCKING", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_MOBILE_NUMBER", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MOBILE_NUMBER", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_MOBILE_NUMBER", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "MOBILE_NUMBER", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_MOBILE_BLOCKING", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MOBILE_BLOCKING", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_MOBILE_BLOCKING", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MOBILE_BLOCKING", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_MEDIA_CODE", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MEDIA_CODE", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_MEDIA_CODE", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MEDIA_CODE", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_OBLAST_ID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "OBLAST_ID", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_OBLAST_ID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "OBLAST_ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_REGION_ID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "REGION_ID", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_REGION_ID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "REGION_ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_POP_POINT_ID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "POP_POINT_ID", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_POP_POINT_ID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "POP_POINT_ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_SETTLEMENT_TYPE_ID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SETTLEMENT_TYPE_ID", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_SETTLEMENT_TYPE_ID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SETTLEMENT_TYPE_ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_STREET_TYPE", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "STREET_TYPE", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_STREET_TYPE", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "STREET_TYPE", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_STREET", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "STREET", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_STREET", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "STREET", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_HOUSE_NUMBER", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "HOUSE_NUMBER", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_HOUSE_NUMBER", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "HOUSE_NUMBER", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_APARTMENT_NUMBER", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "APARTMENT_NUMBER", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_APARTMENT_NUMBER", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "APARTMENT_NUMBER", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_MICRODISTRICT", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MICRODISTRICT", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_MICRODISTRICT", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "MICRODISTRICT", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Workstation.Properties.Settings.Default.phmkConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[4];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT AZ_INDENT_ID, SOURCE, GLOBAL_BLOCKING, GENDER, FIRST_NAME, MIDDLE_NAME, LAST_NAME, COUNTRY_CODE, TYPE_OF_ID_CARD, ID_CARD_NUMBER, RNN, ADDITIONAL_INFORMATION, POSTAL_CODE, DATE_OF_BIRTH, LANGUAGEID, ADDRES_BLOCKING, PROMOTIONALID, EMAIL, EMAIL_BLOCKING, PHONE_NUMBER, PHONE_BLOCKING, MOBILE_NUMBER, MOBILE_BLOCKING, MEDIA_CODE, ID, OBLAST_ID, REGION_ID, POP_POINT_ID, SETTLEMENT_TYPE_ID, STREET_TYPE, STREET, HOUSE_NUMBER, APARTMENT_NUMBER, MICRODISTRICT FROM dbo.CONSUMER";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = @"SELECT     AZ_INDENT_ID, SOURCE, GLOBAL_BLOCKING, GENDER, FIRST_NAME, MIDDLE_NAME, LAST_NAME, COUNTRY_CODE, TYPE_OF_ID_CARD, 
                      ID_CARD_NUMBER, RNN, ADDITIONAL_INFORMATION, POSTAL_CODE, DATE_OF_BIRTH, LANGUAGEID, ADDRES_BLOCKING, PROMOTIONALID, 
                      EMAIL, EMAIL_BLOCKING, PHONE_NUMBER, PHONE_BLOCKING, MOBILE_NUMBER, MOBILE_BLOCKING, MEDIA_CODE, ID, OBLAST_ID, 
                      REGION_ID, POP_POINT_ID, SETTLEMENT_TYPE_ID, STREET_TYPE, STREET, HOUSE_NUMBER, APARTMENT_NUMBER, MICRODISTRICT
FROM         CONSUMER
WHERE     (ID_CARD_NUMBER = @ID_CARD_NUMBER)";
            this._commandCollection[1].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_CARD_NUMBER", System.Data.SqlDbType.VarChar, 20, System.Data.ParameterDirection.Input, 0, 0, "ID_CARD_NUMBER", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = @"SELECT     AZ_INDENT_ID, SOURCE, GLOBAL_BLOCKING, GENDER, FIRST_NAME, MIDDLE_NAME, LAST_NAME, COUNTRY_CODE, TYPE_OF_ID_CARD, 
                      ID_CARD_NUMBER, RNN, ADDITIONAL_INFORMATION, POSTAL_CODE, DATE_OF_BIRTH, LANGUAGEID, ADDRES_BLOCKING, PROMOTIONALID, 
                      EMAIL, EMAIL_BLOCKING, PHONE_NUMBER, PHONE_BLOCKING, MOBILE_NUMBER, MOBILE_BLOCKING, MEDIA_CODE, ID, OBLAST_ID, 
                      REGION_ID, POP_POINT_ID, SETTLEMENT_TYPE_ID, STREET_TYPE, STREET, HOUSE_NUMBER, APARTMENT_NUMBER, MICRODISTRICT
FROM         CONSUMER
WHERE     (FIRST_NAME = @FIRST_NAME) AND (MIDDLE_NAME = @MIDDLE_NAME) AND (LAST_NAME = @LAST_NAME) OR
                      (FIRST_NAME LIKE @FIRST_NAME + '%') AND (MIDDLE_NAME LIKE @MIDDLE_NAME + '%') AND (LAST_NAME LIKE @LAST_NAME + '%')";
            this._commandCollection[2].CommandType = System.Data.CommandType.Text;
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@FIRST_NAME", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "FIRST_NAME", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@MIDDLE_NAME", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "MIDDLE_NAME", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@LAST_NAME", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "LAST_NAME", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[3].Connection = this.Connection;
            this._commandCollection[3].CommandText = @"SELECT     AZ_INDENT_ID, SOURCE, GLOBAL_BLOCKING, GENDER, FIRST_NAME, MIDDLE_NAME, LAST_NAME, COUNTRY_CODE, TYPE_OF_ID_CARD, 
                      ID_CARD_NUMBER, RNN, ADDITIONAL_INFORMATION, POSTAL_CODE, DATE_OF_BIRTH, LANGUAGEID, ADDRES_BLOCKING, PROMOTIONALID, 
                      EMAIL, EMAIL_BLOCKING, PHONE_NUMBER, PHONE_BLOCKING, MOBILE_NUMBER, MOBILE_BLOCKING, MEDIA_CODE, ID, OBLAST_ID, 
                      REGION_ID, POP_POINT_ID, SETTLEMENT_TYPE_ID, STREET_TYPE, STREET, HOUSE_NUMBER, APARTMENT_NUMBER, MICRODISTRICT
FROM         CONSUMER
WHERE     (RNN = @RNN)";
            this._commandCollection[3].CommandType = System.Data.CommandType.Text;
            this._commandCollection[3].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RNN", System.Data.SqlDbType.VarChar, 12, System.Data.ParameterDirection.Input, 0, 0, "RNN", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(phmkDataSet.CONSUMERDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual phmkDataSet.CONSUMERDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            phmkDataSet.CONSUMERDataTable dataTable = new phmkDataSet.CONSUMERDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByCARD_NUMBER(phmkDataSet.CONSUMERDataTable dataTable, string ID_CARD_NUMBER) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((ID_CARD_NUMBER == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(ID_CARD_NUMBER));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual phmkDataSet.CONSUMERDataTable GetDataByCARD_NUMBER(string ID_CARD_NUMBER) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((ID_CARD_NUMBER == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(ID_CARD_NUMBER));
            }
            phmkDataSet.CONSUMERDataTable dataTable = new phmkDataSet.CONSUMERDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByFMLNAME(phmkDataSet.CONSUMERDataTable dataTable, string FIRST_NAME, string MIDDLE_NAME, string LAST_NAME) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((FIRST_NAME == null)) {
                throw new System.ArgumentNullException("FIRST_NAME");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(FIRST_NAME));
            }
            if ((MIDDLE_NAME == null)) {
                throw new System.ArgumentNullException("MIDDLE_NAME");
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(MIDDLE_NAME));
            }
            if ((LAST_NAME == null)) {
                this.Adapter.SelectCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(LAST_NAME));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual phmkDataSet.CONSUMERDataTable GetDataByFMLNAME(string FIRST_NAME, string MIDDLE_NAME, string LAST_NAME) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((FIRST_NAME == null)) {
                throw new System.ArgumentNullException("FIRST_NAME");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(FIRST_NAME));
            }
            if ((MIDDLE_NAME == null)) {
                throw new System.ArgumentNullException("MIDDLE_NAME");
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(MIDDLE_NAME));
            }
            if ((LAST_NAME == null)) {
                this.Adapter.SelectCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(LAST_NAME));
            }
            phmkDataSet.CONSUMERDataTable dataTable = new phmkDataSet.CONSUMERDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByRNN(phmkDataSet.CONSUMERDataTable dataTable, string RNN) {
            this.Adapter.SelectCommand = this.CommandCollection[3];
            if ((RNN == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(RNN));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual phmkDataSet.CONSUMERDataTable GetDataByRNN(string RNN) {
            this.Adapter.SelectCommand = this.CommandCollection[3];
            if ((RNN == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(RNN));
            }
            phmkDataSet.CONSUMERDataTable dataTable = new phmkDataSet.CONSUMERDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(phmkDataSet.CONSUMERDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(phmkDataSet dataSet) {
            return this.Adapter.Update(dataSet, "CONSUMER");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(
                    string Original_AZ_INDENT_ID, 
                    int Original_SOURCE, 
                    int Original_GLOBAL_BLOCKING, 
                    string Original_GENDER, 
                    string Original_FIRST_NAME, 
                    string Original_MIDDLE_NAME, 
                    string Original_LAST_NAME, 
                    string Original_COUNTRY_CODE, 
                    System.Nullable<int> Original_TYPE_OF_ID_CARD, 
                    string Original_ID_CARD_NUMBER, 
                    string Original_RNN, 
                    string Original_ADDITIONAL_INFORMATION, 
                    string Original_POSTAL_CODE, 
                    System.DateTime Original_DATE_OF_BIRTH, 
                    int Original_LANGUAGEID, 
                    System.Nullable<int> Original_ADDRES_BLOCKING, 
                    string Original_PROMOTIONALID, 
                    string Original_EMAIL, 
                    System.Nullable<int> Original_EMAIL_BLOCKING, 
                    string Original_PHONE_NUMBER, 
                    System.Nullable<int> Original_PHONE_BLOCKING, 
                    string Original_MOBILE_NUMBER, 
                    System.Nullable<int> Original_MOBILE_BLOCKING, 
                    System.Nullable<int> Original_MEDIA_CODE, 
                    System.Guid Original_ID, 
                    System.Nullable<int> Original_OBLAST_ID, 
                    System.Nullable<int> Original_REGION_ID, 
                    System.Nullable<int> Original_POP_POINT_ID, 
                    System.Nullable<int> Original_SETTLEMENT_TYPE_ID, 
                    System.Nullable<int> Original_STREET_TYPE, 
                    System.Nullable<int> Original_STREET, 
                    string Original_HOUSE_NUMBER, 
                    string Original_APARTMENT_NUMBER, 
                    string Original_MICRODISTRICT) {
            if ((Original_AZ_INDENT_ID == null)) {
                throw new System.ArgumentNullException("Original_AZ_INDENT_ID");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_AZ_INDENT_ID));
            }
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_SOURCE));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_GLOBAL_BLOCKING));
            if ((Original_GENDER == null)) {
                throw new System.ArgumentNullException("Original_GENDER");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_GENDER));
            }
            if ((Original_FIRST_NAME == null)) {
                throw new System.ArgumentNullException("Original_FIRST_NAME");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_FIRST_NAME));
            }
            if ((Original_MIDDLE_NAME == null)) {
                throw new System.ArgumentNullException("Original_MIDDLE_NAME");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_MIDDLE_NAME));
            }
            if ((Original_LAST_NAME == null)) {
                this.Adapter.DeleteCommand.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_LAST_NAME));
            }
            if ((Original_COUNTRY_CODE == null)) {
                throw new System.ArgumentNullException("Original_COUNTRY_CODE");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((string)(Original_COUNTRY_CODE));
            }
            if ((Original_TYPE_OF_ID_CARD.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((int)(Original_TYPE_OF_ID_CARD.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[8].Value = System.DBNull.Value;
            }
            if ((Original_ID_CARD_NUMBER == null)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((string)(Original_ID_CARD_NUMBER));
            }
            if ((Original_RNN == null)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((string)(Original_RNN));
            }
            if ((Original_ADDITIONAL_INFORMATION == null)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((string)(Original_ADDITIONAL_INFORMATION));
            }
            if ((Original_POSTAL_CODE == null)) {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[16].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[16].Value = ((string)(Original_POSTAL_CODE));
            }
            this.Adapter.DeleteCommand.Parameters[17].Value = ((System.DateTime)(Original_DATE_OF_BIRTH));
            this.Adapter.DeleteCommand.Parameters[18].Value = ((int)(Original_LANGUAGEID));
            if ((Original_ADDRES_BLOCKING.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[20].Value = ((int)(Original_ADDRES_BLOCKING.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[20].Value = System.DBNull.Value;
            }
            if ((Original_PROMOTIONALID == null)) {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[22].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[22].Value = ((string)(Original_PROMOTIONALID));
            }
            if ((Original_EMAIL == null)) {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[24].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[24].Value = ((string)(Original_EMAIL));
            }
            if ((Original_EMAIL_BLOCKING.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[25].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[26].Value = ((int)(Original_EMAIL_BLOCKING.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[25].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[26].Value = System.DBNull.Value;
            }
            if ((Original_PHONE_NUMBER == null)) {
                this.Adapter.DeleteCommand.Parameters[27].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[28].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[27].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[28].Value = ((string)(Original_PHONE_NUMBER));
            }
            if ((Original_PHONE_BLOCKING.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[29].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[30].Value = ((int)(Original_PHONE_BLOCKING.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[29].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[30].Value = System.DBNull.Value;
            }
            if ((Original_MOBILE_NUMBER == null)) {
                this.Adapter.DeleteCommand.Parameters[31].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[32].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[31].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[32].Value = ((string)(Original_MOBILE_NUMBER));
            }
            if ((Original_MOBILE_BLOCKING.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[33].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[34].Value = ((int)(Original_MOBILE_BLOCKING.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[33].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[34].Value = System.DBNull.Value;
            }
            if ((Original_MEDIA_CODE.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[35].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[36].Value = ((int)(Original_MEDIA_CODE.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[35].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[36].Value = System.DBNull.Value;
            }
            this.Adapter.DeleteCommand.Parameters[37].Value = ((System.Guid)(Original_ID));
            if ((Original_OBLAST_ID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[38].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[39].Value = ((int)(Original_OBLAST_ID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[38].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[39].Value = System.DBNull.Value;
            }
            if ((Original_REGION_ID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[40].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[41].Value = ((int)(Original_REGION_ID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[40].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[41].Value = System.DBNull.Value;
            }
            if ((Original_POP_POINT_ID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[42].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[43].Value = ((int)(Original_POP_POINT_ID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[42].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[43].Value = System.DBNull.Value;
            }
            if ((Original_SETTLEMENT_TYPE_ID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[44].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[45].Value = ((int)(Original_SETTLEMENT_TYPE_ID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[44].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[45].Value = System.DBNull.Value;
            }
            if ((Original_STREET_TYPE.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[46].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[47].Value = ((int)(Original_STREET_TYPE.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[46].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[47].Value = System.DBNull.Value;
            }
            if ((Original_STREET.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[48].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[49].Value = ((int)(Original_STREET.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[48].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[49].Value = System.DBNull.Value;
            }
            if ((Original_HOUSE_NUMBER == null)) {
                this.Adapter.DeleteCommand.Parameters[50].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[51].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[50].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[51].Value = ((string)(Original_HOUSE_NUMBER));
            }
            if ((Original_APARTMENT_NUMBER == null)) {
                this.Adapter.DeleteCommand.Parameters[52].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[53].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[52].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[53].Value = ((string)(Original_APARTMENT_NUMBER));
            }
            if ((Original_MICRODISTRICT == null)) {
                this.Adapter.DeleteCommand.Parameters[54].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[55].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[54].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[55].Value = ((string)(Original_MICRODISTRICT));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    string AZ_INDENT_ID, 
                    int SOURCE, 
                    int GLOBAL_BLOCKING, 
                    string GENDER, 
                    string FIRST_NAME, 
                    string MIDDLE_NAME, 
                    string LAST_NAME, 
                    string COUNTRY_CODE, 
                    System.Nullable<int> TYPE_OF_ID_CARD, 
                    string ID_CARD_NUMBER, 
                    string RNN, 
                    string ADDITIONAL_INFORMATION, 
                    string POSTAL_CODE, 
                    System.DateTime DATE_OF_BIRTH, 
                    int LANGUAGEID, 
                    System.Nullable<int> ADDRES_BLOCKING, 
                    string PROMOTIONALID, 
                    string EMAIL, 
                    System.Nullable<int> EMAIL_BLOCKING, 
                    string PHONE_NUMBER, 
                    System.Nullable<int> PHONE_BLOCKING, 
                    string MOBILE_NUMBER, 
                    System.Nullable<int> MOBILE_BLOCKING, 
                    System.Nullable<int> MEDIA_CODE, 
                    System.Guid ID, 
                    System.Nullable<int> OBLAST_ID, 
                    System.Nullable<int> REGION_ID, 
                    System.Nullable<int> POP_POINT_ID, 
                    System.Nullable<int> SETTLEMENT_TYPE_ID, 
                    System.Nullable<int> STREET_TYPE, 
                    System.Nullable<int> STREET, 
                    string HOUSE_NUMBER, 
                    string APARTMENT_NUMBER, 
                    string MICRODISTRICT) {
            if ((AZ_INDENT_ID == null)) {
                throw new System.ArgumentNullException("AZ_INDENT_ID");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(AZ_INDENT_ID));
            }
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(SOURCE));
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(GLOBAL_BLOCKING));
            if ((GENDER == null)) {
                throw new System.ArgumentNullException("GENDER");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(GENDER));
            }
            if ((FIRST_NAME == null)) {
                throw new System.ArgumentNullException("FIRST_NAME");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(FIRST_NAME));
            }
            if ((MIDDLE_NAME == null)) {
                throw new System.ArgumentNullException("MIDDLE_NAME");
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(MIDDLE_NAME));
            }
            if ((LAST_NAME == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(LAST_NAME));
            }
            if ((COUNTRY_CODE == null)) {
                throw new System.ArgumentNullException("COUNTRY_CODE");
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(COUNTRY_CODE));
            }
            if ((TYPE_OF_ID_CARD.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((int)(TYPE_OF_ID_CARD.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = System.DBNull.Value;
            }
            if ((ID_CARD_NUMBER == null)) {
                this.Adapter.InsertCommand.Parameters[9].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(ID_CARD_NUMBER));
            }
            if ((RNN == null)) {
                this.Adapter.InsertCommand.Parameters[10].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(RNN));
            }
            if ((ADDITIONAL_INFORMATION == null)) {
                this.Adapter.InsertCommand.Parameters[11].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = ((string)(ADDITIONAL_INFORMATION));
            }
            if ((POSTAL_CODE == null)) {
                this.Adapter.InsertCommand.Parameters[12].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = ((string)(POSTAL_CODE));
            }
            this.Adapter.InsertCommand.Parameters[13].Value = ((System.DateTime)(DATE_OF_BIRTH));
            this.Adapter.InsertCommand.Parameters[14].Value = ((int)(LANGUAGEID));
            if ((ADDRES_BLOCKING.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[15].Value = ((int)(ADDRES_BLOCKING.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = System.DBNull.Value;
            }
            if ((PROMOTIONALID == null)) {
                this.Adapter.InsertCommand.Parameters[16].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = ((string)(PROMOTIONALID));
            }
            if ((EMAIL == null)) {
                this.Adapter.InsertCommand.Parameters[17].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[17].Value = ((string)(EMAIL));
            }
            if ((EMAIL_BLOCKING.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[18].Value = ((int)(EMAIL_BLOCKING.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[18].Value = System.DBNull.Value;
            }
            if ((PHONE_NUMBER == null)) {
                this.Adapter.InsertCommand.Parameters[19].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[19].Value = ((string)(PHONE_NUMBER));
            }
            if ((PHONE_BLOCKING.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[20].Value = ((int)(PHONE_BLOCKING.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[20].Value = System.DBNull.Value;
            }
            if ((MOBILE_NUMBER == null)) {
                this.Adapter.InsertCommand.Parameters[21].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[21].Value = ((string)(MOBILE_NUMBER));
            }
            if ((MOBILE_BLOCKING.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[22].Value = ((int)(MOBILE_BLOCKING.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[22].Value = System.DBNull.Value;
            }
            if ((MEDIA_CODE.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[23].Value = ((int)(MEDIA_CODE.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[23].Value = System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[24].Value = ((System.Guid)(ID));
            if ((OBLAST_ID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[25].Value = ((int)(OBLAST_ID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[25].Value = System.DBNull.Value;
            }
            if ((REGION_ID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[26].Value = ((int)(REGION_ID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[26].Value = System.DBNull.Value;
            }
            if ((POP_POINT_ID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[27].Value = ((int)(POP_POINT_ID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[27].Value = System.DBNull.Value;
            }
            if ((SETTLEMENT_TYPE_ID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[28].Value = ((int)(SETTLEMENT_TYPE_ID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[28].Value = System.DBNull.Value;
            }
            if ((STREET_TYPE.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[29].Value = ((int)(STREET_TYPE.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[29].Value = System.DBNull.Value;
            }
            if ((STREET.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[30].Value = ((int)(STREET.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[30].Value = System.DBNull.Value;
            }
            if ((HOUSE_NUMBER == null)) {
                this.Adapter.InsertCommand.Parameters[31].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[31].Value = ((string)(HOUSE_NUMBER));
            }
            if ((APARTMENT_NUMBER == null)) {
                this.Adapter.InsertCommand.Parameters[32].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[32].Value = ((string)(APARTMENT_NUMBER));
            }
            if ((MICRODISTRICT == null)) {
                this.Adapter.InsertCommand.Parameters[33].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[33].Value = ((string)(MICRODISTRICT));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string AZ_INDENT_ID, 
                    int SOURCE, 
                    int GLOBAL_BLOCKING, 
                    string GENDER, 
                    string FIRST_NAME, 
                    string MIDDLE_NAME, 
                    string LAST_NAME, 
                    string COUNTRY_CODE, 
                    System.Nullable<int> TYPE_OF_ID_CARD, 
                    string ID_CARD_NUMBER, 
                    string RNN, 
                    string ADDITIONAL_INFORMATION, 
                    string POSTAL_CODE, 
                    System.DateTime DATE_OF_BIRTH, 
                    int LANGUAGEID, 
                    System.Nullable<int> ADDRES_BLOCKING, 
                    string PROMOTIONALID, 
                    string EMAIL, 
                    System.Nullable<int> EMAIL_BLOCKING, 
                    string PHONE_NUMBER, 
                    System.Nullable<int> PHONE_BLOCKING, 
                    string MOBILE_NUMBER, 
                    System.Nullable<int> MOBILE_BLOCKING, 
                    System.Nullable<int> MEDIA_CODE, 
                    System.Guid ID, 
                    System.Nullable<int> OBLAST_ID, 
                    System.Nullable<int> REGION_ID, 
                    System.Nullable<int> POP_POINT_ID, 
                    System.Nullable<int> SETTLEMENT_TYPE_ID, 
                    System.Nullable<int> STREET_TYPE, 
                    System.Nullable<int> STREET, 
                    string HOUSE_NUMBER, 
                    string APARTMENT_NUMBER, 
                    string MICRODISTRICT, 
                    string Original_AZ_INDENT_ID, 
                    int Original_SOURCE, 
                    int Original_GLOBAL_BLOCKING, 
                    string Original_GENDER, 
                    string Original_FIRST_NAME, 
                    string Original_MIDDLE_NAME, 
                    string Original_LAST_NAME, 
                    string Original_COUNTRY_CODE, 
                    System.Nullable<int> Original_TYPE_OF_ID_CARD, 
                    string Original_ID_CARD_NUMBER, 
                    string Original_RNN, 
                    string Original_ADDITIONAL_INFORMATION, 
                    string Original_POSTAL_CODE, 
                    System.DateTime Original_DATE_OF_BIRTH, 
                    int Original_LANGUAGEID, 
                    System.Nullable<int> Original_ADDRES_BLOCKING, 
                    string Original_PROMOTIONALID, 
                    string Original_EMAIL, 
                    System.Nullable<int> Original_EMAIL_BLOCKING, 
                    string Original_PHONE_NUMBER, 
                    System.Nullable<int> Original_PHONE_BLOCKING, 
                    string Original_MOBILE_NUMBER, 
                    System.Nullable<int> Original_MOBILE_BLOCKING, 
                    System.Nullable<int> Original_MEDIA_CODE, 
                    System.Guid Original_ID, 
                    System.Nullable<int> Original_OBLAST_ID, 
                    System.Nullable<int> Original_REGION_ID, 
                    System.Nullable<int> Original_POP_POINT_ID, 
                    System.Nullable<int> Original_SETTLEMENT_TYPE_ID, 
                    System.Nullable<int> Original_STREET_TYPE, 
                    System.Nullable<int> Original_STREET, 
                    string Original_HOUSE_NUMBER, 
                    string Original_APARTMENT_NUMBER, 
                    string Original_MICRODISTRICT) {
            if ((AZ_INDENT_ID == null)) {
                throw new System.ArgumentNullException("AZ_INDENT_ID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(AZ_INDENT_ID));
            }
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(SOURCE));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(GLOBAL_BLOCKING));
            if ((GENDER == null)) {
                throw new System.ArgumentNullException("GENDER");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(GENDER));
            }
            if ((FIRST_NAME == null)) {
                throw new System.ArgumentNullException("FIRST_NAME");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(FIRST_NAME));
            }
            if ((MIDDLE_NAME == null)) {
                throw new System.ArgumentNullException("MIDDLE_NAME");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(MIDDLE_NAME));
            }
            if ((LAST_NAME == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(LAST_NAME));
            }
            if ((COUNTRY_CODE == null)) {
                throw new System.ArgumentNullException("COUNTRY_CODE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(COUNTRY_CODE));
            }
            if ((TYPE_OF_ID_CARD.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(TYPE_OF_ID_CARD.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = System.DBNull.Value;
            }
            if ((ID_CARD_NUMBER == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(ID_CARD_NUMBER));
            }
            if ((RNN == null)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(RNN));
            }
            if ((ADDITIONAL_INFORMATION == null)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(ADDITIONAL_INFORMATION));
            }
            if ((POSTAL_CODE == null)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(POSTAL_CODE));
            }
            this.Adapter.UpdateCommand.Parameters[13].Value = ((System.DateTime)(DATE_OF_BIRTH));
            this.Adapter.UpdateCommand.Parameters[14].Value = ((int)(LANGUAGEID));
            if ((ADDRES_BLOCKING.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((int)(ADDRES_BLOCKING.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = System.DBNull.Value;
            }
            if ((PROMOTIONALID == null)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(PROMOTIONALID));
            }
            if ((EMAIL == null)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((string)(EMAIL));
            }
            if ((EMAIL_BLOCKING.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((int)(EMAIL_BLOCKING.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = System.DBNull.Value;
            }
            if ((PHONE_NUMBER == null)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((string)(PHONE_NUMBER));
            }
            if ((PHONE_BLOCKING.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((int)(PHONE_BLOCKING.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = System.DBNull.Value;
            }
            if ((MOBILE_NUMBER == null)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((string)(MOBILE_NUMBER));
            }
            if ((MOBILE_BLOCKING.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((int)(MOBILE_BLOCKING.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = System.DBNull.Value;
            }
            if ((MEDIA_CODE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((int)(MEDIA_CODE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[24].Value = ((System.Guid)(ID));
            if ((OBLAST_ID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((int)(OBLAST_ID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = System.DBNull.Value;
            }
            if ((REGION_ID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((int)(REGION_ID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[26].Value = System.DBNull.Value;
            }
            if ((POP_POINT_ID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((int)(POP_POINT_ID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[27].Value = System.DBNull.Value;
            }
            if ((SETTLEMENT_TYPE_ID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[28].Value = ((int)(SETTLEMENT_TYPE_ID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[28].Value = System.DBNull.Value;
            }
            if ((STREET_TYPE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((int)(STREET_TYPE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[29].Value = System.DBNull.Value;
            }
            if ((STREET.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[30].Value = ((int)(STREET.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[30].Value = System.DBNull.Value;
            }
            if ((HOUSE_NUMBER == null)) {
                this.Adapter.UpdateCommand.Parameters[31].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((string)(HOUSE_NUMBER));
            }
            if ((APARTMENT_NUMBER == null)) {
                this.Adapter.UpdateCommand.Parameters[32].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[32].Value = ((string)(APARTMENT_NUMBER));
            }
            if ((MICRODISTRICT == null)) {
                this.Adapter.UpdateCommand.Parameters[33].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((string)(MICRODISTRICT));
            }
            if ((Original_AZ_INDENT_ID == null)) {
                throw new System.ArgumentNullException("Original_AZ_INDENT_ID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[34].Value = ((string)(Original_AZ_INDENT_ID));
            }
            this.Adapter.UpdateCommand.Parameters[35].Value = ((int)(Original_SOURCE));
            this.Adapter.UpdateCommand.Parameters[36].Value = ((int)(Original_GLOBAL_BLOCKING));
            if ((Original_GENDER == null)) {
                throw new System.ArgumentNullException("Original_GENDER");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[37].Value = ((string)(Original_GENDER));
            }
            if ((Original_FIRST_NAME == null)) {
                throw new System.ArgumentNullException("Original_FIRST_NAME");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[38].Value = ((string)(Original_FIRST_NAME));
            }
            if ((Original_MIDDLE_NAME == null)) {
                throw new System.ArgumentNullException("Original_MIDDLE_NAME");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[39].Value = ((string)(Original_MIDDLE_NAME));
            }
            if ((Original_LAST_NAME == null)) {
                this.Adapter.UpdateCommand.Parameters[40].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[40].Value = ((string)(Original_LAST_NAME));
            }
            if ((Original_COUNTRY_CODE == null)) {
                throw new System.ArgumentNullException("Original_COUNTRY_CODE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[41].Value = ((string)(Original_COUNTRY_CODE));
            }
            if ((Original_TYPE_OF_ID_CARD.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[42].Value = ((int)(Original_TYPE_OF_ID_CARD.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[42].Value = System.DBNull.Value;
            }
            if ((Original_ID_CARD_NUMBER == null)) {
                this.Adapter.UpdateCommand.Parameters[43].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[44].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[43].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[44].Value = ((string)(Original_ID_CARD_NUMBER));
            }
            if ((Original_RNN == null)) {
                this.Adapter.UpdateCommand.Parameters[45].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[46].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[45].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[46].Value = ((string)(Original_RNN));
            }
            if ((Original_ADDITIONAL_INFORMATION == null)) {
                this.Adapter.UpdateCommand.Parameters[47].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[48].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[47].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[48].Value = ((string)(Original_ADDITIONAL_INFORMATION));
            }
            if ((Original_POSTAL_CODE == null)) {
                this.Adapter.UpdateCommand.Parameters[49].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[50].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[49].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[50].Value = ((string)(Original_POSTAL_CODE));
            }
            this.Adapter.UpdateCommand.Parameters[51].Value = ((System.DateTime)(Original_DATE_OF_BIRTH));
            this.Adapter.UpdateCommand.Parameters[52].Value = ((int)(Original_LANGUAGEID));
            if ((Original_ADDRES_BLOCKING.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[53].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[54].Value = ((int)(Original_ADDRES_BLOCKING.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[53].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[54].Value = System.DBNull.Value;
            }
            if ((Original_PROMOTIONALID == null)) {
                this.Adapter.UpdateCommand.Parameters[55].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[56].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[55].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[56].Value = ((string)(Original_PROMOTIONALID));
            }
            if ((Original_EMAIL == null)) {
                this.Adapter.UpdateCommand.Parameters[57].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[58].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[57].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[58].Value = ((string)(Original_EMAIL));
            }
            if ((Original_EMAIL_BLOCKING.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[59].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[60].Value = ((int)(Original_EMAIL_BLOCKING.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[59].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[60].Value = System.DBNull.Value;
            }
            if ((Original_PHONE_NUMBER == null)) {
                this.Adapter.UpdateCommand.Parameters[61].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[62].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[61].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[62].Value = ((string)(Original_PHONE_NUMBER));
            }
            if ((Original_PHONE_BLOCKING.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[63].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[64].Value = ((int)(Original_PHONE_BLOCKING.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[63].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[64].Value = System.DBNull.Value;
            }
            if ((Original_MOBILE_NUMBER == null)) {
                this.Adapter.UpdateCommand.Parameters[65].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[66].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[65].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[66].Value = ((string)(Original_MOBILE_NUMBER));
            }
            if ((Original_MOBILE_BLOCKING.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[67].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[68].Value = ((int)(Original_MOBILE_BLOCKING.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[67].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[68].Value = System.DBNull.Value;
            }
            if ((Original_MEDIA_CODE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[69].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[70].Value = ((int)(Original_MEDIA_CODE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[69].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[70].Value = System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[71].Value = ((System.Guid)(Original_ID));
            if ((Original_OBLAST_ID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[72].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[73].Value = ((int)(Original_OBLAST_ID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[72].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[73].Value = System.DBNull.Value;
            }
            if ((Original_REGION_ID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[74].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[75].Value = ((int)(Original_REGION_ID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[74].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[75].Value = System.DBNull.Value;
            }
            if ((Original_POP_POINT_ID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[76].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[77].Value = ((int)(Original_POP_POINT_ID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[76].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[77].Value = System.DBNull.Value;
            }
            if ((Original_SETTLEMENT_TYPE_ID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[78].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[79].Value = ((int)(Original_SETTLEMENT_TYPE_ID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[78].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[79].Value = System.DBNull.Value;
            }
            if ((Original_STREET_TYPE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[80].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[81].Value = ((int)(Original_STREET_TYPE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[80].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[81].Value = System.DBNull.Value;
            }
            if ((Original_STREET.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[82].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[83].Value = ((int)(Original_STREET.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[82].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[83].Value = System.DBNull.Value;
            }
            if ((Original_HOUSE_NUMBER == null)) {
                this.Adapter.UpdateCommand.Parameters[84].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[85].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[84].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[85].Value = ((string)(Original_HOUSE_NUMBER));
            }
            if ((Original_APARTMENT_NUMBER == null)) {
                this.Adapter.UpdateCommand.Parameters[86].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[87].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[86].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[87].Value = ((string)(Original_APARTMENT_NUMBER));
            }
            if ((Original_MICRODISTRICT == null)) {
                this.Adapter.UpdateCommand.Parameters[88].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[89].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[88].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[89].Value = ((string)(Original_MICRODISTRICT));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class RESPONCE_CHANELS_DWTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public RESPONCE_CHANELS_DWTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "RESPONCE_CHANELS_DW";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("NAME", "NAME");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Workstation.Properties.Settings.Default.phmkConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ID, NAME FROM dbo.RESPONCE_CHANELS";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(phmkDataSet.RESPONCE_CHANELS_DWDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual phmkDataSet.RESPONCE_CHANELS_DWDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            phmkDataSet.RESPONCE_CHANELS_DWDataTable dataTable = new phmkDataSet.RESPONCE_CHANELS_DWDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class MEDIA_CLUSTER_DWTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public MEDIA_CLUSTER_DWTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "MEDIA_CLUSTER_DW";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("NAME", "NAME");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Workstation.Properties.Settings.Default.phmkConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT DISTINCT MEDIA_CLUSTER.ID, MEDIA_CLUSTER.NAME
FROM         MEDIA_CLUSTER INNER JOIN
                      MEDIA ON MEDIA_CLUSTER.ID = MEDIA.MEDIA_CLUSTERID INNER JOIN
                      COMPAIGN_MEDIA ON MEDIA.ID = COMPAIGN_MEDIA.MEDIAID
WHERE     (COMPAIGN_MEDIA.COMPAIGNID = @COMPAIGNID)";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@COMPAIGNID", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, "COMPAIGNID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(phmkDataSet.MEDIA_CLUSTER_DWDataTable dataTable, System.Guid COMPAIGNID) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((System.Guid)(COMPAIGNID));
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual phmkDataSet.MEDIA_CLUSTER_DWDataTable GetData(System.Guid COMPAIGNID) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((System.Guid)(COMPAIGNID));
            phmkDataSet.MEDIA_CLUSTER_DWDataTable dataTable = new phmkDataSet.MEDIA_CLUSTER_DWDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class MEDIA_DWTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public MEDIA_DWTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "MEDIA_DW";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("NAME", "NAME");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Workstation.Properties.Settings.Default.phmkConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT     MEDIA.ID, MEDIA.NAME
FROM         MEDIA INNER JOIN
                      COMPAIGN_MEDIA ON MEDIA.ID = COMPAIGN_MEDIA.MEDIAID INNER JOIN
                      MEDIA_CLUSTER ON MEDIA.MEDIA_CLUSTERID = MEDIA_CLUSTER.ID
WHERE     (COMPAIGN_MEDIA.COMPAIGNID = @COMPAIGNID) AND (MEDIA_CLUSTER.ID = @MEDIA_CLUSTERID)";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@COMPAIGNID", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, "COMPAIGNID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@MEDIA_CLUSTERID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(phmkDataSet.MEDIA_DWDataTable dataTable, System.Guid COMPAIGNID, int MEDIA_CLUSTERID) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((System.Guid)(COMPAIGNID));
            this.Adapter.SelectCommand.Parameters[1].Value = ((int)(MEDIA_CLUSTERID));
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual phmkDataSet.MEDIA_DWDataTable GetData(System.Guid COMPAIGNID, int MEDIA_CLUSTERID) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((System.Guid)(COMPAIGNID));
            this.Adapter.SelectCommand.Parameters[1].Value = ((int)(MEDIA_CLUSTERID));
            phmkDataSet.MEDIA_DWDataTable dataTable = new phmkDataSet.MEDIA_DWDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class BRAND_FAMILY_DWTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public BRAND_FAMILY_DWTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "BRAND_FAMILY_DW";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("PMCODE", "PMCODE");
            tableMapping.ColumnMappings.Add("DESCR", "DESCR");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Workstation.Properties.Settings.Default.phmkConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ID, PMCODE, DESCR FROM dbo.BRAND_FAMILY";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(phmkDataSet.BRAND_FAMILY_DWDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual phmkDataSet.BRAND_FAMILY_DWDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            phmkDataSet.BRAND_FAMILY_DWDataTable dataTable = new phmkDataSet.BRAND_FAMILY_DWDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class BRANDS_DWTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public BRANDS_DWTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "BRANDS_DW";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("MBLONGDESCR", "MBLONGDESCR");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Workstation.Properties.Settings.Default.phmkConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     BRANDS.ID, BRANDS.MBLONGDESCR\r\nFROM         BRANDS INNER JOIN\r\n       " +
                "               BRAND_FAMILY ON BRANDS.BRANDFAMILY = BRAND_FAMILY.PMCODE\r\nWHERE  " +
                "   (BRAND_FAMILY.ID = @BRAND_FAMILYID)";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@BRAND_FAMILYID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(phmkDataSet.BRANDS_DWDataTable dataTable, int BRAND_FAMILYID) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(BRAND_FAMILYID));
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual phmkDataSet.BRANDS_DWDataTable GetData(int BRAND_FAMILYID) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(BRAND_FAMILYID));
            phmkDataSet.BRANDS_DWDataTable dataTable = new phmkDataSet.BRANDS_DWDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class BRAND_FAMILY_DW1TableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public BRAND_FAMILY_DW1TableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "BRAND_FAMILY_DW1";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("PMCODE", "PMCODE");
            tableMapping.ColumnMappings.Add("DESCR", "DESCR");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Workstation.Properties.Settings.Default.phmkConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ID, PMCODE, DESCR FROM dbo.BRAND_FAMILY";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(phmkDataSet.BRAND_FAMILY_DW1DataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual phmkDataSet.BRAND_FAMILY_DW1DataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            phmkDataSet.BRAND_FAMILY_DW1DataTable dataTable = new phmkDataSet.BRAND_FAMILY_DW1DataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class BRANDS_DW1TableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public BRANDS_DW1TableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "BRANDS_DW1";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("MBLONGDESCR", "MBLONGDESCR");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Workstation.Properties.Settings.Default.phmkConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     BRANDS.ID, BRANDS.MBLONGDESCR\r\nFROM         BRANDS INNER JOIN\r\n       " +
                "               BRAND_FAMILY ON BRANDS.BRANDFAMILY = BRAND_FAMILY.PMCODE\r\nWHERE  " +
                "   (BRAND_FAMILY.ID = @BRAND_FAMILYID)";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@BRAND_FAMILYID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(phmkDataSet.BRANDS_DW1DataTable dataTable, int BRAND_FAMILYID) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(BRAND_FAMILYID));
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual phmkDataSet.BRANDS_DW1DataTable GetData(int BRAND_FAMILYID) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(BRAND_FAMILYID));
            phmkDataSet.BRANDS_DW1DataTable dataTable = new phmkDataSet.BRANDS_DW1DataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class PRIZES_DWTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public PRIZES_DWTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "PRIZES_DW";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("NAME", "NAME");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Workstation.Properties.Settings.Default.phmkConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     PRIZES.ID, PRIZES.NAME\r\nFROM         PRIZES INNER JOIN\r\n              " +
                "        COMPAIGN_PRIZES ON PRIZES.ID = COMPAIGN_PRIZES.PRIZESID\r\nWHERE     (COMP" +
                "AIGN_PRIZES.COMPAIGNID = @COMPAIGNID)";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@COMPAIGNID", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, "COMPAIGNID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(phmkDataSet.PRIZES_DWDataTable dataTable, System.Guid COMPAIGNID) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((System.Guid)(COMPAIGNID));
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual phmkDataSet.PRIZES_DWDataTable GetData(System.Guid COMPAIGNID) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((System.Guid)(COMPAIGNID));
            phmkDataSet.PRIZES_DWDataTable dataTable = new phmkDataSet.PRIZES_DWDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class PRIZES_DW1TableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public PRIZES_DW1TableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "PRIZES_DW1";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("NAME", "NAME");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Workstation.Properties.Settings.Default.phmkConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     PRIZES.ID, PRIZES.NAME\r\nFROM         PRIZES INNER JOIN\r\n              " +
                "        COMPAIGN_PRIZES ON PRIZES.ID = COMPAIGN_PRIZES.PRIZESID\r\nWHERE     (COMP" +
                "AIGN_PRIZES.COMPAIGNID = @COMPAIGNID)";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@COMPAIGNID", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, "COMPAIGNID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(phmkDataSet.PRIZES_DW1DataTable dataTable, System.Guid COMPAIGNID) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((System.Guid)(COMPAIGNID));
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual phmkDataSet.PRIZES_DW1DataTable GetData(System.Guid COMPAIGNID) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((System.Guid)(COMPAIGNID));
            phmkDataSet.PRIZES_DW1DataTable dataTable = new phmkDataSet.PRIZES_DW1DataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class CONSUMER_QUESTION_FOR_COMPAIGNTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CONSUMER_QUESTION_FOR_COMPAIGNTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "CONSUMER_QUESTION_FOR_COMPAIGN";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("GOMPAIGNID", "GOMPAIGNID");
            tableMapping.ColumnMappings.Add("QUESTIONID", "QUESTIONID");
            tableMapping.ColumnMappings.Add("ANSWER", "ANSWER");
            tableMapping.ColumnMappings.Add("ALTANSWER", "ALTANSWER");
            tableMapping.ColumnMappings.Add("QUESTIONNAME", "QUESTIONNAME");
            tableMapping.ColumnMappings.Add("QUESTIONTYPE", "QUESTIONTYPE");
            tableMapping.ColumnMappings.Add("ANSWERNAME", "ANSWERNAME");
            tableMapping.ColumnMappings.Add("QUESTIONTYPENAME", "QUESTIONTYPENAME");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE    CONSUMER_QUESTION_FOR_COMPAIGN
SET              ANSWER = @ANSWER, ALTANSWER = @ALTANSWER, QUESTIONID = @QUESTIONID, GOMPAIGNID = @GOMPAIGNID, ID = @ID
WHERE     (QUESTIONID = @Original_QUESTIONID) AND (GOMPAIGNID = @Original_GOMPAIGNID) AND (ID = @Original_ID)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ANSWER", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ANSWER", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ALTANSWER", System.Data.SqlDbType.VarChar, 255, System.Data.ParameterDirection.Input, 0, 0, "ALTANSWER", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@QUESTIONID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "QUESTIONID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@GOMPAIGNID", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, "GOMPAIGNID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_QUESTIONID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "QUESTIONID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_GOMPAIGNID", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, "GOMPAIGNID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Workstation.Properties.Settings.Default.phmkConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT     CONSUMER_QUESTION_FOR_COMPAIGN.ID, CONSUMER_QUESTION_FOR_COMPAIGN.GOMPAIGNID, 
                      CONSUMER_QUESTION_FOR_COMPAIGN.QUESTIONID, CONSUMER_QUESTION_FOR_COMPAIGN.ANSWER, 
                      CONSUMER_QUESTION_FOR_COMPAIGN.ALTANSWER, QUESTIONS.QUESTIONNAME, QUESTIONS.QUESTIONTYPE, 
                      ANSWERS.ANSWER AS ANSWERNAME, QUESTION_TYPES.NAME AS QUESTIONTYPENAME
FROM         CONSUMER_QUESTION_FOR_COMPAIGN INNER JOIN
                      QUESTIONS ON CONSUMER_QUESTION_FOR_COMPAIGN.QUESTIONID = QUESTIONS.QUESTIONID INNER JOIN
                      QUESTION_TYPES ON QUESTIONS.QUESTIONTYPE = QUESTION_TYPES.ID LEFT OUTER JOIN
                      ANSWERS ON CONSUMER_QUESTION_FOR_COMPAIGN.ANSWER = ANSWERS.SID
WHERE     (CONSUMER_QUESTION_FOR_COMPAIGN.GOMPAIGNID = @GOMPAIGNID) AND (CONSUMER_QUESTION_FOR_COMPAIGN.ID = @ID)";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@GOMPAIGNID", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, "GOMPAIGNID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(phmkDataSet.CONSUMER_QUESTION_FOR_COMPAIGNDataTable dataTable, System.Guid GOMPAIGNID, System.Guid ID) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((System.Guid)(GOMPAIGNID));
            this.Adapter.SelectCommand.Parameters[1].Value = ((System.Guid)(ID));
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual phmkDataSet.CONSUMER_QUESTION_FOR_COMPAIGNDataTable GetData(System.Guid GOMPAIGNID, System.Guid ID) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((System.Guid)(GOMPAIGNID));
            this.Adapter.SelectCommand.Parameters[1].Value = ((System.Guid)(ID));
            phmkDataSet.CONSUMER_QUESTION_FOR_COMPAIGNDataTable dataTable = new phmkDataSet.CONSUMER_QUESTION_FOR_COMPAIGNDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(phmkDataSet.CONSUMER_QUESTION_FOR_COMPAIGNDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(phmkDataSet dataSet) {
            return this.Adapter.Update(dataSet, "CONSUMER_QUESTION_FOR_COMPAIGN");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ANSWERS_DWTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ANSWERS_DWTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ANSWERS_DW";
            tableMapping.ColumnMappings.Add("SID", "SID");
            tableMapping.ColumnMappings.Add("ANSWER", "ANSWER");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Workstation.Properties.Settings.Default.phmkConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     SID, ANSWER\r\nFROM         ANSWERS\r\nWHERE     (QUESTIONID = @QUESTIONID" +
                ")";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@QUESTIONID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "QUESTIONID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(phmkDataSet.ANSWERS_DWDataTable dataTable, int QUESTIONID) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(QUESTIONID));
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual phmkDataSet.ANSWERS_DWDataTable GetData(int QUESTIONID) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(QUESTIONID));
            phmkDataSet.ANSWERS_DWDataTable dataTable = new phmkDataSet.ANSWERS_DWDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class RESPONCE_CHANELSTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public RESPONCE_CHANELSTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "RESPONCE_CHANELS";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("NAME", "NAME");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[RESPONCE_CHANELS] WHERE (([ID] = @Original_ID) AND ([NAME] = @" +
                "Original_NAME))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_NAME", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "NAME", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[RESPONCE_CHANELS] ([ID], [NAME]) VALUES (@ID, @NAME);\r\nSELECT " +
                "ID, NAME FROM RESPONCE_CHANELS WHERE (ID = @ID)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NAME", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "NAME", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[RESPONCE_CHANELS] SET [ID] = @ID, [NAME] = @NAME WHERE (([ID] = @Or" +
                "iginal_ID) AND ([NAME] = @Original_NAME));\r\nSELECT ID, NAME FROM RESPONCE_CHANEL" +
                "S WHERE (ID = @ID)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NAME", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "NAME", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_NAME", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "NAME", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Workstation.Properties.Settings.Default.phmkConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ID, NAME FROM dbo.RESPONCE_CHANELS";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(phmkDataSet.RESPONCE_CHANELSDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual phmkDataSet.RESPONCE_CHANELSDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            phmkDataSet.RESPONCE_CHANELSDataTable dataTable = new phmkDataSet.RESPONCE_CHANELSDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(phmkDataSet.RESPONCE_CHANELSDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(phmkDataSet dataSet) {
            return this.Adapter.Update(dataSet, "RESPONCE_CHANELS");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ID, string Original_NAME) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ID));
            if ((Original_NAME == null)) {
                throw new System.ArgumentNullException("Original_NAME");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_NAME));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int ID, string NAME) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(ID));
            if ((NAME == null)) {
                throw new System.ArgumentNullException("NAME");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(NAME));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int ID, string NAME, int Original_ID, string Original_NAME) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(ID));
            if ((NAME == null)) {
                throw new System.ArgumentNullException("NAME");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(NAME));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_ID));
            if ((Original_NAME == null)) {
                throw new System.ArgumentNullException("Original_NAME");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_NAME));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class MICRODISTRICTTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public MICRODISTRICTTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "MICRODISTRICT";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("NAME", "NAME");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM MICRODISTRICT\r\nWHERE     (ID = @Original_ID)";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[MICRODISTRICT] ([NAME]) VALUES (@NAME);\r\nSELECT ID, NAME FROM " +
                "MICRODISTRICT WHERE (ID = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NAME", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "NAME", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE    MICRODISTRICT\r\nSET              NAME = @NAME\r\nWHERE     (ID = @Original" +
                "_ID); \r\nSELECT ID, NAME FROM MICRODISTRICT WHERE (ID = @ID)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NAME", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "NAME", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Workstation.Properties.Settings.Default.phmkConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ID, NAME FROM dbo.MICRODISTRICT";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(phmkDataSet.MICRODISTRICTDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual phmkDataSet.MICRODISTRICTDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            phmkDataSet.MICRODISTRICTDataTable dataTable = new phmkDataSet.MICRODISTRICTDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(phmkDataSet.MICRODISTRICTDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(phmkDataSet dataSet) {
            return this.Adapter.Update(dataSet, "MICRODISTRICT");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ID) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ID));
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string NAME) {
            if ((NAME == null)) {
                this.Adapter.InsertCommand.Parameters[0].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(NAME));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string NAME, int Original_ID, int ID) {
            if ((NAME == null)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(NAME));
            }
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(Original_ID));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(ID));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
}

#pragma warning restore 1591